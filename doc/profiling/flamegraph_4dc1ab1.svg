<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="982" onload="init(evt)" viewBox="0 0 1200 982" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="982" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="965.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="965.00"> </text><svg id="frames" x="10" width="1180" total_samples="856"><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4 samples, 0.47%)</title><rect x="0.0000%" y="885" width="0.4673%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.58%)</title><rect x="0.4673%" y="885" width="0.5841%" height="15" fill="rgb(217,0,24)" fg:x="4" fg:w="5"/><text x="0.7173%" y="895.50"></text></g><g><title>core::mem::drop (5 samples, 0.58%)</title><rect x="0.4673%" y="869" width="0.5841%" height="15" fill="rgb(221,193,54)" fg:x="4" fg:w="5"/><text x="0.7173%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::sync::Arc&lt;alloc::string::String&gt;,u32&gt;&gt; (5 samples, 0.58%)</title><rect x="0.4673%" y="853" width="0.5841%" height="15" fill="rgb(248,212,6)" fg:x="4" fg:w="5"/><text x="0.7173%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.58%)</title><rect x="0.4673%" y="837" width="0.5841%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="5"/><text x="0.7173%" y="847.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.70%)</title><rect x="1.0514%" y="885" width="0.7009%" height="15" fill="rgb(232,128,0)" fg:x="9" fg:w="6"/><text x="1.3014%" y="895.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.23%)</title><rect x="1.7523%" y="885" width="0.2336%" height="15" fill="rgb(207,160,47)" fg:x="15" fg:w="2"/><text x="2.0023%" y="895.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.12%)</title><rect x="1.9860%" y="885" width="0.1168%" height="15" fill="rgb(228,23,34)" fg:x="17" fg:w="1"/><text x="2.2360%" y="895.50"></text></g><g><title>_int_free_create_chunk (1 samples, 0.12%)</title><rect x="1.9860%" y="869" width="0.1168%" height="15" fill="rgb(218,30,26)" fg:x="17" fg:w="1"/><text x="2.2360%" y="879.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="2.1028%" y="885" width="0.1168%" height="15" fill="rgb(220,122,19)" fg:x="18" fg:w="1"/><text x="2.3528%" y="895.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.12%)</title><rect x="2.2196%" y="885" width="0.1168%" height="15" fill="rgb(250,228,42)" fg:x="19" fg:w="1"/><text x="2.4696%" y="895.50"></text></g><g><title>graph::Model::has_id (1 samples, 0.12%)</title><rect x="2.3364%" y="885" width="0.1168%" height="15" fill="rgb(240,193,28)" fg:x="20" fg:w="1"/><text x="2.5864%" y="895.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (1 samples, 0.12%)</title><rect x="2.3364%" y="869" width="0.1168%" height="15" fill="rgb(216,20,37)" fg:x="20" fg:w="1"/><text x="2.5864%" y="879.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (1 samples, 0.12%)</title><rect x="2.3364%" y="853" width="0.1168%" height="15" fill="rgb(206,188,39)" fg:x="20" fg:w="1"/><text x="2.5864%" y="863.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.12%)</title><rect x="2.3364%" y="837" width="0.1168%" height="15" fill="rgb(217,207,13)" fg:x="20" fg:w="1"/><text x="2.5864%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.12%)</title><rect x="2.3364%" y="821" width="0.1168%" height="15" fill="rgb(231,73,38)" fg:x="20" fg:w="1"/><text x="2.5864%" y="831.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.12%)</title><rect x="2.3364%" y="805" width="0.1168%" height="15" fill="rgb(225,20,46)" fg:x="20" fg:w="1"/><text x="2.5864%" y="815.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (1 samples, 0.12%)</title><rect x="2.3364%" y="789" width="0.1168%" height="15" fill="rgb(210,31,41)" fg:x="20" fg:w="1"/><text x="2.5864%" y="799.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.12%)</title><rect x="2.3364%" y="773" width="0.1168%" height="15" fill="rgb(221,200,47)" fg:x="20" fg:w="1"/><text x="2.5864%" y="783.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.12%)</title><rect x="2.3364%" y="757" width="0.1168%" height="15" fill="rgb(226,26,5)" fg:x="20" fg:w="1"/><text x="2.5864%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.82%)</title><rect x="2.4533%" y="869" width="0.8178%" height="15" fill="rgb(249,33,26)" fg:x="21" fg:w="7"/><text x="2.7033%" y="879.50"></text></g><g><title>[[heap]] (38 samples, 4.44%)</title><rect x="0.0000%" y="901" width="4.4393%" height="15" fill="rgb(235,183,28)" fg:x="0" fg:w="38"/><text x="0.2500%" y="911.50">[[hea..</text></g><g><title>graph::Model::out_edges (17 samples, 1.99%)</title><rect x="2.4533%" y="885" width="1.9860%" height="15" fill="rgb(221,5,38)" fg:x="21" fg:w="17"/><text x="2.7033%" y="895.50">g..</text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (10 samples, 1.17%)</title><rect x="3.2710%" y="869" width="1.1682%" height="15" fill="rgb(247,18,42)" fg:x="28" fg:w="10"/><text x="3.5210%" y="879.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (10 samples, 1.17%)</title><rect x="3.2710%" y="853" width="1.1682%" height="15" fill="rgb(241,131,45)" fg:x="28" fg:w="10"/><text x="3.5210%" y="863.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (10 samples, 1.17%)</title><rect x="3.2710%" y="837" width="1.1682%" height="15" fill="rgb(249,31,29)" fg:x="28" fg:w="10"/><text x="3.5210%" y="847.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (10 samples, 1.17%)</title><rect x="3.2710%" y="821" width="1.1682%" height="15" fill="rgb(225,111,53)" fg:x="28" fg:w="10"/><text x="3.5210%" y="831.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (10 samples, 1.17%)</title><rect x="3.2710%" y="805" width="1.1682%" height="15" fill="rgb(238,160,17)" fg:x="28" fg:w="10"/><text x="3.5210%" y="815.50"></text></g><g><title>_int_free (1 samples, 0.12%)</title><rect x="4.4393%" y="885" width="0.1168%" height="15" fill="rgb(214,148,48)" fg:x="38" fg:w="1"/><text x="4.6893%" y="895.50"></text></g><g><title>_int_free_maybe_consolidate (4 samples, 0.47%)</title><rect x="4.5561%" y="885" width="0.4673%" height="15" fill="rgb(232,36,49)" fg:x="39" fg:w="4"/><text x="4.8061%" y="895.50"></text></g><g><title>_int_free_merge_chunk (1 samples, 0.12%)</title><rect x="5.0234%" y="885" width="0.1168%" height="15" fill="rgb(209,103,24)" fg:x="43" fg:w="1"/><text x="5.2734%" y="895.50"></text></g><g><title>_int_malloc (3 samples, 0.35%)</title><rect x="5.1402%" y="885" width="0.3505%" height="15" fill="rgb(229,88,8)" fg:x="44" fg:w="3"/><text x="5.3902%" y="895.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (8 samples, 0.93%)</title><rect x="5.4907%" y="885" width="0.9346%" height="15" fill="rgb(213,181,19)" fg:x="47" fg:w="8"/><text x="5.7407%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Step&gt; (1 samples, 0.12%)</title><rect x="6.4252%" y="885" width="0.1168%" height="15" fill="rgb(254,191,54)" fg:x="55" fg:w="1"/><text x="6.6752%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.12%)</title><rect x="6.4252%" y="869" width="0.1168%" height="15" fill="rgb(241,83,37)" fg:x="55" fg:w="1"/><text x="6.6752%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.12%)</title><rect x="6.4252%" y="853" width="0.1168%" height="15" fill="rgb(233,36,39)" fg:x="55" fg:w="1"/><text x="6.6752%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.12%)</title><rect x="6.4252%" y="837" width="0.1168%" height="15" fill="rgb(226,3,54)" fg:x="55" fg:w="1"/><text x="6.6752%" y="847.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="6.4252%" y="821" width="0.1168%" height="15" fill="rgb(245,192,40)" fg:x="55" fg:w="1"/><text x="6.6752%" y="831.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.12%)</title><rect x="6.4252%" y="805" width="0.1168%" height="15" fill="rgb(238,167,29)" fg:x="55" fg:w="1"/><text x="6.6752%" y="815.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.12%)</title><rect x="6.4252%" y="789" width="0.1168%" height="15" fill="rgb(232,182,51)" fg:x="55" fg:w="1"/><text x="6.6752%" y="799.50"></text></g><g><title>[[stack]] (19 samples, 2.22%)</title><rect x="4.4393%" y="901" width="2.2196%" height="15" fill="rgb(231,60,39)" fg:x="38" fg:w="19"/><text x="4.6893%" y="911.50">[..</text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.12%)</title><rect x="6.5421%" y="885" width="0.1168%" height="15" fill="rgb(208,69,12)" fg:x="56" fg:w="1"/><text x="6.7921%" y="895.50"></text></g><g><title>[graphwalker] (1 samples, 0.12%)</title><rect x="6.6589%" y="901" width="0.1168%" height="15" fill="rgb(235,93,37)" fg:x="57" fg:w="1"/><text x="6.9089%" y="911.50"></text></g><g><title>std::io::stdio::print_to_buffer_if_capture_used (1 samples, 0.12%)</title><rect x="6.6589%" y="885" width="0.1168%" height="15" fill="rgb(213,116,39)" fg:x="57" fg:w="1"/><text x="6.9089%" y="895.50"></text></g><g><title>[libc.so.6] (2 samples, 0.23%)</title><rect x="6.7757%" y="901" width="0.2336%" height="15" fill="rgb(222,207,29)" fg:x="58" fg:w="2"/><text x="7.0257%" y="911.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.23%)</title><rect x="6.7757%" y="885" width="0.2336%" height="15" fill="rgb(206,96,30)" fg:x="58" fg:w="2"/><text x="7.0257%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2 samples, 0.23%)</title><rect x="7.0093%" y="885" width="0.2336%" height="15" fill="rgb(218,138,4)" fg:x="60" fg:w="2"/><text x="7.2593%" y="895.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (1 samples, 0.12%)</title><rect x="7.1262%" y="869" width="0.1168%" height="15" fill="rgb(250,191,14)" fg:x="61" fg:w="1"/><text x="7.3762%" y="879.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (1 samples, 0.12%)</title><rect x="7.1262%" y="853" width="0.1168%" height="15" fill="rgb(239,60,40)" fg:x="61" fg:w="1"/><text x="7.3762%" y="863.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (1 samples, 0.12%)</title><rect x="7.1262%" y="837" width="0.1168%" height="15" fill="rgb(206,27,48)" fg:x="61" fg:w="1"/><text x="7.3762%" y="847.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (1 samples, 0.12%)</title><rect x="7.1262%" y="821" width="0.1168%" height="15" fill="rgb(225,35,8)" fg:x="61" fg:w="1"/><text x="7.3762%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (1 samples, 0.12%)</title><rect x="7.1262%" y="805" width="0.1168%" height="15" fill="rgb(250,213,24)" fg:x="61" fg:w="1"/><text x="7.3762%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="7.1262%" y="789" width="0.1168%" height="15" fill="rgb(247,123,22)" fg:x="61" fg:w="1"/><text x="7.3762%" y="799.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="7.1262%" y="773" width="0.1168%" height="15" fill="rgb(231,138,38)" fg:x="61" fg:w="1"/><text x="7.3762%" y="783.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="7.1262%" y="757" width="0.1168%" height="15" fill="rgb(231,145,46)" fg:x="61" fg:w="1"/><text x="7.3762%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 1.17%)</title><rect x="7.2430%" y="885" width="1.1682%" height="15" fill="rgb(251,118,11)" fg:x="62" fg:w="10"/><text x="7.4930%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="885" width="0.1168%" height="15" fill="rgb(217,147,25)" fg:x="72" fg:w="1"/><text x="8.6612%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="869" width="0.1168%" height="15" fill="rgb(247,81,37)" fg:x="72" fg:w="1"/><text x="8.6612%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="853" width="0.1168%" height="15" fill="rgb(209,12,38)" fg:x="72" fg:w="1"/><text x="8.6612%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="837" width="0.1168%" height="15" fill="rgb(227,1,9)" fg:x="72" fg:w="1"/><text x="8.6612%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="821" width="0.1168%" height="15" fill="rgb(248,47,43)" fg:x="72" fg:w="1"/><text x="8.6612%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="805" width="0.1168%" height="15" fill="rgb(221,10,30)" fg:x="72" fg:w="1"/><text x="8.6612%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="789" width="0.1168%" height="15" fill="rgb(210,229,1)" fg:x="72" fg:w="1"/><text x="8.6612%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="773" width="0.1168%" height="15" fill="rgb(222,148,37)" fg:x="72" fg:w="1"/><text x="8.6612%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="757" width="0.1168%" height="15" fill="rgb(234,67,33)" fg:x="72" fg:w="1"/><text x="8.6612%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="741" width="0.1168%" height="15" fill="rgb(247,98,35)" fg:x="72" fg:w="1"/><text x="8.6612%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="725" width="0.1168%" height="15" fill="rgb(247,138,52)" fg:x="72" fg:w="1"/><text x="8.6612%" y="735.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="709" width="0.1168%" height="15" fill="rgb(213,79,30)" fg:x="72" fg:w="1"/><text x="8.6612%" y="719.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="693" width="0.1168%" height="15" fill="rgb(246,177,23)" fg:x="72" fg:w="1"/><text x="8.6612%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="677" width="0.1168%" height="15" fill="rgb(230,62,27)" fg:x="72" fg:w="1"/><text x="8.6612%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="8.4112%" y="661" width="0.1168%" height="15" fill="rgb(216,154,8)" fg:x="72" fg:w="1"/><text x="8.6612%" y="671.50"></text></g><g><title>__GI___libc_free (3 samples, 0.35%)</title><rect x="8.5280%" y="885" width="0.3505%" height="15" fill="rgb(244,35,45)" fg:x="73" fg:w="3"/><text x="8.7780%" y="895.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="8.8785%" y="885" width="0.1168%" height="15" fill="rgb(251,115,12)" fg:x="76" fg:w="1"/><text x="9.1285%" y="895.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.23%)</title><rect x="8.9953%" y="885" width="0.2336%" height="15" fill="rgb(240,54,50)" fg:x="77" fg:w="2"/><text x="9.2453%" y="895.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.23%)</title><rect x="9.2290%" y="885" width="0.2336%" height="15" fill="rgb(233,84,52)" fg:x="79" fg:w="2"/><text x="9.4790%" y="895.50"></text></g><g><title>_int_malloc (4 samples, 0.47%)</title><rect x="9.4626%" y="885" width="0.4673%" height="15" fill="rgb(207,117,47)" fg:x="81" fg:w="4"/><text x="9.7126%" y="895.50"></text></g><g><title>[unknown] (27 samples, 3.15%)</title><rect x="7.0093%" y="901" width="3.1542%" height="15" fill="rgb(249,43,39)" fg:x="60" fg:w="27"/><text x="7.2593%" y="911.50">[un..</text></g><g><title>unlink_chunk (2 samples, 0.23%)</title><rect x="9.9299%" y="885" width="0.2336%" height="15" fill="rgb(209,38,44)" fg:x="85" fg:w="2"/><text x="10.1799%" y="895.50"></text></g><g><title>io::read (1 samples, 0.12%)</title><rect x="10.1636%" y="629" width="0.1168%" height="15" fill="rgb(236,212,23)" fg:x="87" fg:w="1"/><text x="10.4136%" y="639.50"></text></g><g><title>io::json_read::read (1 samples, 0.12%)</title><rect x="10.1636%" y="613" width="0.1168%" height="15" fill="rgb(242,79,21)" fg:x="87" fg:w="1"/><text x="10.4136%" y="623.50"></text></g><g><title>serde_json::de::from_str (1 samples, 0.12%)</title><rect x="10.1636%" y="597" width="0.1168%" height="15" fill="rgb(211,96,35)" fg:x="87" fg:w="1"/><text x="10.4136%" y="607.50"></text></g><g><title>serde_json::de::from_trait (1 samples, 0.12%)</title><rect x="10.1636%" y="581" width="0.1168%" height="15" fill="rgb(253,215,40)" fg:x="87" fg:w="1"/><text x="10.4136%" y="591.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::sync::Arc&lt;T&gt;&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="565" width="0.1168%" height="15" fill="rgb(211,81,21)" fg:x="87" fg:w="1"/><text x="10.4136%" y="575.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::boxed::Box&lt;T&gt;&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="549" width="0.1168%" height="15" fill="rgb(208,190,38)" fg:x="87" fg:w="1"/><text x="10.4136%" y="559.50"></text></g><g><title>graph::_::&lt;impl serde::de::Deserialize for graph::Models&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="533" width="0.1168%" height="15" fill="rgb(235,213,38)" fg:x="87" fg:w="1"/><text x="10.4136%" y="543.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.12%)</title><rect x="10.1636%" y="517" width="0.1168%" height="15" fill="rgb(237,122,38)" fg:x="87" fg:w="1"/><text x="10.4136%" y="527.50"></text></g><g><title>&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Models&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.12%)</title><rect x="10.1636%" y="501" width="0.1168%" height="15" fill="rgb(244,218,35)" fg:x="87" fg:w="1"/><text x="10.4136%" y="511.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.12%)</title><rect x="10.1636%" y="485" width="0.1168%" height="15" fill="rgb(240,68,47)" fg:x="87" fg:w="1"/><text x="10.4136%" y="495.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.12%)</title><rect x="10.1636%" y="469" width="0.1168%" height="15" fill="rgb(210,16,53)" fg:x="87" fg:w="1"/><text x="10.4136%" y="479.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="453" width="0.1168%" height="15" fill="rgb(235,124,12)" fg:x="87" fg:w="1"/><text x="10.4136%" y="463.50"></text></g><g><title>&lt;&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Models&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="437" width="0.1168%" height="15" fill="rgb(224,169,11)" fg:x="87" fg:w="1"/><text x="10.4136%" y="447.50"></text></g><g><title>graph::models_to_hash::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="421" width="0.1168%" height="15" fill="rgb(250,166,2)" fg:x="87" fg:w="1"/><text x="10.4136%" y="431.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="405" width="0.1168%" height="15" fill="rgb(242,216,29)" fg:x="87" fg:w="1"/><text x="10.4136%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (1 samples, 0.12%)</title><rect x="10.1636%" y="389" width="0.1168%" height="15" fill="rgb(230,116,27)" fg:x="87" fg:w="1"/><text x="10.4136%" y="399.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (1 samples, 0.12%)</title><rect x="10.1636%" y="373" width="0.1168%" height="15" fill="rgb(228,99,48)" fg:x="87" fg:w="1"/><text x="10.4136%" y="383.50"></text></g><g><title>serde::de::SeqAccess::next_element (1 samples, 0.12%)</title><rect x="10.1636%" y="357" width="0.1168%" height="15" fill="rgb(253,11,6)" fg:x="87" fg:w="1"/><text x="10.4136%" y="367.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (1 samples, 0.12%)</title><rect x="10.1636%" y="341" width="0.1168%" height="15" fill="rgb(247,143,39)" fg:x="87" fg:w="1"/><text x="10.4136%" y="351.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="325" width="0.1168%" height="15" fill="rgb(236,97,10)" fg:x="87" fg:w="1"/><text x="10.4136%" y="335.50"></text></g><g><title>graph::_::&lt;impl serde::de::Deserialize for graph::Model&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="309" width="0.1168%" height="15" fill="rgb(233,208,19)" fg:x="87" fg:w="1"/><text x="10.4136%" y="319.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (1 samples, 0.12%)</title><rect x="10.1636%" y="293" width="0.1168%" height="15" fill="rgb(216,164,2)" fg:x="87" fg:w="1"/><text x="10.4136%" y="303.50"></text></g><g><title>&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Model&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (1 samples, 0.12%)</title><rect x="10.1636%" y="277" width="0.1168%" height="15" fill="rgb(220,129,5)" fg:x="87" fg:w="1"/><text x="10.4136%" y="287.50"></text></g><g><title>serde::de::MapAccess::next_value (1 samples, 0.12%)</title><rect x="10.1636%" y="261" width="0.1168%" height="15" fill="rgb(242,17,10)" fg:x="87" fg:w="1"/><text x="10.4136%" y="271.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (1 samples, 0.12%)</title><rect x="10.1636%" y="245" width="0.1168%" height="15" fill="rgb(242,107,0)" fg:x="87" fg:w="1"/><text x="10.4136%" y="255.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="229" width="0.1168%" height="15" fill="rgb(251,28,31)" fg:x="87" fg:w="1"/><text x="10.4136%" y="239.50"></text></g><g><title>&lt;&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Model&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="213" width="0.1168%" height="15" fill="rgb(233,223,10)" fg:x="87" fg:w="1"/><text x="10.4136%" y="223.50"></text></g><g><title>graph::edges_to_hash::deserialize (1 samples, 0.12%)</title><rect x="10.1636%" y="197" width="0.1168%" height="15" fill="rgb(215,21,27)" fg:x="87" fg:w="1"/><text x="10.4136%" y="207.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.12%)</title><rect x="10.1636%" y="181" width="0.1168%" height="15" fill="rgb(232,23,21)" fg:x="87" fg:w="1"/><text x="10.4136%" y="191.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (1 samples, 0.12%)</title><rect x="10.1636%" y="165" width="0.1168%" height="15" fill="rgb(244,5,23)" fg:x="87" fg:w="1"/><text x="10.4136%" y="175.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (1 samples, 0.12%)</title><rect x="10.1636%" y="149" width="0.1168%" height="15" fill="rgb(226,81,46)" fg:x="87" fg:w="1"/><text x="10.4136%" y="159.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (1 samples, 0.12%)</title><rect x="10.1636%" y="133" width="0.1168%" height="15" fill="rgb(247,70,30)" fg:x="87" fg:w="1"/><text x="10.4136%" y="143.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (1 samples, 0.12%)</title><rect x="10.1636%" y="117" width="0.1168%" height="15" fill="rgb(212,68,19)" fg:x="87" fg:w="1"/><text x="10.4136%" y="127.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (1 samples, 0.12%)</title><rect x="10.1636%" y="101" width="0.1168%" height="15" fill="rgb(240,187,13)" fg:x="87" fg:w="1"/><text x="10.4136%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.12%)</title><rect x="10.1636%" y="85" width="0.1168%" height="15" fill="rgb(223,113,26)" fg:x="87" fg:w="1"/><text x="10.4136%" y="95.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.12%)</title><rect x="10.1636%" y="69" width="0.1168%" height="15" fill="rgb(206,192,2)" fg:x="87" fg:w="1"/><text x="10.4136%" y="79.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.12%)</title><rect x="10.1636%" y="53" width="0.1168%" height="15" fill="rgb(241,108,4)" fg:x="87" fg:w="1"/><text x="10.4136%" y="63.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.12%)</title><rect x="10.1636%" y="37" width="0.1168%" height="15" fill="rgb(247,173,49)" fg:x="87" fg:w="1"/><text x="10.4136%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Step&gt; (2 samples, 0.23%)</title><rect x="10.2804%" y="613" width="0.2336%" height="15" fill="rgb(224,114,35)" fg:x="88" fg:w="2"/><text x="10.5304%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.23%)</title><rect x="10.2804%" y="597" width="0.2336%" height="15" fill="rgb(245,159,27)" fg:x="88" fg:w="2"/><text x="10.5304%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.23%)</title><rect x="10.2804%" y="581" width="0.2336%" height="15" fill="rgb(245,172,44)" fg:x="88" fg:w="2"/><text x="10.5304%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.23%)</title><rect x="10.2804%" y="565" width="0.2336%" height="15" fill="rgb(236,23,11)" fg:x="88" fg:w="2"/><text x="10.5304%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="10.2804%" y="549" width="0.2336%" height="15" fill="rgb(205,117,38)" fg:x="88" fg:w="2"/><text x="10.5304%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.23%)</title><rect x="10.2804%" y="533" width="0.2336%" height="15" fill="rgb(237,72,25)" fg:x="88" fg:w="2"/><text x="10.5304%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.23%)</title><rect x="10.2804%" y="517" width="0.2336%" height="15" fill="rgb(244,70,9)" fg:x="88" fg:w="2"/><text x="10.5304%" y="527.50"></text></g><g><title>__GI___libc_free (2 samples, 0.23%)</title><rect x="10.2804%" y="501" width="0.2336%" height="15" fill="rgb(217,125,39)" fg:x="88" fg:w="2"/><text x="10.5304%" y="511.50"></text></g><g><title>_int_free (2 samples, 0.23%)</title><rect x="10.2804%" y="485" width="0.2336%" height="15" fill="rgb(235,36,10)" fg:x="88" fg:w="2"/><text x="10.5304%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (18 samples, 2.10%)</title><rect x="12.5000%" y="389" width="2.1028%" height="15" fill="rgb(251,123,47)" fg:x="107" fg:w="18"/><text x="12.7500%" y="399.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (14 samples, 1.64%)</title><rect x="12.9673%" y="373" width="1.6355%" height="15" fill="rgb(221,13,13)" fg:x="111" fg:w="14"/><text x="13.2173%" y="383.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (19 samples, 2.22%)</title><rect x="12.5000%" y="405" width="2.2196%" height="15" fill="rgb(238,131,9)" fg:x="107" fg:w="19"/><text x="12.7500%" y="415.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (1 samples, 0.12%)</title><rect x="14.6028%" y="389" width="0.1168%" height="15" fill="rgb(211,50,8)" fg:x="125" fg:w="1"/><text x="14.8528%" y="399.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.12%)</title><rect x="14.6028%" y="373" width="0.1168%" height="15" fill="rgb(245,182,24)" fg:x="125" fg:w="1"/><text x="14.8528%" y="383.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend::_{{closure}} (1 samples, 0.12%)</title><rect x="14.6028%" y="357" width="0.1168%" height="15" fill="rgb(242,14,37)" fg:x="125" fg:w="1"/><text x="14.8528%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.12%)</title><rect x="16.4720%" y="373" width="0.1168%" height="15" fill="rgb(246,228,12)" fg:x="141" fg:w="1"/><text x="16.7220%" y="383.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (1 samples, 0.12%)</title><rect x="16.4720%" y="357" width="0.1168%" height="15" fill="rgb(213,55,15)" fg:x="141" fg:w="1"/><text x="16.7220%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.12%)</title><rect x="16.4720%" y="341" width="0.1168%" height="15" fill="rgb(209,9,3)" fg:x="141" fg:w="1"/><text x="16.7220%" y="351.50"></text></g><g><title>core::ptr::read (1 samples, 0.12%)</title><rect x="16.4720%" y="325" width="0.1168%" height="15" fill="rgb(230,59,30)" fg:x="141" fg:w="1"/><text x="16.7220%" y="335.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.23%)</title><rect x="16.4720%" y="389" width="0.2336%" height="15" fill="rgb(209,121,21)" fg:x="141" fg:w="2"/><text x="16.7220%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (1 samples, 0.12%)</title><rect x="16.5888%" y="373" width="0.1168%" height="15" fill="rgb(220,109,13)" fg:x="142" fg:w="1"/><text x="16.8388%" y="383.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (38 samples, 4.44%)</title><rect x="12.5000%" y="453" width="4.4393%" height="15" fill="rgb(232,18,1)" fg:x="107" fg:w="38"/><text x="12.7500%" y="463.50">alloc..</text></g><g><title>alloc::collections::btree::mem::replace (38 samples, 4.44%)</title><rect x="12.5000%" y="437" width="4.4393%" height="15" fill="rgb(215,41,42)" fg:x="107" fg:w="38"/><text x="12.7500%" y="447.50">alloc..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (38 samples, 4.44%)</title><rect x="12.5000%" y="421" width="4.4393%" height="15" fill="rgb(224,123,36)" fg:x="107" fg:w="38"/><text x="12.7500%" y="431.50">alloc..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (19 samples, 2.22%)</title><rect x="14.7196%" y="405" width="2.2196%" height="15" fill="rgb(240,125,3)" fg:x="126" fg:w="19"/><text x="14.9696%" y="415.50">a..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.23%)</title><rect x="16.7056%" y="389" width="0.2336%" height="15" fill="rgb(205,98,50)" fg:x="143" fg:w="2"/><text x="16.9556%" y="399.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (2 samples, 0.23%)</title><rect x="16.7056%" y="373" width="0.2336%" height="15" fill="rgb(205,185,37)" fg:x="143" fg:w="2"/><text x="16.9556%" y="383.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (2 samples, 0.23%)</title><rect x="16.7056%" y="357" width="0.2336%" height="15" fill="rgb(238,207,15)" fg:x="143" fg:w="2"/><text x="16.9556%" y="367.50"></text></g><g><title>core::ptr::read (2 samples, 0.23%)</title><rect x="16.7056%" y="341" width="0.2336%" height="15" fill="rgb(213,199,42)" fg:x="143" fg:w="2"/><text x="16.9556%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (64 samples, 7.48%)</title><rect x="10.5140%" y="485" width="7.4766%" height="15" fill="rgb(235,201,11)" fg:x="90" fg:w="64"/><text x="10.7640%" y="495.50">&lt;alloc::co..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (56 samples, 6.54%)</title><rect x="11.4486%" y="469" width="6.5421%" height="15" fill="rgb(207,46,11)" fg:x="98" fg:w="56"/><text x="11.6986%" y="479.50">alloc::co..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (9 samples, 1.05%)</title><rect x="16.9393%" y="453" width="1.0514%" height="15" fill="rgb(241,35,35)" fg:x="145" fg:w="9"/><text x="17.1893%" y="463.50"></text></g><g><title>machine::Machine::is_all_fullfilled (73 samples, 8.53%)</title><rect x="10.5140%" y="613" width="8.5280%" height="15" fill="rgb(243,32,47)" fg:x="90" fg:w="73"/><text x="10.7640%" y="623.50">machine::Mac..</text></g><g><title>machine::Context::is_fullfilled (73 samples, 8.53%)</title><rect x="10.5140%" y="597" width="8.5280%" height="15" fill="rgb(247,202,23)" fg:x="90" fg:w="73"/><text x="10.7640%" y="607.50">machine::Con..</text></g><g><title>machine::Context::get_fullfilment (73 samples, 8.53%)</title><rect x="10.5140%" y="581" width="8.5280%" height="15" fill="rgb(219,102,11)" fg:x="90" fg:w="73"/><text x="10.7640%" y="591.50">machine::Con..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (73 samples, 8.53%)</title><rect x="10.5140%" y="565" width="8.5280%" height="15" fill="rgb(243,110,44)" fg:x="90" fg:w="73"/><text x="10.7640%" y="575.50">&lt;core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (73 samples, 8.53%)</title><rect x="10.5140%" y="549" width="8.5280%" height="15" fill="rgb(222,74,54)" fg:x="90" fg:w="73"/><text x="10.7640%" y="559.50">core::iter::..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (73 samples, 8.53%)</title><rect x="10.5140%" y="533" width="8.5280%" height="15" fill="rgb(216,99,12)" fg:x="90" fg:w="73"/><text x="10.7640%" y="543.50">&lt;usize as co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (73 samples, 8.53%)</title><rect x="10.5140%" y="517" width="8.5280%" height="15" fill="rgb(226,22,26)" fg:x="90" fg:w="73"/><text x="10.7640%" y="527.50">&lt;core::iter:..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (73 samples, 8.53%)</title><rect x="10.5140%" y="501" width="8.5280%" height="15" fill="rgb(217,163,10)" fg:x="90" fg:w="73"/><text x="10.7640%" y="511.50">core::iter::..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (9 samples, 1.05%)</title><rect x="17.9907%" y="485" width="1.0514%" height="15" fill="rgb(213,25,53)" fg:x="154" fg:w="9"/><text x="18.2407%" y="495.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (9 samples, 1.05%)</title><rect x="17.9907%" y="469" width="1.0514%" height="15" fill="rgb(252,105,26)" fg:x="154" fg:w="9"/><text x="18.2407%" y="479.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (1 samples, 0.12%)</title><rect x="19.0421%" y="597" width="0.1168%" height="15" fill="rgb(220,39,43)" fg:x="163" fg:w="1"/><text x="19.2921%" y="607.50"></text></g><g><title>alloc::collections::btree::map::entry::VacantEntry&lt;K,V,A&gt;::insert (1 samples, 0.12%)</title><rect x="19.0421%" y="581" width="0.1168%" height="15" fill="rgb(229,68,48)" fg:x="163" fg:w="1"/><text x="19.2921%" y="591.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert_recursing (1 samples, 0.12%)</title><rect x="19.0421%" y="565" width="0.1168%" height="15" fill="rgb(252,8,32)" fg:x="163" fg:w="1"/><text x="19.2921%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;::insert (1 samples, 0.12%)</title><rect x="19.0421%" y="549" width="0.1168%" height="15" fill="rgb(223,20,43)" fg:x="163" fg:w="1"/><text x="19.2921%" y="559.50"></text></g><g><title>alloc::collections::btree::node::splitpoint (1 samples, 0.12%)</title><rect x="19.0421%" y="533" width="0.1168%" height="15" fill="rgb(229,81,49)" fg:x="163" fg:w="1"/><text x="19.2921%" y="543.50"></text></g><g><title>machine::Machine::reset (6 samples, 0.70%)</title><rect x="19.0421%" y="613" width="0.7009%" height="15" fill="rgb(236,28,36)" fg:x="163" fg:w="6"/><text x="19.2921%" y="623.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (5 samples, 0.58%)</title><rect x="19.1589%" y="597" width="0.5841%" height="15" fill="rgb(249,185,26)" fg:x="164" fg:w="5"/><text x="19.4089%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="581" width="0.5841%" height="15" fill="rgb(249,174,33)" fg:x="164" fg:w="5"/><text x="19.4089%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="565" width="0.5841%" height="15" fill="rgb(233,201,37)" fg:x="164" fg:w="5"/><text x="19.4089%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="549" width="0.5841%" height="15" fill="rgb(221,78,26)" fg:x="164" fg:w="5"/><text x="19.4089%" y="559.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="533" width="0.5841%" height="15" fill="rgb(250,127,30)" fg:x="164" fg:w="5"/><text x="19.4089%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="517" width="0.5841%" height="15" fill="rgb(230,49,44)" fg:x="164" fg:w="5"/><text x="19.4089%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="501" width="0.5841%" height="15" fill="rgb(229,67,23)" fg:x="164" fg:w="5"/><text x="19.4089%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="485" width="0.5841%" height="15" fill="rgb(249,83,47)" fg:x="164" fg:w="5"/><text x="19.4089%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="469" width="0.5841%" height="15" fill="rgb(215,43,3)" fg:x="164" fg:w="5"/><text x="19.4089%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="453" width="0.5841%" height="15" fill="rgb(238,154,13)" fg:x="164" fg:w="5"/><text x="19.4089%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="437" width="0.5841%" height="15" fill="rgb(219,56,2)" fg:x="164" fg:w="5"/><text x="19.4089%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="19.1589%" y="421" width="0.5841%" height="15" fill="rgb(233,0,4)" fg:x="164" fg:w="5"/><text x="19.4089%" y="431.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1 samples, 0.12%)</title><rect x="19.7430%" y="597" width="0.1168%" height="15" fill="rgb(235,30,7)" fg:x="169" fg:w="1"/><text x="19.9930%" y="607.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.12%)</title><rect x="19.7430%" y="581" width="0.1168%" height="15" fill="rgb(250,79,13)" fg:x="169" fg:w="1"/><text x="19.9930%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="19.7430%" y="565" width="0.1168%" height="15" fill="rgb(211,146,34)" fg:x="169" fg:w="1"/><text x="19.9930%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="19.7430%" y="549" width="0.1168%" height="15" fill="rgb(228,22,38)" fg:x="169" fg:w="1"/><text x="19.9930%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="19.7430%" y="533" width="0.1168%" height="15" fill="rgb(235,168,5)" fg:x="169" fg:w="1"/><text x="19.9930%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="19.7430%" y="517" width="0.1168%" height="15" fill="rgb(221,155,16)" fg:x="169" fg:w="1"/><text x="19.9930%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="19.7430%" y="501" width="0.1168%" height="15" fill="rgb(215,215,53)" fg:x="169" fg:w="1"/><text x="19.9930%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="19.7430%" y="485" width="0.1168%" height="15" fill="rgb(223,4,10)" fg:x="169" fg:w="1"/><text x="19.9930%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="19.7430%" y="469" width="0.1168%" height="15" fill="rgb(234,103,6)" fg:x="169" fg:w="1"/><text x="19.9930%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.12%)</title><rect x="19.7430%" y="453" width="0.1168%" height="15" fill="rgb(227,97,0)" fg:x="169" fg:w="1"/><text x="19.9930%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="19.7430%" y="437" width="0.1168%" height="15" fill="rgb(234,150,53)" fg:x="169" fg:w="1"/><text x="19.9930%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="19.7430%" y="421" width="0.1168%" height="15" fill="rgb(228,201,54)" fg:x="169" fg:w="1"/><text x="19.9930%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="19.7430%" y="405" width="0.1168%" height="15" fill="rgb(222,22,37)" fg:x="169" fg:w="1"/><text x="19.9930%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="19.7430%" y="389" width="0.1168%" height="15" fill="rgb(237,53,32)" fg:x="169" fg:w="1"/><text x="19.9930%" y="399.50"></text></g><g><title>tcache_get (1 samples, 0.12%)</title><rect x="19.7430%" y="373" width="0.1168%" height="15" fill="rgb(233,25,53)" fg:x="169" fg:w="1"/><text x="19.9930%" y="383.50"></text></g><g><title>tcache_get_n (1 samples, 0.12%)</title><rect x="19.7430%" y="357" width="0.1168%" height="15" fill="rgb(210,40,34)" fg:x="169" fg:w="1"/><text x="19.9930%" y="367.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (2 samples, 0.23%)</title><rect x="19.8598%" y="597" width="0.2336%" height="15" fill="rgb(241,220,44)" fg:x="170" fg:w="2"/><text x="20.1098%" y="607.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.23%)</title><rect x="19.8598%" y="581" width="0.2336%" height="15" fill="rgb(235,28,35)" fg:x="170" fg:w="2"/><text x="20.1098%" y="591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.23%)</title><rect x="19.8598%" y="565" width="0.2336%" height="15" fill="rgb(210,56,17)" fg:x="170" fg:w="2"/><text x="20.1098%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.23%)</title><rect x="19.8598%" y="549" width="0.2336%" height="15" fill="rgb(224,130,29)" fg:x="170" fg:w="2"/><text x="20.1098%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (1 samples, 0.12%)</title><rect x="19.9766%" y="533" width="0.1168%" height="15" fill="rgb(235,212,8)" fg:x="171" fg:w="1"/><text x="20.2266%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.12%)</title><rect x="19.9766%" y="517" width="0.1168%" height="15" fill="rgb(223,33,50)" fg:x="171" fg:w="1"/><text x="20.2266%" y="527.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.12%)</title><rect x="19.9766%" y="501" width="0.1168%" height="15" fill="rgb(219,149,13)" fg:x="171" fg:w="1"/><text x="20.2266%" y="511.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.12%)</title><rect x="19.9766%" y="485" width="0.1168%" height="15" fill="rgb(250,156,29)" fg:x="171" fg:w="1"/><text x="20.2266%" y="495.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.12%)</title><rect x="19.9766%" y="469" width="0.1168%" height="15" fill="rgb(216,193,19)" fg:x="171" fg:w="1"/><text x="20.2266%" y="479.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (119 samples, 13.90%)</title><rect x="21.0280%" y="485" width="13.9019%" height="15" fill="rgb(216,135,14)" fg:x="180" fg:w="119"/><text x="21.2780%" y="495.50">&lt;alloc::sync::Arc&lt;T,A..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (113 samples, 13.20%)</title><rect x="21.7290%" y="469" width="13.2009%" height="15" fill="rgb(241,47,5)" fg:x="186" fg:w="113"/><text x="21.9790%" y="479.50">core::sync::atomic::..</text></g><g><title>core::sync::atomic::atomic_add (113 samples, 13.20%)</title><rect x="21.7290%" y="453" width="13.2009%" height="15" fill="rgb(233,42,35)" fg:x="186" fg:w="113"/><text x="21.9790%" y="463.50">core::sync::atomic::..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (6 samples, 0.70%)</title><rect x="34.9299%" y="485" width="0.7009%" height="15" fill="rgb(231,13,6)" fg:x="299" fg:w="6"/><text x="35.1799%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (13 samples, 1.52%)</title><rect x="35.6308%" y="485" width="1.5187%" height="15" fill="rgb(207,181,40)" fg:x="305" fg:w="13"/><text x="35.8808%" y="495.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (8 samples, 0.93%)</title><rect x="36.2150%" y="469" width="0.9346%" height="15" fill="rgb(254,173,49)" fg:x="310" fg:w="8"/><text x="36.4650%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="40.3037%" y="325" width="0.1168%" height="15" fill="rgb(221,1,38)" fg:x="345" fg:w="1"/><text x="40.5537%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="40.3037%" y="309" width="0.1168%" height="15" fill="rgb(206,124,46)" fg:x="345" fg:w="1"/><text x="40.5537%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="40.3037%" y="293" width="0.1168%" height="15" fill="rgb(249,21,11)" fg:x="345" fg:w="1"/><text x="40.5537%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="40.3037%" y="277" width="0.1168%" height="15" fill="rgb(222,201,40)" fg:x="345" fg:w="1"/><text x="40.5537%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="40.3037%" y="261" width="0.1168%" height="15" fill="rgb(235,61,29)" fg:x="345" fg:w="1"/><text x="40.5537%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="40.3037%" y="245" width="0.1168%" height="15" fill="rgb(219,207,3)" fg:x="345" fg:w="1"/><text x="40.5537%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="40.3037%" y="229" width="0.1168%" height="15" fill="rgb(222,56,46)" fg:x="345" fg:w="1"/><text x="40.5537%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="40.3037%" y="213" width="0.1168%" height="15" fill="rgb(239,76,54)" fg:x="345" fg:w="1"/><text x="40.5537%" y="223.50"></text></g><g><title>checked_request2size (2 samples, 0.23%)</title><rect x="40.4206%" y="325" width="0.2336%" height="15" fill="rgb(231,124,27)" fg:x="346" fg:w="2"/><text x="40.6706%" y="335.50"></text></g><g><title>__GI___libc_malloc (28 samples, 3.27%)</title><rect x="37.5000%" y="357" width="3.2710%" height="15" fill="rgb(249,195,6)" fg:x="321" fg:w="28"/><text x="37.7500%" y="367.50">__G..</text></g><g><title>_int_malloc (24 samples, 2.80%)</title><rect x="37.9673%" y="341" width="2.8037%" height="15" fill="rgb(237,174,47)" fg:x="325" fg:w="24"/><text x="38.2173%" y="351.50">_i..</text></g><g><title>tcache_put (1 samples, 0.12%)</title><rect x="40.6542%" y="325" width="0.1168%" height="15" fill="rgb(206,201,31)" fg:x="348" fg:w="1"/><text x="40.9042%" y="335.50"></text></g><g><title>__rdl_alloc (2 samples, 0.23%)</title><rect x="40.7710%" y="357" width="0.2336%" height="15" fill="rgb(231,57,52)" fg:x="349" fg:w="2"/><text x="41.0210%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.23%)</title><rect x="40.7710%" y="341" width="0.2336%" height="15" fill="rgb(248,177,22)" fg:x="349" fg:w="2"/><text x="41.0210%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (179 samples, 20.91%)</title><rect x="20.4439%" y="501" width="20.9112%" height="15" fill="rgb(215,211,37)" fg:x="175" fg:w="179"/><text x="20.6939%" y="511.50">&lt;alloc::collections::btree::map::..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (36 samples, 4.21%)</title><rect x="37.1495%" y="485" width="4.2056%" height="15" fill="rgb(241,128,51)" fg:x="318" fg:w="36"/><text x="37.3995%" y="495.50">alloc..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (36 samples, 4.21%)</title><rect x="37.1495%" y="469" width="4.2056%" height="15" fill="rgb(227,165,31)" fg:x="318" fg:w="36"/><text x="37.3995%" y="479.50">alloc..</text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (36 samples, 4.21%)</title><rect x="37.1495%" y="453" width="4.2056%" height="15" fill="rgb(228,167,24)" fg:x="318" fg:w="36"/><text x="37.3995%" y="463.50">alloc..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (36 samples, 4.21%)</title><rect x="37.1495%" y="437" width="4.2056%" height="15" fill="rgb(228,143,12)" fg:x="318" fg:w="36"/><text x="37.3995%" y="447.50">alloc..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (36 samples, 4.21%)</title><rect x="37.1495%" y="421" width="4.2056%" height="15" fill="rgb(249,149,8)" fg:x="318" fg:w="36"/><text x="37.3995%" y="431.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (36 samples, 4.21%)</title><rect x="37.1495%" y="405" width="4.2056%" height="15" fill="rgb(243,35,44)" fg:x="318" fg:w="36"/><text x="37.3995%" y="415.50">&lt;allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (36 samples, 4.21%)</title><rect x="37.1495%" y="389" width="4.2056%" height="15" fill="rgb(246,89,9)" fg:x="318" fg:w="36"/><text x="37.3995%" y="399.50">alloc..</text></g><g><title>alloc::alloc::alloc (36 samples, 4.21%)</title><rect x="37.1495%" y="373" width="4.2056%" height="15" fill="rgb(233,213,13)" fg:x="318" fg:w="36"/><text x="37.3995%" y="383.50">alloc..</text></g><g><title>__rust_alloc (3 samples, 0.35%)</title><rect x="41.0047%" y="357" width="0.3505%" height="15" fill="rgb(233,141,41)" fg:x="351" fg:w="3"/><text x="41.2547%" y="367.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (26 samples, 3.04%)</title><rect x="41.3551%" y="501" width="3.0374%" height="15" fill="rgb(239,167,4)" fg:x="354" fg:w="26"/><text x="41.6051%" y="511.50">&lt;al..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (25 samples, 2.92%)</title><rect x="41.4720%" y="485" width="2.9206%" height="15" fill="rgb(209,217,16)" fg:x="355" fg:w="25"/><text x="41.7220%" y="495.50">co..</text></g><g><title>core::sync::atomic::atomic_add (25 samples, 2.92%)</title><rect x="41.4720%" y="469" width="2.9206%" height="15" fill="rgb(219,88,35)" fg:x="355" fg:w="25"/><text x="41.7220%" y="479.50">co..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (4 samples, 0.47%)</title><rect x="44.3925%" y="501" width="0.4673%" height="15" fill="rgb(220,193,23)" fg:x="380" fg:w="4"/><text x="44.6425%" y="511.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (1 samples, 0.12%)</title><rect x="44.7430%" y="485" width="0.1168%" height="15" fill="rgb(230,90,52)" fg:x="383" fg:w="1"/><text x="44.9930%" y="495.50"></text></g><g><title>_int_malloc (3 samples, 0.35%)</title><rect x="44.9766%" y="293" width="0.3505%" height="15" fill="rgb(252,106,19)" fg:x="385" fg:w="3"/><text x="45.2266%" y="303.50"></text></g><g><title>checked_request2size (1 samples, 0.12%)</title><rect x="45.2103%" y="277" width="0.1168%" height="15" fill="rgb(206,74,20)" fg:x="387" fg:w="1"/><text x="45.4603%" y="287.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.58%)</title><rect x="44.8598%" y="309" width="0.5841%" height="15" fill="rgb(230,138,44)" fg:x="384" fg:w="5"/><text x="45.1098%" y="319.50"></text></g><g><title>checked_request2size (1 samples, 0.12%)</title><rect x="45.3271%" y="293" width="0.1168%" height="15" fill="rgb(235,182,43)" fg:x="388" fg:w="1"/><text x="45.5771%" y="303.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (7 samples, 0.82%)</title><rect x="44.8598%" y="389" width="0.8178%" height="15" fill="rgb(242,16,51)" fg:x="384" fg:w="7"/><text x="45.1098%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (7 samples, 0.82%)</title><rect x="44.8598%" y="373" width="0.8178%" height="15" fill="rgb(248,9,4)" fg:x="384" fg:w="7"/><text x="45.1098%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.82%)</title><rect x="44.8598%" y="357" width="0.8178%" height="15" fill="rgb(210,31,22)" fg:x="384" fg:w="7"/><text x="45.1098%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.82%)</title><rect x="44.8598%" y="341" width="0.8178%" height="15" fill="rgb(239,54,39)" fg:x="384" fg:w="7"/><text x="45.1098%" y="351.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.82%)</title><rect x="44.8598%" y="325" width="0.8178%" height="15" fill="rgb(230,99,41)" fg:x="384" fg:w="7"/><text x="45.1098%" y="335.50"></text></g><g><title>__rdl_alloc (2 samples, 0.23%)</title><rect x="45.4439%" y="309" width="0.2336%" height="15" fill="rgb(253,106,12)" fg:x="389" fg:w="2"/><text x="45.6939%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.23%)</title><rect x="45.4439%" y="293" width="0.2336%" height="15" fill="rgb(213,46,41)" fg:x="389" fg:w="2"/><text x="45.6939%" y="303.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (8 samples, 0.93%)</title><rect x="44.8598%" y="453" width="0.9346%" height="15" fill="rgb(215,133,35)" fg:x="384" fg:w="8"/><text x="45.1098%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (8 samples, 0.93%)</title><rect x="44.8598%" y="437" width="0.9346%" height="15" fill="rgb(213,28,5)" fg:x="384" fg:w="8"/><text x="45.1098%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (8 samples, 0.93%)</title><rect x="44.8598%" y="421" width="0.9346%" height="15" fill="rgb(215,77,49)" fg:x="384" fg:w="8"/><text x="45.1098%" y="431.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (8 samples, 0.93%)</title><rect x="44.8598%" y="405" width="0.9346%" height="15" fill="rgb(248,100,22)" fg:x="384" fg:w="8"/><text x="45.1098%" y="415.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::init (1 samples, 0.12%)</title><rect x="45.6776%" y="389" width="0.1168%" height="15" fill="rgb(208,67,9)" fg:x="391" fg:w="1"/><text x="45.9276%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.12%)</title><rect x="45.6776%" y="373" width="0.1168%" height="15" fill="rgb(219,133,21)" fg:x="391" fg:w="1"/><text x="45.9276%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="45.6776%" y="357" width="0.1168%" height="15" fill="rgb(246,46,29)" fg:x="391" fg:w="1"/><text x="45.9276%" y="367.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (9 samples, 1.05%)</title><rect x="44.8598%" y="501" width="1.0514%" height="15" fill="rgb(246,185,52)" fg:x="384" fg:w="9"/><text x="45.1098%" y="511.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (9 samples, 1.05%)</title><rect x="44.8598%" y="485" width="1.0514%" height="15" fill="rgb(252,136,11)" fg:x="384" fg:w="9"/><text x="45.1098%" y="495.50"></text></g><g><title>alloc::collections::btree::mem::replace (9 samples, 1.05%)</title><rect x="44.8598%" y="469" width="1.0514%" height="15" fill="rgb(219,138,53)" fg:x="384" fg:w="9"/><text x="45.1098%" y="479.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="45.7944%" y="453" width="0.1168%" height="15" fill="rgb(211,51,23)" fg:x="392" fg:w="1"/><text x="46.0444%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (221 samples, 25.82%)</title><rect x="20.2103%" y="517" width="25.8178%" height="15" fill="rgb(247,221,28)" fg:x="173" fg:w="221"/><text x="20.4603%" y="527.50">&lt;alloc::collections::btree::map::BTreeMap..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (1 samples, 0.12%)</title><rect x="45.9112%" y="501" width="0.1168%" height="15" fill="rgb(251,222,45)" fg:x="393" fg:w="1"/><text x="46.1612%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.58%)</title><rect x="46.0280%" y="517" width="0.5841%" height="15" fill="rgb(217,162,53)" fg:x="394" fg:w="5"/><text x="46.2780%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (5 samples, 0.58%)</title><rect x="46.0280%" y="501" width="0.5841%" height="15" fill="rgb(229,93,14)" fg:x="394" fg:w="5"/><text x="46.2780%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_add (5 samples, 0.58%)</title><rect x="46.0280%" y="485" width="0.5841%" height="15" fill="rgb(209,67,49)" fg:x="394" fg:w="5"/><text x="46.2780%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (228 samples, 26.64%)</title><rect x="20.0935%" y="533" width="26.6355%" height="15" fill="rgb(213,87,29)" fg:x="172" fg:w="228"/><text x="20.3435%" y="543.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (1 samples, 0.12%)</title><rect x="46.6121%" y="517" width="0.1168%" height="15" fill="rgb(205,151,52)" fg:x="399" fg:w="1"/><text x="46.8621%" y="527.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (1 samples, 0.12%)</title><rect x="46.6121%" y="501" width="0.1168%" height="15" fill="rgb(253,215,39)" fg:x="399" fg:w="1"/><text x="46.8621%" y="511.50"></text></g><g><title>alloc::collections::btree::mem::replace (1 samples, 0.12%)</title><rect x="46.6121%" y="485" width="0.1168%" height="15" fill="rgb(221,220,41)" fg:x="399" fg:w="1"/><text x="46.8621%" y="495.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (1 samples, 0.12%)</title><rect x="46.6121%" y="469" width="0.1168%" height="15" fill="rgb(218,133,21)" fg:x="399" fg:w="1"/><text x="46.8621%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (1 samples, 0.12%)</title><rect x="46.6121%" y="453" width="0.1168%" height="15" fill="rgb(221,193,43)" fg:x="399" fg:w="1"/><text x="46.8621%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (1 samples, 0.12%)</title><rect x="46.6121%" y="437" width="0.1168%" height="15" fill="rgb(240,128,52)" fg:x="399" fg:w="1"/><text x="46.8621%" y="447.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (1 samples, 0.12%)</title><rect x="46.6121%" y="421" width="0.1168%" height="15" fill="rgb(253,114,12)" fg:x="399" fg:w="1"/><text x="46.8621%" y="431.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::init (1 samples, 0.12%)</title><rect x="46.6121%" y="405" width="0.1168%" height="15" fill="rgb(215,223,47)" fg:x="399" fg:w="1"/><text x="46.8621%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.12%)</title><rect x="46.6121%" y="389" width="0.1168%" height="15" fill="rgb(248,225,23)" fg:x="399" fg:w="1"/><text x="46.8621%" y="399.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="46.6121%" y="373" width="0.1168%" height="15" fill="rgb(250,108,0)" fg:x="399" fg:w="1"/><text x="46.8621%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (229 samples, 26.75%)</title><rect x="20.0935%" y="565" width="26.7523%" height="15" fill="rgb(228,208,7)" fg:x="172" fg:w="229"/><text x="20.3435%" y="575.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (229 samples, 26.75%)</title><rect x="20.0935%" y="549" width="26.7523%" height="15" fill="rgb(244,45,10)" fg:x="172" fg:w="229"/><text x="20.3435%" y="559.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="46.7290%" y="533" width="0.1168%" height="15" fill="rgb(207,125,25)" fg:x="400" fg:w="1"/><text x="46.9790%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.12%)</title><rect x="46.7290%" y="517" width="0.1168%" height="15" fill="rgb(210,195,18)" fg:x="400" fg:w="1"/><text x="46.9790%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.12%)</title><rect x="46.7290%" y="501" width="0.1168%" height="15" fill="rgb(249,80,12)" fg:x="400" fg:w="1"/><text x="46.9790%" y="511.50"></text></g><g><title>core::option::Option&lt;&amp;mut T&gt;::cloned (230 samples, 26.87%)</title><rect x="20.0935%" y="597" width="26.8692%" height="15" fill="rgb(221,65,9)" fg:x="172" fg:w="230"/><text x="20.3435%" y="607.50">core::option::Option&lt;&amp;mut T&gt;::cloned</text></g><g><title>&lt;machine::Context as core::clone::Clone&gt;::clone (230 samples, 26.87%)</title><rect x="20.0935%" y="581" width="26.8692%" height="15" fill="rgb(235,49,36)" fg:x="172" fg:w="230"/><text x="20.3435%" y="591.50">&lt;machine::Context as core::clone::Clone&gt;::c..</text></g><g><title>&lt;evalexpr::context::HashMapContext as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="46.8458%" y="565" width="0.1168%" height="15" fill="rgb(225,32,20)" fg:x="401" fg:w="1"/><text x="47.0958%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="46.8458%" y="549" width="0.1168%" height="15" fill="rgb(215,141,46)" fg:x="401" fg:w="1"/><text x="47.0958%" y="559.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="46.8458%" y="533" width="0.1168%" height="15" fill="rgb(250,160,47)" fg:x="401" fg:w="1"/><text x="47.0958%" y="543.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (1 samples, 0.12%)</title><rect x="49.0654%" y="485" width="0.1168%" height="15" fill="rgb(216,222,40)" fg:x="420" fg:w="1"/><text x="49.3154%" y="495.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (1 samples, 0.12%)</title><rect x="49.0654%" y="469" width="0.1168%" height="15" fill="rgb(234,217,39)" fg:x="420" fg:w="1"/><text x="49.3154%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (1 samples, 0.12%)</title><rect x="49.0654%" y="453" width="0.1168%" height="15" fill="rgb(207,178,40)" fg:x="420" fg:w="1"/><text x="49.3154%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.12%)</title><rect x="49.0654%" y="437" width="0.1168%" height="15" fill="rgb(221,136,13)" fg:x="420" fg:w="1"/><text x="49.3154%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.12%)</title><rect x="49.0654%" y="421" width="0.1168%" height="15" fill="rgb(249,199,10)" fg:x="420" fg:w="1"/><text x="49.3154%" y="431.50"></text></g><g><title>__GI___libc_free (1 samples, 0.12%)</title><rect x="49.0654%" y="405" width="0.1168%" height="15" fill="rgb(249,222,13)" fg:x="420" fg:w="1"/><text x="49.3154%" y="415.50"></text></g><g><title>_int_free_maybe_consolidate (1 samples, 0.12%)</title><rect x="49.0654%" y="389" width="0.1168%" height="15" fill="rgb(244,185,38)" fg:x="420" fg:w="1"/><text x="49.3154%" y="399.50"></text></g><g><title>malloc_consolidate (1 samples, 0.12%)</title><rect x="49.0654%" y="373" width="0.1168%" height="15" fill="rgb(236,202,9)" fg:x="420" fg:w="1"/><text x="49.3154%" y="383.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (10 samples, 1.17%)</title><rect x="51.2850%" y="405" width="1.1682%" height="15" fill="rgb(250,229,37)" fg:x="439" fg:w="10"/><text x="51.5350%" y="415.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.23%)</title><rect x="52.2196%" y="389" width="0.2336%" height="15" fill="rgb(206,174,23)" fg:x="447" fg:w="2"/><text x="52.4696%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (1 samples, 0.12%)</title><rect x="52.3364%" y="373" width="0.1168%" height="15" fill="rgb(211,33,43)" fg:x="448" fg:w="1"/><text x="52.5864%" y="383.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (1 samples, 0.12%)</title><rect x="52.3364%" y="357" width="0.1168%" height="15" fill="rgb(245,58,50)" fg:x="448" fg:w="1"/><text x="52.5864%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (1 samples, 0.12%)</title><rect x="52.3364%" y="341" width="0.1168%" height="15" fill="rgb(244,68,36)" fg:x="448" fg:w="1"/><text x="52.5864%" y="351.50"></text></g><g><title>core::ptr::read (1 samples, 0.12%)</title><rect x="52.3364%" y="325" width="0.1168%" height="15" fill="rgb(232,229,15)" fg:x="448" fg:w="1"/><text x="52.5864%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (14 samples, 1.64%)</title><rect x="52.4533%" y="405" width="1.6355%" height="15" fill="rgb(254,30,23)" fg:x="449" fg:w="14"/><text x="52.7033%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (9 samples, 1.05%)</title><rect x="53.0374%" y="389" width="1.0514%" height="15" fill="rgb(235,160,14)" fg:x="454" fg:w="9"/><text x="53.2874%" y="399.50"></text></g><g><title>_int_free (13 samples, 1.52%)</title><rect x="54.4393%" y="341" width="1.5187%" height="15" fill="rgb(212,155,44)" fg:x="466" fg:w="13"/><text x="54.6893%" y="351.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.35%)</title><rect x="55.9579%" y="341" width="0.3505%" height="15" fill="rgb(226,2,50)" fg:x="479" fg:w="3"/><text x="56.2079%" y="351.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.47%)</title><rect x="57.2430%" y="325" width="0.4673%" height="15" fill="rgb(234,177,6)" fg:x="490" fg:w="4"/><text x="57.4930%" y="335.50"></text></g><g><title>unlink_chunk (1 samples, 0.12%)</title><rect x="57.5935%" y="309" width="0.1168%" height="15" fill="rgb(217,24,9)" fg:x="493" fg:w="1"/><text x="57.8435%" y="319.50"></text></g><g><title>free_perturb (2 samples, 0.23%)</title><rect x="57.7103%" y="325" width="0.2336%" height="15" fill="rgb(220,13,46)" fg:x="494" fg:w="2"/><text x="57.9603%" y="335.50"></text></g><g><title>_int_free_merge_chunk (16 samples, 1.87%)</title><rect x="56.3084%" y="341" width="1.8692%" height="15" fill="rgb(239,221,27)" fg:x="482" fg:w="16"/><text x="56.5584%" y="351.50">_..</text></g><g><title>unlink_chunk (2 samples, 0.23%)</title><rect x="57.9439%" y="325" width="0.2336%" height="15" fill="rgb(222,198,25)" fg:x="496" fg:w="2"/><text x="58.1939%" y="335.50"></text></g><g><title>__GI___libc_free (35 samples, 4.09%)</title><rect x="54.2056%" y="357" width="4.0888%" height="15" fill="rgb(211,99,13)" fg:x="464" fg:w="35"/><text x="54.4556%" y="367.50">__GI..</text></g><g><title>arena_for_chunk (1 samples, 0.12%)</title><rect x="58.1776%" y="341" width="0.1168%" height="15" fill="rgb(232,111,31)" fg:x="498" fg:w="1"/><text x="58.4276%" y="351.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.35%)</title><rect x="58.2944%" y="357" width="0.3505%" height="15" fill="rgb(245,82,37)" fg:x="499" fg:w="3"/><text x="58.5444%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.35%)</title><rect x="58.2944%" y="341" width="0.3505%" height="15" fill="rgb(227,149,46)" fg:x="499" fg:w="3"/><text x="58.5444%" y="351.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (82 samples, 9.58%)</title><rect x="49.1822%" y="469" width="9.5794%" height="15" fill="rgb(218,36,50)" fg:x="421" fg:w="82"/><text x="49.4322%" y="479.50">alloc::collect..</text></g><g><title>alloc::collections::btree::mem::replace (82 samples, 9.58%)</title><rect x="49.1822%" y="453" width="9.5794%" height="15" fill="rgb(226,80,48)" fg:x="421" fg:w="82"/><text x="49.4322%" y="463.50">alloc::collect..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (67 samples, 7.83%)</title><rect x="50.9346%" y="437" width="7.8271%" height="15" fill="rgb(238,224,15)" fg:x="436" fg:w="67"/><text x="51.1846%" y="447.50">alloc::coll..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (67 samples, 7.83%)</title><rect x="50.9346%" y="421" width="7.8271%" height="15" fill="rgb(241,136,10)" fg:x="436" fg:w="67"/><text x="51.1846%" y="431.50">alloc::coll..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (40 samples, 4.67%)</title><rect x="54.0888%" y="405" width="4.6729%" height="15" fill="rgb(208,32,45)" fg:x="463" fg:w="40"/><text x="54.3388%" y="415.50">alloc..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (39 samples, 4.56%)</title><rect x="54.2056%" y="389" width="4.5561%" height="15" fill="rgb(207,135,9)" fg:x="464" fg:w="39"/><text x="54.4556%" y="399.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (39 samples, 4.56%)</title><rect x="54.2056%" y="373" width="4.5561%" height="15" fill="rgb(206,86,44)" fg:x="464" fg:w="39"/><text x="54.4556%" y="383.50">alloc..</text></g><g><title>__rust_dealloc (1 samples, 0.12%)</title><rect x="58.6449%" y="357" width="0.1168%" height="15" fill="rgb(245,177,15)" fg:x="502" fg:w="1"/><text x="58.8949%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (112 samples, 13.08%)</title><rect x="47.6636%" y="501" width="13.0841%" height="15" fill="rgb(206,64,50)" fg:x="408" fg:w="112"/><text x="47.9136%" y="511.50">alloc::collections::..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (99 samples, 11.57%)</title><rect x="49.1822%" y="485" width="11.5654%" height="15" fill="rgb(234,36,40)" fg:x="421" fg:w="99"/><text x="49.4322%" y="495.50">alloc::collection..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (17 samples, 1.99%)</title><rect x="58.7617%" y="469" width="1.9860%" height="15" fill="rgb(213,64,8)" fg:x="503" fg:w="17"/><text x="59.0117%" y="479.50">a..</text></g><g><title>core::ptr::drop_in_place&lt;machine::Context&gt; (230 samples, 26.87%)</title><rect x="46.9626%" y="597" width="26.8692%" height="15" fill="rgb(210,75,36)" fg:x="402" fg:w="230"/><text x="47.2126%" y="607.50">core::ptr::drop_in_place&lt;machine::Context&gt;</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::sync::Arc&lt;alloc::string::String&gt;,u32&gt;&gt; (230 samples, 26.87%)</title><rect x="46.9626%" y="581" width="26.8692%" height="15" fill="rgb(229,88,21)" fg:x="402" fg:w="230"/><text x="47.2126%" y="591.50">core::ptr::drop_in_place&lt;alloc::collections..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (230 samples, 26.87%)</title><rect x="46.9626%" y="565" width="26.8692%" height="15" fill="rgb(252,204,47)" fg:x="402" fg:w="230"/><text x="47.2126%" y="575.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K..</text></g><g><title>core::mem::drop (230 samples, 26.87%)</title><rect x="46.9626%" y="549" width="26.8692%" height="15" fill="rgb(208,77,27)" fg:x="402" fg:w="230"/><text x="47.2126%" y="559.50">core::mem::drop</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::sync::Arc&lt;alloc::string::String&gt;,u32&gt;&gt; (230 samples, 26.87%)</title><rect x="46.9626%" y="533" width="26.8692%" height="15" fill="rgb(221,76,26)" fg:x="402" fg:w="230"/><text x="47.2126%" y="543.50">core::ptr::drop_in_place&lt;alloc::collections..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (230 samples, 26.87%)</title><rect x="46.9626%" y="517" width="26.8692%" height="15" fill="rgb(225,139,18)" fg:x="402" fg:w="230"/><text x="47.2126%" y="527.50">&lt;alloc::collections::btree::map::IntoIter&lt;K..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (112 samples, 13.08%)</title><rect x="60.7477%" y="501" width="13.0841%" height="15" fill="rgb(230,137,11)" fg:x="520" fg:w="112"/><text x="60.9977%" y="511.50">alloc::collections::..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (112 samples, 13.08%)</title><rect x="60.7477%" y="485" width="13.0841%" height="15" fill="rgb(212,28,1)" fg:x="520" fg:w="112"/><text x="60.9977%" y="495.50">core::mem::maybe_uni..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::string::String&gt;&gt; (112 samples, 13.08%)</title><rect x="60.7477%" y="469" width="13.0841%" height="15" fill="rgb(248,164,17)" fg:x="520" fg:w="112"/><text x="60.9977%" y="479.50">core::ptr::drop_in_p..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (112 samples, 13.08%)</title><rect x="60.7477%" y="453" width="13.0841%" height="15" fill="rgb(222,171,42)" fg:x="520" fg:w="112"/><text x="60.9977%" y="463.50">&lt;alloc::sync::Arc&lt;T,..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (101 samples, 11.80%)</title><rect x="62.0327%" y="437" width="11.7991%" height="15" fill="rgb(243,84,45)" fg:x="531" fg:w="101"/><text x="62.2827%" y="447.50">core::sync::atomi..</text></g><g><title>core::sync::atomic::atomic_sub (101 samples, 11.80%)</title><rect x="62.0327%" y="421" width="11.7991%" height="15" fill="rgb(252,49,23)" fg:x="531" fg:w="101"/><text x="62.2827%" y="431.50">core::sync::atomi..</text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.23%)</title><rect x="74.0654%" y="453" width="0.2336%" height="15" fill="rgb(215,19,7)" fg:x="634" fg:w="2"/><text x="74.3154%" y="463.50"></text></g><g><title>graph::Model::has_id (5 samples, 0.58%)</title><rect x="73.8318%" y="597" width="0.5841%" height="15" fill="rgb(238,81,41)" fg:x="632" fg:w="5"/><text x="74.0818%" y="607.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (4 samples, 0.47%)</title><rect x="73.9486%" y="581" width="0.4673%" height="15" fill="rgb(210,199,37)" fg:x="633" fg:w="4"/><text x="74.1986%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (4 samples, 0.47%)</title><rect x="73.9486%" y="565" width="0.4673%" height="15" fill="rgb(244,192,49)" fg:x="633" fg:w="4"/><text x="74.1986%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.47%)</title><rect x="73.9486%" y="549" width="0.4673%" height="15" fill="rgb(226,211,11)" fg:x="633" fg:w="4"/><text x="74.1986%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (4 samples, 0.47%)</title><rect x="73.9486%" y="533" width="0.4673%" height="15" fill="rgb(236,162,54)" fg:x="633" fg:w="4"/><text x="74.1986%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.47%)</title><rect x="73.9486%" y="517" width="0.4673%" height="15" fill="rgb(220,229,9)" fg:x="633" fg:w="4"/><text x="74.1986%" y="527.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (3 samples, 0.35%)</title><rect x="74.0654%" y="501" width="0.3505%" height="15" fill="rgb(250,87,22)" fg:x="634" fg:w="3"/><text x="74.3154%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.35%)</title><rect x="74.0654%" y="485" width="0.3505%" height="15" fill="rgb(239,43,17)" fg:x="634" fg:w="3"/><text x="74.3154%" y="495.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.35%)</title><rect x="74.0654%" y="469" width="0.3505%" height="15" fill="rgb(231,177,25)" fg:x="634" fg:w="3"/><text x="74.3154%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (1 samples, 0.12%)</title><rect x="74.2991%" y="453" width="0.1168%" height="15" fill="rgb(219,179,1)" fg:x="636" fg:w="1"/><text x="74.5491%" y="463.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (1 samples, 0.12%)</title><rect x="74.4159%" y="581" width="0.1168%" height="15" fill="rgb(238,219,53)" fg:x="637" fg:w="1"/><text x="74.6659%" y="591.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (1 samples, 0.12%)</title><rect x="74.4159%" y="565" width="0.1168%" height="15" fill="rgb(232,167,36)" fg:x="637" fg:w="1"/><text x="74.6659%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="74.4159%" y="549" width="0.1168%" height="15" fill="rgb(244,19,51)" fg:x="637" fg:w="1"/><text x="74.6659%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="74.4159%" y="533" width="0.1168%" height="15" fill="rgb(224,6,22)" fg:x="637" fg:w="1"/><text x="74.6659%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="74.4159%" y="517" width="0.1168%" height="15" fill="rgb(224,145,5)" fg:x="637" fg:w="1"/><text x="74.6659%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="74.4159%" y="501" width="0.1168%" height="15" fill="rgb(234,130,49)" fg:x="637" fg:w="1"/><text x="74.6659%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="74.4159%" y="485" width="0.1168%" height="15" fill="rgb(254,6,2)" fg:x="637" fg:w="1"/><text x="74.6659%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="74.4159%" y="469" width="0.1168%" height="15" fill="rgb(208,96,46)" fg:x="637" fg:w="1"/><text x="74.6659%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="74.4159%" y="453" width="0.1168%" height="15" fill="rgb(239,3,39)" fg:x="637" fg:w="1"/><text x="74.6659%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.12%)</title><rect x="74.4159%" y="437" width="0.1168%" height="15" fill="rgb(233,210,1)" fg:x="637" fg:w="1"/><text x="74.6659%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="74.4159%" y="421" width="0.1168%" height="15" fill="rgb(244,137,37)" fg:x="637" fg:w="1"/><text x="74.6659%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="74.4159%" y="405" width="0.1168%" height="15" fill="rgb(240,136,2)" fg:x="637" fg:w="1"/><text x="74.6659%" y="415.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="74.4159%" y="389" width="0.1168%" height="15" fill="rgb(239,18,37)" fg:x="637" fg:w="1"/><text x="74.6659%" y="399.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="74.4159%" y="373" width="0.1168%" height="15" fill="rgb(218,185,22)" fg:x="637" fg:w="1"/><text x="74.6659%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="74.4159%" y="357" width="0.1168%" height="15" fill="rgb(225,218,4)" fg:x="637" fg:w="1"/><text x="74.6659%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (2 samples, 0.23%)</title><rect x="74.5327%" y="517" width="0.2336%" height="15" fill="rgb(230,182,32)" fg:x="638" fg:w="2"/><text x="74.7827%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.23%)</title><rect x="74.5327%" y="501" width="0.2336%" height="15" fill="rgb(242,56,43)" fg:x="638" fg:w="2"/><text x="74.7827%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (2 samples, 0.23%)</title><rect x="74.5327%" y="485" width="0.2336%" height="15" fill="rgb(233,99,24)" fg:x="638" fg:w="2"/><text x="74.7827%" y="495.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.23%)</title><rect x="74.5327%" y="469" width="0.2336%" height="15" fill="rgb(234,209,42)" fg:x="638" fg:w="2"/><text x="74.7827%" y="479.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.12%)</title><rect x="74.6495%" y="453" width="0.1168%" height="15" fill="rgb(227,7,12)" fg:x="639" fg:w="1"/><text x="74.8995%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (3 samples, 0.35%)</title><rect x="74.5327%" y="581" width="0.3505%" height="15" fill="rgb(245,203,43)" fg:x="638" fg:w="3"/><text x="74.7827%" y="591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.35%)</title><rect x="74.5327%" y="565" width="0.3505%" height="15" fill="rgb(238,205,33)" fg:x="638" fg:w="3"/><text x="74.7827%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.35%)</title><rect x="74.5327%" y="549" width="0.3505%" height="15" fill="rgb(231,56,7)" fg:x="638" fg:w="3"/><text x="74.7827%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.35%)</title><rect x="74.5327%" y="533" width="0.3505%" height="15" fill="rgb(244,186,29)" fg:x="638" fg:w="3"/><text x="74.7827%" y="543.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (1 samples, 0.12%)</title><rect x="74.7664%" y="517" width="0.1168%" height="15" fill="rgb(234,111,31)" fg:x="640" fg:w="1"/><text x="75.0164%" y="527.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (1 samples, 0.12%)</title><rect x="74.8832%" y="581" width="0.1168%" height="15" fill="rgb(241,149,10)" fg:x="641" fg:w="1"/><text x="75.1332%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;graph::Edge&gt;&gt; (2 samples, 0.23%)</title><rect x="75.0000%" y="581" width="0.2336%" height="15" fill="rgb(249,206,44)" fg:x="642" fg:w="2"/><text x="75.2500%" y="591.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.23%)</title><rect x="75.0000%" y="565" width="0.2336%" height="15" fill="rgb(251,153,30)" fg:x="642" fg:w="2"/><text x="75.2500%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.12%)</title><rect x="75.1168%" y="549" width="0.1168%" height="15" fill="rgb(239,152,38)" fg:x="643" fg:w="1"/><text x="75.3668%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.12%)</title><rect x="75.1168%" y="533" width="0.1168%" height="15" fill="rgb(249,139,47)" fg:x="643" fg:w="1"/><text x="75.3668%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;machine::Position&gt;&gt; (1 samples, 0.12%)</title><rect x="75.2336%" y="581" width="0.1168%" height="15" fill="rgb(244,64,35)" fg:x="644" fg:w="1"/><text x="75.4836%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="75.2336%" y="565" width="0.1168%" height="15" fill="rgb(216,46,15)" fg:x="644" fg:w="1"/><text x="75.4836%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[machine::Position]&gt; (1 samples, 0.12%)</title><rect x="75.2336%" y="549" width="0.1168%" height="15" fill="rgb(250,74,19)" fg:x="644" fg:w="1"/><text x="75.4836%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Position&gt; (1 samples, 0.12%)</title><rect x="75.2336%" y="533" width="0.1168%" height="15" fill="rgb(249,42,33)" fg:x="644" fg:w="1"/><text x="75.4836%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::string::String&gt;&gt; (1 samples, 0.12%)</title><rect x="75.2336%" y="517" width="0.1168%" height="15" fill="rgb(242,149,17)" fg:x="644" fg:w="1"/><text x="75.4836%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="75.2336%" y="501" width="0.1168%" height="15" fill="rgb(244,29,21)" fg:x="644" fg:w="1"/><text x="75.4836%" y="511.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::drop_slow (1 samples, 0.12%)</title><rect x="75.2336%" y="485" width="0.1168%" height="15" fill="rgb(220,130,37)" fg:x="644" fg:w="1"/><text x="75.4836%" y="495.50"></text></g><g><title>core::mem::drop (1 samples, 0.12%)</title><rect x="75.2336%" y="469" width="0.1168%" height="15" fill="rgb(211,67,2)" fg:x="644" fg:w="1"/><text x="75.4836%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Weak&lt;alloc::string::String,&amp;alloc::alloc::Global&gt;&gt; (1 samples, 0.12%)</title><rect x="75.2336%" y="453" width="0.1168%" height="15" fill="rgb(235,68,52)" fg:x="644" fg:w="1"/><text x="75.4836%" y="463.50"></text></g><g><title>&lt;alloc::sync::Weak&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="75.2336%" y="437" width="0.1168%" height="15" fill="rgb(246,142,3)" fg:x="644" fg:w="1"/><text x="75.4836%" y="447.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.12%)</title><rect x="75.2336%" y="421" width="0.1168%" height="15" fill="rgb(241,25,7)" fg:x="644" fg:w="1"/><text x="75.4836%" y="431.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.12%)</title><rect x="75.2336%" y="405" width="0.1168%" height="15" fill="rgb(242,119,39)" fg:x="644" fg:w="1"/><text x="75.4836%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (12 samples, 1.40%)</title><rect x="76.6355%" y="453" width="1.4019%" height="15" fill="rgb(241,98,45)" fg:x="656" fg:w="12"/><text x="76.8855%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (7 samples, 0.82%)</title><rect x="77.2196%" y="437" width="0.8178%" height="15" fill="rgb(254,28,30)" fg:x="661" fg:w="7"/><text x="77.4696%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (16 samples, 1.87%)</title><rect x="76.6355%" y="469" width="1.8692%" height="15" fill="rgb(241,142,54)" fg:x="656" fg:w="16"/><text x="76.8855%" y="479.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (4 samples, 0.47%)</title><rect x="78.0374%" y="453" width="0.4673%" height="15" fill="rgb(222,85,15)" fg:x="668" fg:w="4"/><text x="78.2874%" y="463.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (3 samples, 0.35%)</title><rect x="78.1542%" y="437" width="0.3505%" height="15" fill="rgb(210,85,47)" fg:x="669" fg:w="3"/><text x="78.4042%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (14 samples, 1.64%)</title><rect x="78.5047%" y="469" width="1.6355%" height="15" fill="rgb(224,206,25)" fg:x="672" fg:w="14"/><text x="78.7547%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (9 samples, 1.05%)</title><rect x="79.0888%" y="453" width="1.0514%" height="15" fill="rgb(243,201,19)" fg:x="677" fg:w="9"/><text x="79.3388%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (3 samples, 0.35%)</title><rect x="79.7897%" y="437" width="0.3505%" height="15" fill="rgb(236,59,4)" fg:x="683" fg:w="3"/><text x="80.0397%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (3 samples, 0.35%)</title><rect x="79.7897%" y="421" width="0.3505%" height="15" fill="rgb(254,179,45)" fg:x="683" fg:w="3"/><text x="80.0397%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (3 samples, 0.35%)</title><rect x="79.7897%" y="405" width="0.3505%" height="15" fill="rgb(226,14,10)" fg:x="683" fg:w="3"/><text x="80.0397%" y="415.50"></text></g><g><title>core::ptr::read (3 samples, 0.35%)</title><rect x="79.7897%" y="389" width="0.3505%" height="15" fill="rgb(244,27,41)" fg:x="683" fg:w="3"/><text x="80.0397%" y="399.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (35 samples, 4.09%)</title><rect x="76.6355%" y="517" width="4.0888%" height="15" fill="rgb(235,35,32)" fg:x="656" fg:w="35"/><text x="76.8855%" y="527.50">allo..</text></g><g><title>alloc::collections::btree::mem::replace (35 samples, 4.09%)</title><rect x="76.6355%" y="501" width="4.0888%" height="15" fill="rgb(218,68,31)" fg:x="656" fg:w="35"/><text x="76.8855%" y="511.50">allo..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (35 samples, 4.09%)</title><rect x="76.6355%" y="485" width="4.0888%" height="15" fill="rgb(207,120,37)" fg:x="656" fg:w="35"/><text x="76.8855%" y="495.50">allo..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (5 samples, 0.58%)</title><rect x="80.1402%" y="469" width="0.5841%" height="15" fill="rgb(227,98,0)" fg:x="686" fg:w="5"/><text x="80.3902%" y="479.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (5 samples, 0.58%)</title><rect x="80.1402%" y="453" width="0.5841%" height="15" fill="rgb(207,7,3)" fg:x="686" fg:w="5"/><text x="80.3902%" y="463.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (5 samples, 0.58%)</title><rect x="80.1402%" y="437" width="0.5841%" height="15" fill="rgb(206,98,19)" fg:x="686" fg:w="5"/><text x="80.3902%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (5 samples, 0.58%)</title><rect x="80.1402%" y="421" width="0.5841%" height="15" fill="rgb(217,5,26)" fg:x="686" fg:w="5"/><text x="80.3902%" y="431.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 6.07%)</title><rect x="75.3505%" y="565" width="6.0748%" height="15" fill="rgb(235,190,38)" fg:x="645" fg:w="52"/><text x="75.6005%" y="575.50">&lt;alloc::..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (52 samples, 6.07%)</title><rect x="75.3505%" y="549" width="6.0748%" height="15" fill="rgb(247,86,24)" fg:x="645" fg:w="52"/><text x="75.6005%" y="559.50">&lt;alloc::..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (41 samples, 4.79%)</title><rect x="76.6355%" y="533" width="4.7897%" height="15" fill="rgb(205,101,16)" fg:x="656" fg:w="41"/><text x="76.8855%" y="543.50">alloc:..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (6 samples, 0.70%)</title><rect x="80.7243%" y="517" width="0.7009%" height="15" fill="rgb(246,168,33)" fg:x="691" fg:w="6"/><text x="80.9743%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (1 samples, 0.12%)</title><rect x="81.3084%" y="501" width="0.1168%" height="15" fill="rgb(231,114,1)" fg:x="696" fg:w="1"/><text x="81.5584%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (66 samples, 7.71%)</title><rect x="81.4252%" y="565" width="7.7103%" height="15" fill="rgb(207,184,53)" fg:x="697" fg:w="66"/><text x="81.6752%" y="575.50">&lt;alloc::str..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (66 samples, 7.71%)</title><rect x="81.4252%" y="549" width="7.7103%" height="15" fill="rgb(224,95,51)" fg:x="697" fg:w="66"/><text x="81.6752%" y="559.50">core::str::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (66 samples, 7.71%)</title><rect x="81.4252%" y="533" width="7.7103%" height="15" fill="rgb(212,188,45)" fg:x="697" fg:w="66"/><text x="81.6752%" y="543.50">core::cmp::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (66 samples, 7.71%)</title><rect x="81.4252%" y="517" width="7.7103%" height="15" fill="rgb(223,154,38)" fg:x="697" fg:w="66"/><text x="81.6752%" y="527.50">core::slice..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (66 samples, 7.71%)</title><rect x="81.4252%" y="501" width="7.7103%" height="15" fill="rgb(251,22,52)" fg:x="697" fg:w="66"/><text x="81.6752%" y="511.50">&lt;[A] as cor..</text></g><g><title>__memcmp_avx2_movbe (59 samples, 6.89%)</title><rect x="82.2430%" y="485" width="6.8925%" height="15" fill="rgb(229,209,22)" fg:x="704" fg:w="59"/><text x="82.4930%" y="495.50">__memcmp_..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="89.1355%" y="565" width="0.1168%" height="15" fill="rgb(234,138,34)" fg:x="763" fg:w="1"/><text x="89.3855%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (1 samples, 0.12%)</title><rect x="89.1355%" y="549" width="0.1168%" height="15" fill="rgb(212,95,11)" fg:x="763" fg:w="1"/><text x="89.3855%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_add (1 samples, 0.12%)</title><rect x="89.1355%" y="533" width="0.1168%" height="15" fill="rgb(240,179,47)" fg:x="763" fg:w="1"/><text x="89.3855%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.12%)</title><rect x="89.2523%" y="565" width="0.1168%" height="15" fill="rgb(240,163,11)" fg:x="764" fg:w="1"/><text x="89.5023%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.12%)</title><rect x="89.2523%" y="549" width="0.1168%" height="15" fill="rgb(236,37,12)" fg:x="764" fg:w="1"/><text x="89.5023%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="89.2523%" y="533" width="0.1168%" height="15" fill="rgb(232,164,16)" fg:x="764" fg:w="1"/><text x="89.5023%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="89.2523%" y="517" width="0.1168%" height="15" fill="rgb(244,205,15)" fg:x="764" fg:w="1"/><text x="89.5023%" y="527.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="89.2523%" y="501" width="0.1168%" height="15" fill="rgb(223,117,47)" fg:x="764" fg:w="1"/><text x="89.5023%" y="511.50"></text></g><g><title>graph::Model::out_edges (121 samples, 14.14%)</title><rect x="75.3505%" y="581" width="14.1355%" height="15" fill="rgb(244,107,35)" fg:x="645" fg:w="121"/><text x="75.6005%" y="591.50">graph::Model::out_edg..</text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,alloc::sync::Arc&lt;graph::Edge&gt;&gt;&gt;&gt; (1 samples, 0.12%)</title><rect x="89.3692%" y="565" width="0.1168%" height="15" fill="rgb(205,140,8)" fg:x="765" fg:w="1"/><text x="89.6192%" y="575.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="89.3692%" y="549" width="0.1168%" height="15" fill="rgb(228,84,46)" fg:x="765" fg:w="1"/><text x="89.6192%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (1 samples, 0.12%)</title><rect x="89.3692%" y="533" width="0.1168%" height="15" fill="rgb(254,188,9)" fg:x="765" fg:w="1"/><text x="89.6192%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (1 samples, 0.12%)</title><rect x="89.3692%" y="517" width="0.1168%" height="15" fill="rgb(206,112,54)" fg:x="765" fg:w="1"/><text x="89.6192%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.12%)</title><rect x="89.3692%" y="501" width="0.1168%" height="15" fill="rgb(216,84,49)" fg:x="765" fg:w="1"/><text x="89.6192%" y="511.50"></text></g><g><title>machine::Machine::get_next_edge (130 samples, 15.19%)</title><rect x="74.4159%" y="597" width="15.1869%" height="15" fill="rgb(214,194,35)" fg:x="637" fg:w="130"/><text x="74.6659%" y="607.50">machine::Machine::get_n..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (1 samples, 0.12%)</title><rect x="89.4860%" y="581" width="0.1168%" height="15" fill="rgb(249,28,3)" fg:x="766" fg:w="1"/><text x="89.7360%" y="591.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (1 samples, 0.12%)</title><rect x="89.4860%" y="565" width="0.1168%" height="15" fill="rgb(222,56,52)" fg:x="766" fg:w="1"/><text x="89.7360%" y="575.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (1 samples, 0.12%)</title><rect x="89.4860%" y="549" width="0.1168%" height="15" fill="rgb(245,217,50)" fg:x="766" fg:w="1"/><text x="89.7360%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.12%)</title><rect x="89.4860%" y="533" width="0.1168%" height="15" fill="rgb(213,201,24)" fg:x="766" fg:w="1"/><text x="89.7360%" y="543.50"></text></g><g><title>&lt;machine::Step as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="89.7196%" y="581" width="0.1168%" height="15" fill="rgb(248,116,28)" fg:x="768" fg:w="1"/><text x="89.9696%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="89.7196%" y="565" width="0.1168%" height="15" fill="rgb(219,72,43)" fg:x="768" fg:w="1"/><text x="89.9696%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="89.7196%" y="549" width="0.1168%" height="15" fill="rgb(209,138,14)" fg:x="768" fg:w="1"/><text x="89.9696%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="89.7196%" y="533" width="0.1168%" height="15" fill="rgb(222,18,33)" fg:x="768" fg:w="1"/><text x="89.9696%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="89.7196%" y="517" width="0.1168%" height="15" fill="rgb(213,199,7)" fg:x="768" fg:w="1"/><text x="89.9696%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="89.7196%" y="501" width="0.1168%" height="15" fill="rgb(250,110,10)" fg:x="768" fg:w="1"/><text x="89.9696%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="89.7196%" y="485" width="0.1168%" height="15" fill="rgb(248,123,6)" fg:x="768" fg:w="1"/><text x="89.9696%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.12%)</title><rect x="89.7196%" y="469" width="0.1168%" height="15" fill="rgb(206,91,31)" fg:x="768" fg:w="1"/><text x="89.9696%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.12%)</title><rect x="89.7196%" y="453" width="0.1168%" height="15" fill="rgb(211,154,13)" fg:x="768" fg:w="1"/><text x="89.9696%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.12%)</title><rect x="89.7196%" y="437" width="0.1168%" height="15" fill="rgb(225,148,7)" fg:x="768" fg:w="1"/><text x="89.9696%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.12%)</title><rect x="89.7196%" y="421" width="0.1168%" height="15" fill="rgb(220,160,43)" fg:x="768" fg:w="1"/><text x="89.9696%" y="431.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.12%)</title><rect x="89.7196%" y="405" width="0.1168%" height="15" fill="rgb(213,52,39)" fg:x="768" fg:w="1"/><text x="89.9696%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.12%)</title><rect x="89.7196%" y="389" width="0.1168%" height="15" fill="rgb(243,137,7)" fg:x="768" fg:w="1"/><text x="89.9696%" y="399.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="89.7196%" y="373" width="0.1168%" height="15" fill="rgb(230,79,13)" fg:x="768" fg:w="1"/><text x="89.9696%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.12%)</title><rect x="89.8364%" y="421" width="0.1168%" height="15" fill="rgb(247,105,23)" fg:x="769" fg:w="1"/><text x="90.0864%" y="431.50"></text></g><g><title>&lt;machine::Step as core::default::Default&gt;::default (2 samples, 0.23%)</title><rect x="89.8364%" y="581" width="0.2336%" height="15" fill="rgb(223,179,41)" fg:x="769" fg:w="2"/><text x="90.0864%" y="591.50"></text></g><g><title>&lt;machine::Position as core::default::Default&gt;::default (2 samples, 0.23%)</title><rect x="89.8364%" y="565" width="0.2336%" height="15" fill="rgb(218,9,34)" fg:x="769" fg:w="2"/><text x="90.0864%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::default::Default&gt;::default (2 samples, 0.23%)</title><rect x="89.8364%" y="549" width="0.2336%" height="15" fill="rgb(222,106,8)" fg:x="769" fg:w="2"/><text x="90.0864%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::new (2 samples, 0.23%)</title><rect x="89.8364%" y="533" width="0.2336%" height="15" fill="rgb(211,220,0)" fg:x="769" fg:w="2"/><text x="90.0864%" y="543.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (2 samples, 0.23%)</title><rect x="89.8364%" y="517" width="0.2336%" height="15" fill="rgb(229,52,16)" fg:x="769" fg:w="2"/><text x="90.0864%" y="527.50"></text></g><g><title>alloc::alloc::exchange_malloc (2 samples, 0.23%)</title><rect x="89.8364%" y="501" width="0.2336%" height="15" fill="rgb(212,155,18)" fg:x="769" fg:w="2"/><text x="90.0864%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.23%)</title><rect x="89.8364%" y="485" width="0.2336%" height="15" fill="rgb(242,21,14)" fg:x="769" fg:w="2"/><text x="90.0864%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.23%)</title><rect x="89.8364%" y="469" width="0.2336%" height="15" fill="rgb(222,19,48)" fg:x="769" fg:w="2"/><text x="90.0864%" y="479.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.23%)</title><rect x="89.8364%" y="453" width="0.2336%" height="15" fill="rgb(232,45,27)" fg:x="769" fg:w="2"/><text x="90.0864%" y="463.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.23%)</title><rect x="89.8364%" y="437" width="0.2336%" height="15" fill="rgb(249,103,42)" fg:x="769" fg:w="2"/><text x="90.0864%" y="447.50"></text></g><g><title>tcache_get (1 samples, 0.12%)</title><rect x="89.9533%" y="421" width="0.1168%" height="15" fill="rgb(246,81,33)" fg:x="770" fg:w="1"/><text x="90.2033%" y="431.50"></text></g><g><title>tcache_get_n (1 samples, 0.12%)</title><rect x="89.9533%" y="405" width="0.1168%" height="15" fill="rgb(252,33,42)" fg:x="770" fg:w="1"/><text x="90.2033%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (4 samples, 0.47%)</title><rect x="90.0701%" y="581" width="0.4673%" height="15" fill="rgb(209,212,41)" fg:x="771" fg:w="4"/><text x="90.3201%" y="591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.47%)</title><rect x="90.0701%" y="565" width="0.4673%" height="15" fill="rgb(207,154,6)" fg:x="771" fg:w="4"/><text x="90.3201%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (4 samples, 0.47%)</title><rect x="90.0701%" y="549" width="0.4673%" height="15" fill="rgb(223,64,47)" fg:x="771" fg:w="4"/><text x="90.3201%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.47%)</title><rect x="90.0701%" y="533" width="0.4673%" height="15" fill="rgb(211,161,38)" fg:x="771" fg:w="4"/><text x="90.3201%" y="543.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.12%)</title><rect x="90.4206%" y="517" width="0.1168%" height="15" fill="rgb(219,138,40)" fg:x="774" fg:w="1"/><text x="90.6706%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (1 samples, 0.12%)</title><rect x="90.4206%" y="501" width="0.1168%" height="15" fill="rgb(241,228,46)" fg:x="774" fg:w="1"/><text x="90.6706%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (1 samples, 0.12%)</title><rect x="90.4206%" y="485" width="0.1168%" height="15" fill="rgb(223,209,38)" fg:x="774" fg:w="1"/><text x="90.6706%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (1 samples, 0.12%)</title><rect x="90.4206%" y="469" width="0.1168%" height="15" fill="rgb(236,164,45)" fg:x="774" fg:w="1"/><text x="90.6706%" y="479.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (1 samples, 0.12%)</title><rect x="90.4206%" y="453" width="0.1168%" height="15" fill="rgb(231,15,5)" fg:x="774" fg:w="1"/><text x="90.6706%" y="463.50"></text></g><g><title>__memcmp_avx2_movbe (1 samples, 0.12%)</title><rect x="90.4206%" y="437" width="0.1168%" height="15" fill="rgb(252,35,15)" fg:x="774" fg:w="1"/><text x="90.6706%" y="447.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (5 samples, 0.58%)</title><rect x="90.5374%" y="549" width="0.5841%" height="15" fill="rgb(248,181,18)" fg:x="775" fg:w="5"/><text x="90.7874%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (5 samples, 0.58%)</title><rect x="90.5374%" y="533" width="0.5841%" height="15" fill="rgb(233,39,42)" fg:x="775" fg:w="5"/><text x="90.7874%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.58%)</title><rect x="90.5374%" y="517" width="0.5841%" height="15" fill="rgb(238,110,33)" fg:x="775" fg:w="5"/><text x="90.7874%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.35%)</title><rect x="90.7710%" y="501" width="0.3505%" height="15" fill="rgb(233,195,10)" fg:x="777" fg:w="3"/><text x="91.0210%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (3 samples, 0.35%)</title><rect x="90.7710%" y="485" width="0.3505%" height="15" fill="rgb(254,105,3)" fg:x="777" fg:w="3"/><text x="91.0210%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.35%)</title><rect x="90.7710%" y="469" width="0.3505%" height="15" fill="rgb(221,225,9)" fg:x="777" fg:w="3"/><text x="91.0210%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.35%)</title><rect x="90.7710%" y="453" width="0.3505%" height="15" fill="rgb(224,227,45)" fg:x="777" fg:w="3"/><text x="91.0210%" y="463.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.35%)</title><rect x="90.7710%" y="437" width="0.3505%" height="15" fill="rgb(229,198,43)" fg:x="777" fg:w="3"/><text x="91.0210%" y="447.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.23%)</title><rect x="90.8879%" y="421" width="0.2336%" height="15" fill="rgb(206,209,35)" fg:x="778" fg:w="2"/><text x="91.1379%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (6 samples, 0.70%)</title><rect x="90.5374%" y="581" width="0.7009%" height="15" fill="rgb(245,195,53)" fg:x="775" fg:w="6"/><text x="90.7874%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (6 samples, 0.70%)</title><rect x="90.5374%" y="565" width="0.7009%" height="15" fill="rgb(240,92,26)" fg:x="775" fg:w="6"/><text x="90.7874%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::string::String&gt;&gt; (1 samples, 0.12%)</title><rect x="91.1215%" y="549" width="0.1168%" height="15" fill="rgb(207,40,23)" fg:x="780" fg:w="1"/><text x="91.3715%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="91.1215%" y="533" width="0.1168%" height="15" fill="rgb(223,111,35)" fg:x="780" fg:w="1"/><text x="91.3715%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (1 samples, 0.12%)</title><rect x="91.1215%" y="517" width="0.1168%" height="15" fill="rgb(229,147,28)" fg:x="780" fg:w="1"/><text x="91.3715%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (1 samples, 0.12%)</title><rect x="91.1215%" y="501" width="0.1168%" height="15" fill="rgb(211,29,28)" fg:x="780" fg:w="1"/><text x="91.3715%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Position&gt; (1 samples, 0.12%)</title><rect x="91.2383%" y="581" width="0.1168%" height="15" fill="rgb(228,72,33)" fg:x="781" fg:w="1"/><text x="91.4883%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;alloc::string::String&gt;&gt; (1 samples, 0.12%)</title><rect x="91.2383%" y="565" width="0.1168%" height="15" fill="rgb(205,214,31)" fg:x="781" fg:w="1"/><text x="91.4883%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="91.2383%" y="549" width="0.1168%" height="15" fill="rgb(224,111,15)" fg:x="781" fg:w="1"/><text x="91.4883%" y="559.50"></text></g><g><title>__GI___libc_free (1 samples, 0.12%)</title><rect x="91.2383%" y="533" width="0.1168%" height="15" fill="rgb(253,21,26)" fg:x="781" fg:w="1"/><text x="91.4883%" y="543.50"></text></g><g><title>arena_for_chunk (1 samples, 0.12%)</title><rect x="91.2383%" y="517" width="0.1168%" height="15" fill="rgb(245,139,43)" fg:x="781" fg:w="1"/><text x="91.4883%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="91.4720%" y="565" width="0.1168%" height="15" fill="rgb(252,170,7)" fg:x="783" fg:w="1"/><text x="91.7220%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="91.4720%" y="549" width="0.1168%" height="15" fill="rgb(231,118,14)" fg:x="783" fg:w="1"/><text x="91.7220%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1 samples, 0.12%)</title><rect x="91.4720%" y="533" width="0.1168%" height="15" fill="rgb(238,83,0)" fg:x="783" fg:w="1"/><text x="91.7220%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1 samples, 0.12%)</title><rect x="91.4720%" y="517" width="0.1168%" height="15" fill="rgb(221,39,39)" fg:x="783" fg:w="1"/><text x="91.7220%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (1 samples, 0.12%)</title><rect x="91.4720%" y="501" width="0.1168%" height="15" fill="rgb(222,119,46)" fg:x="783" fg:w="1"/><text x="91.7220%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1 samples, 0.12%)</title><rect x="91.4720%" y="485" width="0.1168%" height="15" fill="rgb(222,165,49)" fg:x="783" fg:w="1"/><text x="91.7220%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.12%)</title><rect x="91.4720%" y="469" width="0.1168%" height="15" fill="rgb(219,113,52)" fg:x="783" fg:w="1"/><text x="91.7220%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.12%)</title><rect x="91.4720%" y="453" width="0.1168%" height="15" fill="rgb(214,7,15)" fg:x="783" fg:w="1"/><text x="91.7220%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.12%)</title><rect x="91.4720%" y="437" width="0.1168%" height="15" fill="rgb(235,32,4)" fg:x="783" fg:w="1"/><text x="91.7220%" y="447.50"></text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.35%)</title><rect x="91.7056%" y="437" width="0.3505%" height="15" fill="rgb(238,90,54)" fg:x="785" fg:w="3"/><text x="91.9556%" y="447.50"></text></g><g><title>graph::Model::get_name_for_id (8 samples, 0.93%)</title><rect x="91.3551%" y="581" width="0.9346%" height="15" fill="rgb(213,208,19)" fg:x="782" fg:w="8"/><text x="91.6051%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (6 samples, 0.70%)</title><rect x="91.5888%" y="565" width="0.7009%" height="15" fill="rgb(233,156,4)" fg:x="784" fg:w="6"/><text x="91.8388%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.70%)</title><rect x="91.5888%" y="549" width="0.7009%" height="15" fill="rgb(207,194,5)" fg:x="784" fg:w="6"/><text x="91.8388%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (5 samples, 0.58%)</title><rect x="91.7056%" y="533" width="0.5841%" height="15" fill="rgb(206,111,30)" fg:x="785" fg:w="5"/><text x="91.9556%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.58%)</title><rect x="91.7056%" y="517" width="0.5841%" height="15" fill="rgb(243,70,54)" fg:x="785" fg:w="5"/><text x="91.9556%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (5 samples, 0.58%)</title><rect x="91.7056%" y="501" width="0.5841%" height="15" fill="rgb(242,28,8)" fg:x="785" fg:w="5"/><text x="91.9556%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.58%)</title><rect x="91.7056%" y="485" width="0.5841%" height="15" fill="rgb(219,106,18)" fg:x="785" fg:w="5"/><text x="91.9556%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (5 samples, 0.58%)</title><rect x="91.7056%" y="469" width="0.5841%" height="15" fill="rgb(244,222,10)" fg:x="785" fg:w="5"/><text x="91.9556%" y="479.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (5 samples, 0.58%)</title><rect x="91.7056%" y="453" width="0.5841%" height="15" fill="rgb(236,179,52)" fg:x="785" fg:w="5"/><text x="91.9556%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (2 samples, 0.23%)</title><rect x="92.0561%" y="437" width="0.2336%" height="15" fill="rgb(213,23,39)" fg:x="788" fg:w="2"/><text x="92.3061%" y="447.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (1 samples, 0.12%)</title><rect x="92.2897%" y="549" width="0.1168%" height="15" fill="rgb(238,48,10)" fg:x="790" fg:w="1"/><text x="92.5397%" y="559.50"></text></g><g><title>core::ptr::write (1 samples, 0.12%)</title><rect x="92.2897%" y="533" width="0.1168%" height="15" fill="rgb(251,196,23)" fg:x="790" fg:w="1"/><text x="92.5397%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.2897%" y="517" width="0.1168%" height="15" fill="rgb(250,152,24)" fg:x="790" fg:w="1"/><text x="92.5397%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.2897%" y="501" width="0.1168%" height="15" fill="rgb(209,150,17)" fg:x="790" fg:w="1"/><text x="92.5397%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.2897%" y="485" width="0.1168%" height="15" fill="rgb(234,202,34)" fg:x="790" fg:w="1"/><text x="92.5397%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.2897%" y="469" width="0.1168%" height="15" fill="rgb(253,148,53)" fg:x="790" fg:w="1"/><text x="92.5397%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.2897%" y="453" width="0.1168%" height="15" fill="rgb(218,129,16)" fg:x="790" fg:w="1"/><text x="92.5397%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.2897%" y="437" width="0.1168%" height="15" fill="rgb(216,85,19)" fg:x="790" fg:w="1"/><text x="92.5397%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.2897%" y="421" width="0.1168%" height="15" fill="rgb(235,228,7)" fg:x="790" fg:w="1"/><text x="92.5397%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.2897%" y="405" width="0.1168%" height="15" fill="rgb(245,175,0)" fg:x="790" fg:w="1"/><text x="92.5397%" y="415.50"></text></g><g><title>machine::Machine::log_step (25 samples, 2.92%)</title><rect x="89.6028%" y="597" width="2.9206%" height="15" fill="rgb(208,168,36)" fg:x="767" fg:w="25"/><text x="89.8528%" y="607.50">ma..</text></g><g><title>machine::Profile::push (2 samples, 0.23%)</title><rect x="92.2897%" y="581" width="0.2336%" height="15" fill="rgb(246,171,24)" fg:x="790" fg:w="2"/><text x="92.5397%" y="591.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (2 samples, 0.23%)</title><rect x="92.2897%" y="565" width="0.2336%" height="15" fill="rgb(215,142,24)" fg:x="790" fg:w="2"/><text x="92.5397%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::grow (1 samples, 0.12%)</title><rect x="92.4065%" y="549" width="0.1168%" height="15" fill="rgb(250,187,7)" fg:x="791" fg:w="1"/><text x="92.6565%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.12%)</title><rect x="92.4065%" y="533" width="0.1168%" height="15" fill="rgb(228,66,33)" fg:x="791" fg:w="1"/><text x="92.6565%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.12%)</title><rect x="92.4065%" y="517" width="0.1168%" height="15" fill="rgb(234,215,21)" fg:x="791" fg:w="1"/><text x="92.6565%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.12%)</title><rect x="92.4065%" y="501" width="0.1168%" height="15" fill="rgb(222,191,20)" fg:x="791" fg:w="1"/><text x="92.6565%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.12%)</title><rect x="92.4065%" y="485" width="0.1168%" height="15" fill="rgb(245,79,54)" fg:x="791" fg:w="1"/><text x="92.6565%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.12%)</title><rect x="92.4065%" y="469" width="0.1168%" height="15" fill="rgb(240,10,37)" fg:x="791" fg:w="1"/><text x="92.6565%" y="479.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.12%)</title><rect x="92.4065%" y="453" width="0.1168%" height="15" fill="rgb(214,192,32)" fg:x="791" fg:w="1"/><text x="92.6565%" y="463.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.12%)</title><rect x="92.4065%" y="437" width="0.1168%" height="15" fill="rgb(209,36,54)" fg:x="791" fg:w="1"/><text x="92.6565%" y="447.50"></text></g><g><title>mremap_chunk (1 samples, 0.12%)</title><rect x="92.4065%" y="421" width="0.1168%" height="15" fill="rgb(220,10,11)" fg:x="791" fg:w="1"/><text x="92.6565%" y="431.50"></text></g><g><title>__GI___mremap (1 samples, 0.12%)</title><rect x="92.4065%" y="405" width="0.1168%" height="15" fill="rgb(221,106,17)" fg:x="791" fg:w="1"/><text x="92.6565%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.4065%" y="389" width="0.1168%" height="15" fill="rgb(251,142,44)" fg:x="791" fg:w="1"/><text x="92.6565%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.4065%" y="373" width="0.1168%" height="15" fill="rgb(238,13,15)" fg:x="791" fg:w="1"/><text x="92.6565%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.4065%" y="357" width="0.1168%" height="15" fill="rgb(208,107,27)" fg:x="791" fg:w="1"/><text x="92.6565%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.4065%" y="341" width="0.1168%" height="15" fill="rgb(205,136,37)" fg:x="791" fg:w="1"/><text x="92.6565%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.4065%" y="325" width="0.1168%" height="15" fill="rgb(250,205,27)" fg:x="791" fg:w="1"/><text x="92.6565%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.4065%" y="309" width="0.1168%" height="15" fill="rgb(210,80,43)" fg:x="791" fg:w="1"/><text x="92.6565%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.4065%" y="293" width="0.1168%" height="15" fill="rgb(247,160,36)" fg:x="791" fg:w="1"/><text x="92.6565%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="92.4065%" y="277" width="0.1168%" height="15" fill="rgb(234,13,49)" fg:x="791" fg:w="1"/><text x="92.6565%" y="287.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.12%)</title><rect x="92.5234%" y="581" width="0.1168%" height="15" fill="rgb(234,122,0)" fg:x="792" fg:w="1"/><text x="92.7734%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.12%)</title><rect x="92.5234%" y="565" width="0.1168%" height="15" fill="rgb(207,146,38)" fg:x="792" fg:w="1"/><text x="92.7734%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.12%)</title><rect x="92.5234%" y="549" width="0.1168%" height="15" fill="rgb(207,177,25)" fg:x="792" fg:w="1"/><text x="92.7734%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.12%)</title><rect x="92.5234%" y="533" width="0.1168%" height="15" fill="rgb(211,178,42)" fg:x="792" fg:w="1"/><text x="92.7734%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.12%)</title><rect x="92.5234%" y="517" width="0.1168%" height="15" fill="rgb(230,69,54)" fg:x="792" fg:w="1"/><text x="92.7734%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.12%)</title><rect x="92.5234%" y="501" width="0.1168%" height="15" fill="rgb(214,135,41)" fg:x="792" fg:w="1"/><text x="92.7734%" y="511.50"></text></g><g><title>__GI___libc_free (1 samples, 0.12%)</title><rect x="92.5234%" y="485" width="0.1168%" height="15" fill="rgb(237,67,25)" fg:x="792" fg:w="1"/><text x="92.7734%" y="495.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.23%)</title><rect x="92.8738%" y="437" width="0.2336%" height="15" fill="rgb(222,189,50)" fg:x="795" fg:w="2"/><text x="93.1238%" y="447.50"></text></g><g><title>machine::Machine::step (629 samples, 73.48%)</title><rect x="19.7430%" y="613" width="73.4813%" height="15" fill="rgb(245,148,34)" fg:x="169" fg:w="629"/><text x="19.9930%" y="623.50">machine::Machine::step</text></g><g><title>machine::Machine::run_action (6 samples, 0.70%)</title><rect x="92.5234%" y="597" width="0.7009%" height="15" fill="rgb(222,29,6)" fg:x="792" fg:w="6"/><text x="92.7734%" y="607.50"></text></g><g><title>machine::Machine::get_actions (5 samples, 0.58%)</title><rect x="92.6402%" y="581" width="0.5841%" height="15" fill="rgb(221,189,43)" fg:x="793" fg:w="5"/><text x="92.8902%" y="591.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (3 samples, 0.35%)</title><rect x="92.8738%" y="565" width="0.3505%" height="15" fill="rgb(207,36,27)" fg:x="795" fg:w="3"/><text x="93.1238%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.35%)</title><rect x="92.8738%" y="549" width="0.3505%" height="15" fill="rgb(217,90,24)" fg:x="795" fg:w="3"/><text x="93.1238%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.35%)</title><rect x="92.8738%" y="533" width="0.3505%" height="15" fill="rgb(224,66,35)" fg:x="795" fg:w="3"/><text x="93.1238%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.35%)</title><rect x="92.8738%" y="517" width="0.3505%" height="15" fill="rgb(221,13,50)" fg:x="795" fg:w="3"/><text x="93.1238%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (3 samples, 0.35%)</title><rect x="92.8738%" y="501" width="0.3505%" height="15" fill="rgb(236,68,49)" fg:x="795" fg:w="3"/><text x="93.1238%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.35%)</title><rect x="92.8738%" y="485" width="0.3505%" height="15" fill="rgb(229,146,28)" fg:x="795" fg:w="3"/><text x="93.1238%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.35%)</title><rect x="92.8738%" y="469" width="0.3505%" height="15" fill="rgb(225,31,38)" fg:x="795" fg:w="3"/><text x="93.1238%" y="479.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.35%)</title><rect x="92.8738%" y="453" width="0.3505%" height="15" fill="rgb(250,208,3)" fg:x="795" fg:w="3"/><text x="93.1238%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (1 samples, 0.12%)</title><rect x="93.1075%" y="437" width="0.1168%" height="15" fill="rgb(246,54,23)" fg:x="797" fg:w="1"/><text x="93.3575%" y="447.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (1 samples, 0.12%)</title><rect x="93.2243%" y="517" width="0.1168%" height="15" fill="rgb(243,76,11)" fg:x="798" fg:w="1"/><text x="93.4743%" y="527.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (1 samples, 0.12%)</title><rect x="93.2243%" y="501" width="0.1168%" height="15" fill="rgb(245,21,50)" fg:x="798" fg:w="1"/><text x="93.4743%" y="511.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.12%)</title><rect x="93.2243%" y="485" width="0.1168%" height="15" fill="rgb(228,9,43)" fg:x="798" fg:w="1"/><text x="93.4743%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (1 samples, 0.12%)</title><rect x="93.2243%" y="469" width="0.1168%" height="15" fill="rgb(208,100,47)" fg:x="798" fg:w="1"/><text x="93.4743%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (1 samples, 0.12%)</title><rect x="93.2243%" y="453" width="0.1168%" height="15" fill="rgb(232,26,8)" fg:x="798" fg:w="1"/><text x="93.4743%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (1 samples, 0.12%)</title><rect x="93.2243%" y="437" width="0.1168%" height="15" fill="rgb(216,166,38)" fg:x="798" fg:w="1"/><text x="93.4743%" y="447.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (2 samples, 0.23%)</title><rect x="93.3411%" y="453" width="0.2336%" height="15" fill="rgb(251,202,51)" fg:x="799" fg:w="2"/><text x="93.5911%" y="463.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (2 samples, 0.23%)</title><rect x="93.3411%" y="437" width="0.2336%" height="15" fill="rgb(254,216,34)" fg:x="799" fg:w="2"/><text x="93.5911%" y="447.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.23%)</title><rect x="93.3411%" y="421" width="0.2336%" height="15" fill="rgb(251,32,27)" fg:x="799" fg:w="2"/><text x="93.5911%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.23%)</title><rect x="93.3411%" y="405" width="0.2336%" height="15" fill="rgb(208,127,28)" fg:x="799" fg:w="2"/><text x="93.5911%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.23%)</title><rect x="93.3411%" y="389" width="0.2336%" height="15" fill="rgb(224,137,22)" fg:x="799" fg:w="2"/><text x="93.5911%" y="399.50"></text></g><g><title>serde_json::ser::Formatter::end_string (2 samples, 0.23%)</title><rect x="93.3411%" y="373" width="0.2336%" height="15" fill="rgb(254,70,32)" fg:x="799" fg:w="2"/><text x="93.5911%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.23%)</title><rect x="93.3411%" y="357" width="0.2336%" height="15" fill="rgb(229,75,37)" fg:x="799" fg:w="2"/><text x="93.5911%" y="367.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.23%)</title><rect x="93.3411%" y="341" width="0.2336%" height="15" fill="rgb(252,64,23)" fg:x="799" fg:w="2"/><text x="93.5911%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.23%)</title><rect x="93.3411%" y="325" width="0.2336%" height="15" fill="rgb(232,162,48)" fg:x="799" fg:w="2"/><text x="93.5911%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.23%)</title><rect x="93.3411%" y="309" width="0.2336%" height="15" fill="rgb(246,160,12)" fg:x="799" fg:w="2"/><text x="93.5911%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.23%)</title><rect x="93.3411%" y="293" width="0.2336%" height="15" fill="rgb(247,166,0)" fg:x="799" fg:w="2"/><text x="93.5911%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (2 samples, 0.23%)</title><rect x="93.3411%" y="277" width="0.2336%" height="15" fill="rgb(249,219,21)" fg:x="799" fg:w="2"/><text x="93.5911%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (2 samples, 0.23%)</title><rect x="93.3411%" y="261" width="0.2336%" height="15" fill="rgb(205,209,3)" fg:x="799" fg:w="2"/><text x="93.5911%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.23%)</title><rect x="93.3411%" y="245" width="0.2336%" height="15" fill="rgb(243,44,1)" fg:x="799" fg:w="2"/><text x="93.5911%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.23%)</title><rect x="93.3411%" y="229" width="0.2336%" height="15" fill="rgb(206,159,16)" fg:x="799" fg:w="2"/><text x="93.5911%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.23%)</title><rect x="93.3411%" y="213" width="0.2336%" height="15" fill="rgb(244,77,30)" fg:x="799" fg:w="2"/><text x="93.5911%" y="223.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.23%)</title><rect x="93.3411%" y="197" width="0.2336%" height="15" fill="rgb(218,69,12)" fg:x="799" fg:w="2"/><text x="93.5911%" y="207.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.23%)</title><rect x="93.3411%" y="181" width="0.2336%" height="15" fill="rgb(212,87,7)" fg:x="799" fg:w="2"/><text x="93.5911%" y="191.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.23%)</title><rect x="93.3411%" y="165" width="0.2336%" height="15" fill="rgb(245,114,25)" fg:x="799" fg:w="2"/><text x="93.5911%" y="175.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.23%)</title><rect x="93.3411%" y="149" width="0.2336%" height="15" fill="rgb(210,61,42)" fg:x="799" fg:w="2"/><text x="93.5911%" y="159.50"></text></g><g><title>_int_realloc (2 samples, 0.23%)</title><rect x="93.3411%" y="133" width="0.2336%" height="15" fill="rgb(211,52,33)" fg:x="799" fg:w="2"/><text x="93.5911%" y="143.50"></text></g><g><title>_int_malloc (2 samples, 0.23%)</title><rect x="93.3411%" y="117" width="0.2336%" height="15" fill="rgb(234,58,33)" fg:x="799" fg:w="2"/><text x="93.5911%" y="127.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::sync::Arc&lt;T&gt;&gt;::serialize (2 samples, 0.23%)</title><rect x="93.5748%" y="437" width="0.2336%" height="15" fill="rgb(220,115,36)" fg:x="801" fg:w="2"/><text x="93.8248%" y="447.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (2 samples, 0.23%)</title><rect x="93.5748%" y="421" width="0.2336%" height="15" fill="rgb(243,153,54)" fg:x="801" fg:w="2"/><text x="93.8248%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.23%)</title><rect x="93.5748%" y="405" width="0.2336%" height="15" fill="rgb(251,47,18)" fg:x="801" fg:w="2"/><text x="93.8248%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.23%)</title><rect x="93.5748%" y="389" width="0.2336%" height="15" fill="rgb(242,102,42)" fg:x="801" fg:w="2"/><text x="93.8248%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (2 samples, 0.23%)</title><rect x="93.5748%" y="373" width="0.2336%" height="15" fill="rgb(234,31,38)" fg:x="801" fg:w="2"/><text x="93.8248%" y="383.50"></text></g><g><title>serde_json::ser::to_string (10 samples, 1.17%)</title><rect x="93.2243%" y="613" width="1.1682%" height="15" fill="rgb(221,117,51)" fg:x="798" fg:w="10"/><text x="93.4743%" y="623.50"></text></g><g><title>serde_json::ser::to_vec (10 samples, 1.17%)</title><rect x="93.2243%" y="597" width="1.1682%" height="15" fill="rgb(212,20,18)" fg:x="798" fg:w="10"/><text x="93.4743%" y="607.50"></text></g><g><title>serde_json::ser::to_writer (10 samples, 1.17%)</title><rect x="93.2243%" y="581" width="1.1682%" height="15" fill="rgb(245,133,36)" fg:x="798" fg:w="10"/><text x="93.4743%" y="591.50"></text></g><g><title>machine::_::&lt;impl serde::ser::Serialize for machine::Step&gt;::serialize (10 samples, 1.17%)</title><rect x="93.2243%" y="565" width="1.1682%" height="15" fill="rgb(212,6,19)" fg:x="798" fg:w="10"/><text x="93.4743%" y="575.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (10 samples, 1.17%)</title><rect x="93.2243%" y="549" width="1.1682%" height="15" fill="rgb(218,1,36)" fg:x="798" fg:w="10"/><text x="93.4743%" y="559.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (10 samples, 1.17%)</title><rect x="93.2243%" y="533" width="1.1682%" height="15" fill="rgb(246,84,54)" fg:x="798" fg:w="10"/><text x="93.4743%" y="543.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (9 samples, 1.05%)</title><rect x="93.3411%" y="517" width="1.0514%" height="15" fill="rgb(242,110,6)" fg:x="799" fg:w="9"/><text x="93.5911%" y="527.50"></text></g><g><title>machine::_::&lt;impl serde::ser::Serialize for machine::Position&gt;::serialize (9 samples, 1.05%)</title><rect x="93.3411%" y="501" width="1.0514%" height="15" fill="rgb(214,47,5)" fg:x="799" fg:w="9"/><text x="93.5911%" y="511.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (9 samples, 1.05%)</title><rect x="93.3411%" y="485" width="1.0514%" height="15" fill="rgb(218,159,25)" fg:x="799" fg:w="9"/><text x="93.5911%" y="495.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (9 samples, 1.05%)</title><rect x="93.3411%" y="469" width="1.0514%" height="15" fill="rgb(215,211,28)" fg:x="799" fg:w="9"/><text x="93.5911%" y="479.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (7 samples, 0.82%)</title><rect x="93.5748%" y="453" width="0.8178%" height="15" fill="rgb(238,59,32)" fg:x="801" fg:w="7"/><text x="93.8248%" y="463.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (5 samples, 0.58%)</title><rect x="93.8084%" y="437" width="0.5841%" height="15" fill="rgb(226,82,3)" fg:x="803" fg:w="5"/><text x="94.0584%" y="447.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (5 samples, 0.58%)</title><rect x="93.8084%" y="421" width="0.5841%" height="15" fill="rgb(240,164,32)" fg:x="803" fg:w="5"/><text x="94.0584%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (5 samples, 0.58%)</title><rect x="93.8084%" y="405" width="0.5841%" height="15" fill="rgb(232,46,7)" fg:x="803" fg:w="5"/><text x="94.0584%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (5 samples, 0.58%)</title><rect x="93.8084%" y="389" width="0.5841%" height="15" fill="rgb(229,129,53)" fg:x="803" fg:w="5"/><text x="94.0584%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 0.58%)</title><rect x="93.8084%" y="373" width="0.5841%" height="15" fill="rgb(234,188,29)" fg:x="803" fg:w="5"/><text x="94.0584%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (5 samples, 0.58%)</title><rect x="93.8084%" y="357" width="0.5841%" height="15" fill="rgb(246,141,4)" fg:x="803" fg:w="5"/><text x="94.0584%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (5 samples, 0.58%)</title><rect x="93.8084%" y="341" width="0.5841%" height="15" fill="rgb(229,23,39)" fg:x="803" fg:w="5"/><text x="94.0584%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (5 samples, 0.58%)</title><rect x="93.8084%" y="325" width="0.5841%" height="15" fill="rgb(206,12,3)" fg:x="803" fg:w="5"/><text x="94.0584%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.58%)</title><rect x="93.8084%" y="309" width="0.5841%" height="15" fill="rgb(252,226,20)" fg:x="803" fg:w="5"/><text x="94.0584%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (5 samples, 0.58%)</title><rect x="93.8084%" y="293" width="0.5841%" height="15" fill="rgb(216,123,35)" fg:x="803" fg:w="5"/><text x="94.0584%" y="303.50"></text></g><g><title>alloc::raw_vec::finish_grow (5 samples, 0.58%)</title><rect x="93.8084%" y="277" width="0.5841%" height="15" fill="rgb(212,68,40)" fg:x="803" fg:w="5"/><text x="94.0584%" y="287.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (5 samples, 0.58%)</title><rect x="93.8084%" y="261" width="0.5841%" height="15" fill="rgb(254,125,32)" fg:x="803" fg:w="5"/><text x="94.0584%" y="271.50"></text></g><g><title>alloc::alloc::Global::grow_impl (5 samples, 0.58%)</title><rect x="93.8084%" y="245" width="0.5841%" height="15" fill="rgb(253,97,22)" fg:x="803" fg:w="5"/><text x="94.0584%" y="255.50"></text></g><g><title>alloc::alloc::realloc (5 samples, 0.58%)</title><rect x="93.8084%" y="229" width="0.5841%" height="15" fill="rgb(241,101,14)" fg:x="803" fg:w="5"/><text x="94.0584%" y="239.50"></text></g><g><title>__GI___libc_realloc (5 samples, 0.58%)</title><rect x="93.8084%" y="213" width="0.5841%" height="15" fill="rgb(238,103,29)" fg:x="803" fg:w="5"/><text x="94.0584%" y="223.50"></text></g><g><title>_int_realloc (5 samples, 0.58%)</title><rect x="93.8084%" y="197" width="0.5841%" height="15" fill="rgb(233,195,47)" fg:x="803" fg:w="5"/><text x="94.0584%" y="207.50"></text></g><g><title>_int_malloc (5 samples, 0.58%)</title><rect x="93.8084%" y="181" width="0.5841%" height="15" fill="rgb(246,218,30)" fg:x="803" fg:w="5"/><text x="94.0584%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.12%)</title><rect x="94.3925%" y="453" width="0.1168%" height="15" fill="rgb(219,145,47)" fg:x="808" fg:w="1"/><text x="94.6425%" y="463.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (29 samples, 3.39%)</title><rect x="94.5093%" y="453" width="3.3879%" height="15" fill="rgb(243,12,26)" fg:x="809" fg:w="29"/><text x="94.7593%" y="463.50">std..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (29 samples, 3.39%)</title><rect x="94.5093%" y="437" width="3.3879%" height="15" fill="rgb(214,87,16)" fg:x="809" fg:w="29"/><text x="94.7593%" y="447.50">&lt;st..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (29 samples, 3.39%)</title><rect x="94.5093%" y="421" width="3.3879%" height="15" fill="rgb(208,99,42)" fg:x="809" fg:w="29"/><text x="94.7593%" y="431.50">&lt;st..</text></g><g><title>std::sys::unix::fd::FileDesc::write (29 samples, 3.39%)</title><rect x="94.5093%" y="405" width="3.3879%" height="15" fill="rgb(253,99,2)" fg:x="809" fg:w="29"/><text x="94.7593%" y="415.50">std..</text></g><g><title>__GI___libc_write (29 samples, 3.39%)</title><rect x="94.5093%" y="389" width="3.3879%" height="15" fill="rgb(220,168,23)" fg:x="809" fg:w="29"/><text x="94.7593%" y="399.50">__G..</text></g><g><title>[unknown] (29 samples, 3.39%)</title><rect x="94.5093%" y="373" width="3.3879%" height="15" fill="rgb(242,38,24)" fg:x="809" fg:w="29"/><text x="94.7593%" y="383.50">[un..</text></g><g><title>[unknown] (29 samples, 3.39%)</title><rect x="94.5093%" y="357" width="3.3879%" height="15" fill="rgb(225,182,9)" fg:x="809" fg:w="29"/><text x="94.7593%" y="367.50">[un..</text></g><g><title>[unknown] (29 samples, 3.39%)</title><rect x="94.5093%" y="341" width="3.3879%" height="15" fill="rgb(243,178,37)" fg:x="809" fg:w="29"/><text x="94.7593%" y="351.50">[un..</text></g><g><title>[unknown] (29 samples, 3.39%)</title><rect x="94.5093%" y="325" width="3.3879%" height="15" fill="rgb(232,139,19)" fg:x="809" fg:w="29"/><text x="94.7593%" y="335.50">[un..</text></g><g><title>[unknown] (29 samples, 3.39%)</title><rect x="94.5093%" y="309" width="3.3879%" height="15" fill="rgb(225,201,24)" fg:x="809" fg:w="29"/><text x="94.7593%" y="319.50">[un..</text></g><g><title>[unknown] (29 samples, 3.39%)</title><rect x="94.5093%" y="293" width="3.3879%" height="15" fill="rgb(221,47,46)" fg:x="809" fg:w="29"/><text x="94.7593%" y="303.50">[un..</text></g><g><title>[unknown] (29 samples, 3.39%)</title><rect x="94.5093%" y="277" width="3.3879%" height="15" fill="rgb(249,23,13)" fg:x="809" fg:w="29"/><text x="94.7593%" y="287.50">[un..</text></g><g><title>[unknown] (28 samples, 3.27%)</title><rect x="94.6262%" y="261" width="3.2710%" height="15" fill="rgb(219,9,5)" fg:x="810" fg:w="28"/><text x="94.8762%" y="271.50">[un..</text></g><g><title>[unknown] (28 samples, 3.27%)</title><rect x="94.6262%" y="245" width="3.2710%" height="15" fill="rgb(254,171,16)" fg:x="810" fg:w="28"/><text x="94.8762%" y="255.50">[un..</text></g><g><title>[unknown] (26 samples, 3.04%)</title><rect x="94.8598%" y="229" width="3.0374%" height="15" fill="rgb(230,171,20)" fg:x="812" fg:w="26"/><text x="95.1098%" y="239.50">[un..</text></g><g><title>[unknown] (21 samples, 2.45%)</title><rect x="95.4439%" y="213" width="2.4533%" height="15" fill="rgb(210,71,41)" fg:x="817" fg:w="21"/><text x="95.6939%" y="223.50">[u..</text></g><g><title>[unknown] (21 samples, 2.45%)</title><rect x="95.4439%" y="197" width="2.4533%" height="15" fill="rgb(206,173,20)" fg:x="817" fg:w="21"/><text x="95.6939%" y="207.50">[u..</text></g><g><title>[unknown] (21 samples, 2.45%)</title><rect x="95.4439%" y="181" width="2.4533%" height="15" fill="rgb(233,88,34)" fg:x="817" fg:w="21"/><text x="95.6939%" y="191.50">[u..</text></g><g><title>[unknown] (19 samples, 2.22%)</title><rect x="95.6776%" y="165" width="2.2196%" height="15" fill="rgb(223,209,46)" fg:x="819" fg:w="19"/><text x="95.9276%" y="175.50">[..</text></g><g><title>[unknown] (9 samples, 1.05%)</title><rect x="96.8458%" y="149" width="1.0514%" height="15" fill="rgb(250,43,18)" fg:x="829" fg:w="9"/><text x="97.0958%" y="159.50"></text></g><g><title>[unknown] (9 samples, 1.05%)</title><rect x="96.8458%" y="133" width="1.0514%" height="15" fill="rgb(208,13,10)" fg:x="829" fg:w="9"/><text x="97.0958%" y="143.50"></text></g><g><title>[unknown] (3 samples, 0.35%)</title><rect x="97.5467%" y="117" width="0.3505%" height="15" fill="rgb(212,200,36)" fg:x="835" fg:w="3"/><text x="97.7967%" y="127.50"></text></g><g><title>[unknown] (2 samples, 0.23%)</title><rect x="97.6636%" y="101" width="0.2336%" height="15" fill="rgb(225,90,30)" fg:x="836" fg:w="2"/><text x="97.9136%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.12%)</title><rect x="97.7804%" y="85" width="0.1168%" height="15" fill="rgb(236,182,39)" fg:x="837" fg:w="1"/><text x="98.0304%" y="95.50"></text></g><g><title>std::io::Write::write_fmt (31 samples, 3.62%)</title><rect x="94.3925%" y="549" width="3.6215%" height="15" fill="rgb(212,144,35)" fg:x="808" fg:w="31"/><text x="94.6425%" y="559.50">std:..</text></g><g><title>core::fmt::write (31 samples, 3.62%)</title><rect x="94.3925%" y="533" width="3.6215%" height="15" fill="rgb(228,63,44)" fg:x="808" fg:w="31"/><text x="94.6425%" y="543.50">core..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (31 samples, 3.62%)</title><rect x="94.3925%" y="517" width="3.6215%" height="15" fill="rgb(228,109,6)" fg:x="808" fg:w="31"/><text x="94.6425%" y="527.50">&lt;std..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (31 samples, 3.62%)</title><rect x="94.3925%" y="501" width="3.6215%" height="15" fill="rgb(238,117,24)" fg:x="808" fg:w="31"/><text x="94.6425%" y="511.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (31 samples, 3.62%)</title><rect x="94.3925%" y="485" width="3.6215%" height="15" fill="rgb(242,26,26)" fg:x="808" fg:w="31"/><text x="94.6425%" y="495.50">&lt;std..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (31 samples, 3.62%)</title><rect x="94.3925%" y="469" width="3.6215%" height="15" fill="rgb(221,92,48)" fg:x="808" fg:w="31"/><text x="94.6425%" y="479.50">&lt;std..</text></g><g><title>std::sys_common::memchr::memrchr (1 samples, 0.12%)</title><rect x="97.8972%" y="453" width="0.1168%" height="15" fill="rgb(209,209,32)" fg:x="838" fg:w="1"/><text x="98.1472%" y="463.50"></text></g><g><title>std::sys::unix::memchr::memrchr (1 samples, 0.12%)</title><rect x="97.8972%" y="437" width="0.1168%" height="15" fill="rgb(221,70,22)" fg:x="838" fg:w="1"/><text x="98.1472%" y="447.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (1 samples, 0.12%)</title><rect x="97.8972%" y="421" width="0.1168%" height="15" fill="rgb(248,145,5)" fg:x="838" fg:w="1"/><text x="98.1472%" y="431.50"></text></g><g><title>__memrchr_avx2 (1 samples, 0.12%)</title><rect x="97.8972%" y="405" width="0.1168%" height="15" fill="rgb(226,116,26)" fg:x="838" fg:w="1"/><text x="98.1472%" y="415.50"></text></g><g><title>_start (753 samples, 87.97%)</title><rect x="10.1636%" y="901" width="87.9673%" height="15" fill="rgb(244,5,17)" fg:x="87" fg:w="753"/><text x="10.4136%" y="911.50">_start</text></g><g><title>__libc_start_main_impl (753 samples, 87.97%)</title><rect x="10.1636%" y="885" width="87.9673%" height="15" fill="rgb(252,159,33)" fg:x="87" fg:w="753"/><text x="10.4136%" y="895.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (753 samples, 87.97%)</title><rect x="10.1636%" y="869" width="87.9673%" height="15" fill="rgb(206,71,0)" fg:x="87" fg:w="753"/><text x="10.4136%" y="879.50">__libc_start_call_main</text></g><g><title>main (753 samples, 87.97%)</title><rect x="10.1636%" y="853" width="87.9673%" height="15" fill="rgb(233,118,54)" fg:x="87" fg:w="753"/><text x="10.4136%" y="863.50">main</text></g><g><title>std::rt::lang_start_internal (753 samples, 87.97%)</title><rect x="10.1636%" y="837" width="87.9673%" height="15" fill="rgb(234,83,48)" fg:x="87" fg:w="753"/><text x="10.4136%" y="847.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (753 samples, 87.97%)</title><rect x="10.1636%" y="821" width="87.9673%" height="15" fill="rgb(228,3,54)" fg:x="87" fg:w="753"/><text x="10.4136%" y="831.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (753 samples, 87.97%)</title><rect x="10.1636%" y="805" width="87.9673%" height="15" fill="rgb(226,155,13)" fg:x="87" fg:w="753"/><text x="10.4136%" y="815.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (753 samples, 87.97%)</title><rect x="10.1636%" y="789" width="87.9673%" height="15" fill="rgb(241,28,37)" fg:x="87" fg:w="753"/><text x="10.4136%" y="799.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (753 samples, 87.97%)</title><rect x="10.1636%" y="773" width="87.9673%" height="15" fill="rgb(233,93,10)" fg:x="87" fg:w="753"/><text x="10.4136%" y="783.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (753 samples, 87.97%)</title><rect x="10.1636%" y="757" width="87.9673%" height="15" fill="rgb(225,113,19)" fg:x="87" fg:w="753"/><text x="10.4136%" y="767.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (753 samples, 87.97%)</title><rect x="10.1636%" y="741" width="87.9673%" height="15" fill="rgb(241,2,18)" fg:x="87" fg:w="753"/><text x="10.4136%" y="751.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (753 samples, 87.97%)</title><rect x="10.1636%" y="725" width="87.9673%" height="15" fill="rgb(228,207,21)" fg:x="87" fg:w="753"/><text x="10.4136%" y="735.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (753 samples, 87.97%)</title><rect x="10.1636%" y="709" width="87.9673%" height="15" fill="rgb(213,211,35)" fg:x="87" fg:w="753"/><text x="10.4136%" y="719.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (753 samples, 87.97%)</title><rect x="10.1636%" y="693" width="87.9673%" height="15" fill="rgb(209,83,10)" fg:x="87" fg:w="753"/><text x="10.4136%" y="703.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (753 samples, 87.97%)</title><rect x="10.1636%" y="677" width="87.9673%" height="15" fill="rgb(209,164,1)" fg:x="87" fg:w="753"/><text x="10.4136%" y="687.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (753 samples, 87.97%)</title><rect x="10.1636%" y="661" width="87.9673%" height="15" fill="rgb(213,184,43)" fg:x="87" fg:w="753"/><text x="10.4136%" y="671.50">core::ops::function::FnOnce::call_once</text></g><g><title>graphwalker::main (753 samples, 87.97%)</title><rect x="10.1636%" y="645" width="87.9673%" height="15" fill="rgb(231,61,34)" fg:x="87" fg:w="753"/><text x="10.4136%" y="655.50">graphwalker::main</text></g><g><title>machine::Machine::walk (752 samples, 87.85%)</title><rect x="10.2804%" y="629" width="87.8505%" height="15" fill="rgb(235,75,3)" fg:x="88" fg:w="752"/><text x="10.5304%" y="639.50">machine::Machine::walk</text></g><g><title>std::io::stdio::_print (32 samples, 3.74%)</title><rect x="94.3925%" y="613" width="3.7383%" height="15" fill="rgb(220,106,47)" fg:x="808" fg:w="32"/><text x="94.6425%" y="623.50">std:..</text></g><g><title>std::io::stdio::print_to (32 samples, 3.74%)</title><rect x="94.3925%" y="597" width="3.7383%" height="15" fill="rgb(210,196,33)" fg:x="808" fg:w="32"/><text x="94.6425%" y="607.50">std:..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (32 samples, 3.74%)</title><rect x="94.3925%" y="581" width="3.7383%" height="15" fill="rgb(229,154,42)" fg:x="808" fg:w="32"/><text x="94.6425%" y="591.50">&lt;std..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (32 samples, 3.74%)</title><rect x="94.3925%" y="565" width="3.7383%" height="15" fill="rgb(228,114,26)" fg:x="808" fg:w="32"/><text x="94.6425%" y="575.50">&lt;&amp;st..</text></g><g><title>std::io::stdio::Stdout::lock (1 samples, 0.12%)</title><rect x="98.0140%" y="549" width="0.1168%" height="15" fill="rgb(208,144,1)" fg:x="839" fg:w="1"/><text x="98.2640%" y="559.50"></text></g><g><title>std::sync::remutex::ReentrantMutex&lt;T&gt;::lock (1 samples, 0.12%)</title><rect x="98.0140%" y="533" width="0.1168%" height="15" fill="rgb(239,112,37)" fg:x="839" fg:w="1"/><text x="98.2640%" y="543.50"></text></g><g><title>graphwalker (851 samples, 99.42%)</title><rect x="0.0000%" y="917" width="99.4159%" height="15" fill="rgb(210,96,50)" fg:x="0" fg:w="851"/><text x="0.2500%" y="927.50">graphwalker</text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (11 samples, 1.29%)</title><rect x="98.1308%" y="901" width="1.2850%" height="15" fill="rgb(222,178,2)" fg:x="840" fg:w="11"/><text x="98.3808%" y="911.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (2 samples, 0.23%)</title><rect x="99.1822%" y="885" width="0.2336%" height="15" fill="rgb(226,74,18)" fg:x="849" fg:w="2"/><text x="99.4322%" y="895.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (2 samples, 0.23%)</title><rect x="99.1822%" y="869" width="0.2336%" height="15" fill="rgb(225,67,54)" fg:x="849" fg:w="2"/><text x="99.4322%" y="879.50"></text></g><g><title>alloc::collections::btree::mem::replace (2 samples, 0.23%)</title><rect x="99.1822%" y="853" width="0.2336%" height="15" fill="rgb(251,92,32)" fg:x="849" fg:w="2"/><text x="99.4322%" y="863.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (2 samples, 0.23%)</title><rect x="99.1822%" y="837" width="0.2336%" height="15" fill="rgb(228,149,22)" fg:x="849" fg:w="2"/><text x="99.4322%" y="847.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (2 samples, 0.23%)</title><rect x="99.1822%" y="821" width="0.2336%" height="15" fill="rgb(243,54,13)" fg:x="849" fg:w="2"/><text x="99.4322%" y="831.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (2 samples, 0.23%)</title><rect x="99.1822%" y="805" width="0.2336%" height="15" fill="rgb(243,180,28)" fg:x="849" fg:w="2"/><text x="99.4322%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.23%)</title><rect x="99.1822%" y="789" width="0.2336%" height="15" fill="rgb(208,167,24)" fg:x="849" fg:w="2"/><text x="99.4322%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.23%)</title><rect x="99.1822%" y="773" width="0.2336%" height="15" fill="rgb(245,73,45)" fg:x="849" fg:w="2"/><text x="99.4322%" y="783.50"></text></g><g><title>all (856 samples, 100%)</title><rect x="0.0000%" y="933" width="100.0000%" height="15" fill="rgb(237,203,48)" fg:x="0" fg:w="856"/><text x="0.2500%" y="943.50"></text></g><g><title>perf-exec (5 samples, 0.58%)</title><rect x="99.4159%" y="917" width="0.5841%" height="15" fill="rgb(211,197,16)" fg:x="851" fg:w="5"/><text x="99.6659%" y="927.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="901" width="0.5841%" height="15" fill="rgb(243,99,51)" fg:x="851" fg:w="5"/><text x="99.6659%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="885" width="0.5841%" height="15" fill="rgb(215,123,29)" fg:x="851" fg:w="5"/><text x="99.6659%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="869" width="0.5841%" height="15" fill="rgb(239,186,37)" fg:x="851" fg:w="5"/><text x="99.6659%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="853" width="0.5841%" height="15" fill="rgb(252,136,39)" fg:x="851" fg:w="5"/><text x="99.6659%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="837" width="0.5841%" height="15" fill="rgb(223,213,32)" fg:x="851" fg:w="5"/><text x="99.6659%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="821" width="0.5841%" height="15" fill="rgb(233,115,5)" fg:x="851" fg:w="5"/><text x="99.6659%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="805" width="0.5841%" height="15" fill="rgb(207,226,44)" fg:x="851" fg:w="5"/><text x="99.6659%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="789" width="0.5841%" height="15" fill="rgb(208,126,0)" fg:x="851" fg:w="5"/><text x="99.6659%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="773" width="0.5841%" height="15" fill="rgb(244,66,21)" fg:x="851" fg:w="5"/><text x="99.6659%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="757" width="0.5841%" height="15" fill="rgb(222,97,12)" fg:x="851" fg:w="5"/><text x="99.6659%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.58%)</title><rect x="99.4159%" y="741" width="0.5841%" height="15" fill="rgb(219,213,19)" fg:x="851" fg:w="5"/><text x="99.6659%" y="751.50"></text></g><g><title>[unknown] (4 samples, 0.47%)</title><rect x="99.5327%" y="725" width="0.4673%" height="15" fill="rgb(252,169,30)" fg:x="852" fg:w="4"/><text x="99.7827%" y="735.50"></text></g><g><title>[unknown] (4 samples, 0.47%)</title><rect x="99.5327%" y="709" width="0.4673%" height="15" fill="rgb(206,32,51)" fg:x="852" fg:w="4"/><text x="99.7827%" y="719.50"></text></g><g><title>[unknown] (4 samples, 0.47%)</title><rect x="99.5327%" y="693" width="0.4673%" height="15" fill="rgb(250,172,42)" fg:x="852" fg:w="4"/><text x="99.7827%" y="703.50"></text></g><g><title>[unknown] (4 samples, 0.47%)</title><rect x="99.5327%" y="677" width="0.4673%" height="15" fill="rgb(209,34,43)" fg:x="852" fg:w="4"/><text x="99.7827%" y="687.50"></text></g></svg></svg>