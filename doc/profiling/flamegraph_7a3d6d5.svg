<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1222" onload="init(evt)" viewBox="0 0 1200 1222" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1222" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1205.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1205.00"> </text><svg id="frames" x="10" width="1180" total_samples="11129"><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (2 samples, 0.02%)</title><rect x="0.0719%" y="1125" width="0.0180%" height="15" fill="rgb(227,0,7)" fg:x="8" fg:w="2"/><text x="0.3219%" y="1135.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="0.0719%" y="1109" width="0.0180%" height="15" fill="rgb(217,0,24)" fg:x="8" fg:w="2"/><text x="0.3219%" y="1119.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (12 samples, 0.11%)</title><rect x="0.0000%" y="1141" width="0.1078%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="12"/><text x="0.2500%" y="1151.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (2 samples, 0.02%)</title><rect x="0.0899%" y="1125" width="0.0180%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="2"/><text x="0.3399%" y="1135.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (2 samples, 0.02%)</title><rect x="0.0899%" y="1109" width="0.0180%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="2"/><text x="0.3399%" y="1119.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (2 samples, 0.02%)</title><rect x="0.0899%" y="1093" width="0.0180%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="2"/><text x="0.3399%" y="1103.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.02%)</title><rect x="0.0899%" y="1077" width="0.0180%" height="15" fill="rgb(207,160,47)" fg:x="10" fg:w="2"/><text x="0.3399%" y="1087.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.02%)</title><rect x="0.0899%" y="1061" width="0.0180%" height="15" fill="rgb(228,23,34)" fg:x="10" fg:w="2"/><text x="0.3399%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="0.0899%" y="1045" width="0.0180%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="2"/><text x="0.3399%" y="1055.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="0.0899%" y="1029" width="0.0180%" height="15" fill="rgb(220,122,19)" fg:x="10" fg:w="2"/><text x="0.3399%" y="1039.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="0.0899%" y="1013" width="0.0180%" height="15" fill="rgb(250,228,42)" fg:x="10" fg:w="2"/><text x="0.3399%" y="1023.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="0.1078%" y="1141" width="0.0180%" height="15" fill="rgb(240,193,28)" fg:x="12" fg:w="2"/><text x="0.3578%" y="1151.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="0.1078%" y="1125" width="0.0180%" height="15" fill="rgb(216,20,37)" fg:x="12" fg:w="2"/><text x="0.3578%" y="1135.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="0.1078%" y="1109" width="0.0180%" height="15" fill="rgb(206,188,39)" fg:x="12" fg:w="2"/><text x="0.3578%" y="1119.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="0.1078%" y="1093" width="0.0180%" height="15" fill="rgb(217,207,13)" fg:x="12" fg:w="2"/><text x="0.3578%" y="1103.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="0.1078%" y="1077" width="0.0180%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="2"/><text x="0.3578%" y="1087.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (8 samples, 0.07%)</title><rect x="0.1348%" y="1125" width="0.0719%" height="15" fill="rgb(225,20,46)" fg:x="15" fg:w="8"/><text x="0.3848%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,graph::Edge&gt;&gt; (14 samples, 0.13%)</title><rect x="0.2067%" y="1093" width="0.1258%" height="15" fill="rgb(210,31,41)" fg:x="23" fg:w="14"/><text x="0.4567%" y="1103.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.13%)</title><rect x="0.2067%" y="1077" width="0.1258%" height="15" fill="rgb(221,200,47)" fg:x="23" fg:w="14"/><text x="0.4567%" y="1087.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (12 samples, 0.11%)</title><rect x="0.2246%" y="1061" width="0.1078%" height="15" fill="rgb(226,26,5)" fg:x="25" fg:w="12"/><text x="0.4746%" y="1071.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (12 samples, 0.11%)</title><rect x="0.2246%" y="1045" width="0.1078%" height="15" fill="rgb(249,33,26)" fg:x="25" fg:w="12"/><text x="0.4746%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.04%)</title><rect x="0.2875%" y="1029" width="0.0449%" height="15" fill="rgb(235,183,28)" fg:x="32" fg:w="5"/><text x="0.5375%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="0.2875%" y="1013" width="0.0449%" height="15" fill="rgb(221,5,38)" fg:x="32" fg:w="5"/><text x="0.5375%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="0.2875%" y="997" width="0.0449%" height="15" fill="rgb(247,18,42)" fg:x="32" fg:w="5"/><text x="0.5375%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="0.2875%" y="981" width="0.0449%" height="15" fill="rgb(241,131,45)" fg:x="32" fg:w="5"/><text x="0.5375%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="0.2875%" y="965" width="0.0449%" height="15" fill="rgb(249,31,29)" fg:x="32" fg:w="5"/><text x="0.5375%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="0.2875%" y="949" width="0.0449%" height="15" fill="rgb(225,111,53)" fg:x="32" fg:w="5"/><text x="0.5375%" y="959.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (30 samples, 0.27%)</title><rect x="0.2067%" y="1125" width="0.2696%" height="15" fill="rgb(238,160,17)" fg:x="23" fg:w="30"/><text x="0.4567%" y="1135.50"></text></g><g><title>core::mem::drop (30 samples, 0.27%)</title><rect x="0.2067%" y="1109" width="0.2696%" height="15" fill="rgb(214,148,48)" fg:x="23" fg:w="30"/><text x="0.4567%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,graph::Vertex&gt;&gt; (16 samples, 0.14%)</title><rect x="0.3325%" y="1093" width="0.1438%" height="15" fill="rgb(232,36,49)" fg:x="37" fg:w="16"/><text x="0.5825%" y="1103.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (16 samples, 0.14%)</title><rect x="0.3325%" y="1077" width="0.1438%" height="15" fill="rgb(209,103,24)" fg:x="37" fg:w="16"/><text x="0.5825%" y="1087.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (12 samples, 0.11%)</title><rect x="0.3684%" y="1061" width="0.1078%" height="15" fill="rgb(229,88,8)" fg:x="41" fg:w="12"/><text x="0.6184%" y="1071.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (12 samples, 0.11%)</title><rect x="0.3684%" y="1045" width="0.1078%" height="15" fill="rgb(213,181,19)" fg:x="41" fg:w="12"/><text x="0.6184%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 0.05%)</title><rect x="0.4223%" y="1029" width="0.0539%" height="15" fill="rgb(254,191,54)" fg:x="47" fg:w="6"/><text x="0.6723%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.05%)</title><rect x="0.4223%" y="1013" width="0.0539%" height="15" fill="rgb(241,83,37)" fg:x="47" fg:w="6"/><text x="0.6723%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.05%)</title><rect x="0.4223%" y="997" width="0.0539%" height="15" fill="rgb(233,36,39)" fg:x="47" fg:w="6"/><text x="0.6723%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.05%)</title><rect x="0.4223%" y="981" width="0.0539%" height="15" fill="rgb(226,3,54)" fg:x="47" fg:w="6"/><text x="0.6723%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 0.05%)</title><rect x="0.4223%" y="965" width="0.0539%" height="15" fill="rgb(245,192,40)" fg:x="47" fg:w="6"/><text x="0.6723%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 0.05%)</title><rect x="0.4223%" y="949" width="0.0539%" height="15" fill="rgb(238,167,29)" fg:x="47" fg:w="6"/><text x="0.6723%" y="959.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (53 samples, 0.48%)</title><rect x="0.9525%" y="1045" width="0.4762%" height="15" fill="rgb(232,182,51)" fg:x="106" fg:w="53"/><text x="1.2025%" y="1055.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (53 samples, 0.48%)</title><rect x="0.9525%" y="1029" width="0.4762%" height="15" fill="rgb(231,60,39)" fg:x="106" fg:w="53"/><text x="1.2025%" y="1039.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (53 samples, 0.48%)</title><rect x="0.9525%" y="1013" width="0.4762%" height="15" fill="rgb(208,69,12)" fg:x="106" fg:w="53"/><text x="1.2025%" y="1023.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (53 samples, 0.48%)</title><rect x="0.9525%" y="997" width="0.4762%" height="15" fill="rgb(235,93,37)" fg:x="106" fg:w="53"/><text x="1.2025%" y="1007.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (53 samples, 0.48%)</title><rect x="0.9525%" y="981" width="0.4762%" height="15" fill="rgb(213,116,39)" fg:x="106" fg:w="53"/><text x="1.2025%" y="991.50"></text></g><g><title>alloc::alloc::alloc (53 samples, 0.48%)</title><rect x="0.9525%" y="965" width="0.4762%" height="15" fill="rgb(222,207,29)" fg:x="106" fg:w="53"/><text x="1.2025%" y="975.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (216 samples, 1.94%)</title><rect x="0.4852%" y="1125" width="1.9409%" height="15" fill="rgb(206,96,30)" fg:x="54" fg:w="216"/><text x="0.7352%" y="1135.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (164 samples, 1.47%)</title><rect x="0.9525%" y="1109" width="1.4736%" height="15" fill="rgb(218,138,4)" fg:x="106" fg:w="164"/><text x="1.2025%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (164 samples, 1.47%)</title><rect x="0.9525%" y="1093" width="1.4736%" height="15" fill="rgb(250,191,14)" fg:x="106" fg:w="164"/><text x="1.2025%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (164 samples, 1.47%)</title><rect x="0.9525%" y="1077" width="1.4736%" height="15" fill="rgb(239,60,40)" fg:x="106" fg:w="164"/><text x="1.2025%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (164 samples, 1.47%)</title><rect x="0.9525%" y="1061" width="1.4736%" height="15" fill="rgb(206,27,48)" fg:x="106" fg:w="164"/><text x="1.2025%" y="1071.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (111 samples, 1.00%)</title><rect x="1.4287%" y="1045" width="0.9974%" height="15" fill="rgb(225,35,8)" fg:x="159" fg:w="111"/><text x="1.6787%" y="1055.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (111 samples, 1.00%)</title><rect x="1.4287%" y="1029" width="0.9974%" height="15" fill="rgb(250,213,24)" fg:x="159" fg:w="111"/><text x="1.6787%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="2.4261%" y="1125" width="0.0988%" height="15" fill="rgb(247,123,22)" fg:x="270" fg:w="11"/><text x="2.6761%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (11 samples, 0.10%)</title><rect x="2.4261%" y="1109" width="0.0988%" height="15" fill="rgb(231,138,38)" fg:x="270" fg:w="11"/><text x="2.6761%" y="1119.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (61 samples, 0.55%)</title><rect x="2.5249%" y="1125" width="0.5481%" height="15" fill="rgb(231,145,46)" fg:x="281" fg:w="61"/><text x="2.7749%" y="1135.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="3.0461%" y="1109" width="0.0270%" height="15" fill="rgb(251,118,11)" fg:x="339" fg:w="3"/><text x="3.2961%" y="1119.50"></text></g><g><title>&lt;graph::Vertex as core::clone::Clone&gt;::clone (19 samples, 0.17%)</title><rect x="3.0731%" y="1125" width="0.1707%" height="15" fill="rgb(217,147,25)" fg:x="342" fg:w="19"/><text x="3.3231%" y="1135.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="3.1988%" y="1109" width="0.0449%" height="15" fill="rgb(247,81,37)" fg:x="356" fg:w="5"/><text x="3.4488%" y="1119.50"></text></g><g><title>__GI___libc_free (63 samples, 0.57%)</title><rect x="3.2438%" y="1125" width="0.5661%" height="15" fill="rgb(209,12,38)" fg:x="361" fg:w="63"/><text x="3.4938%" y="1135.50"></text></g><g><title>__GI___libc_malloc (172 samples, 1.55%)</title><rect x="3.8099%" y="1125" width="1.5455%" height="15" fill="rgb(227,1,9)" fg:x="424" fg:w="172"/><text x="4.0599%" y="1135.50"></text></g><g><title>__memcpy_avx_unaligned_erms (46 samples, 0.41%)</title><rect x="5.3554%" y="1125" width="0.4133%" height="15" fill="rgb(248,47,43)" fg:x="596" fg:w="46"/><text x="5.6054%" y="1135.50"></text></g><g><title>_int_free (77 samples, 0.69%)</title><rect x="5.7687%" y="1125" width="0.6919%" height="15" fill="rgb(221,10,30)" fg:x="642" fg:w="77"/><text x="6.0187%" y="1135.50"></text></g><g><title>_int_malloc (41 samples, 0.37%)</title><rect x="6.4606%" y="1125" width="0.3684%" height="15" fill="rgb(210,229,1)" fg:x="719" fg:w="41"/><text x="6.7106%" y="1135.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (40 samples, 0.36%)</title><rect x="6.8290%" y="1125" width="0.3594%" height="15" fill="rgb(222,148,37)" fg:x="760" fg:w="40"/><text x="7.0790%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph::Edge&gt; (11 samples, 0.10%)</title><rect x="7.1884%" y="1125" width="0.0988%" height="15" fill="rgb(234,67,33)" fg:x="800" fg:w="11"/><text x="7.4384%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (11 samples, 0.10%)</title><rect x="7.1884%" y="1109" width="0.0988%" height="15" fill="rgb(247,98,35)" fg:x="800" fg:w="11"/><text x="7.4384%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (11 samples, 0.10%)</title><rect x="7.1884%" y="1093" width="0.0988%" height="15" fill="rgb(247,138,52)" fg:x="800" fg:w="11"/><text x="7.4384%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (11 samples, 0.10%)</title><rect x="7.1884%" y="1077" width="0.0988%" height="15" fill="rgb(213,79,30)" fg:x="800" fg:w="11"/><text x="7.4384%" y="1087.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (11 samples, 0.10%)</title><rect x="7.1884%" y="1061" width="0.0988%" height="15" fill="rgb(246,177,23)" fg:x="800" fg:w="11"/><text x="7.4384%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (11 samples, 0.10%)</title><rect x="7.1884%" y="1045" width="0.0988%" height="15" fill="rgb(230,62,27)" fg:x="800" fg:w="11"/><text x="7.4384%" y="1055.50"></text></g><g><title>alloc::alloc::dealloc (11 samples, 0.10%)</title><rect x="7.1884%" y="1029" width="0.0988%" height="15" fill="rgb(216,154,8)" fg:x="800" fg:w="11"/><text x="7.4384%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph::Vertex&gt; (6 samples, 0.05%)</title><rect x="7.2873%" y="1125" width="0.0539%" height="15" fill="rgb(244,35,45)" fg:x="811" fg:w="6"/><text x="7.5373%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Context&gt; (8 samples, 0.07%)</title><rect x="7.3412%" y="1125" width="0.0719%" height="15" fill="rgb(251,115,12)" fg:x="817" fg:w="8"/><text x="7.5912%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,u32&gt;&gt; (8 samples, 0.07%)</title><rect x="7.3412%" y="1109" width="0.0719%" height="15" fill="rgb(240,54,50)" fg:x="817" fg:w="8"/><text x="7.5912%" y="1119.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="7.3412%" y="1093" width="0.0719%" height="15" fill="rgb(233,84,52)" fg:x="817" fg:w="8"/><text x="7.5912%" y="1103.50"></text></g><g><title>core::mem::drop (8 samples, 0.07%)</title><rect x="7.3412%" y="1077" width="0.0719%" height="15" fill="rgb(207,117,47)" fg:x="817" fg:w="8"/><text x="7.5912%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,u32&gt;&gt; (8 samples, 0.07%)</title><rect x="7.3412%" y="1061" width="0.0719%" height="15" fill="rgb(249,43,39)" fg:x="817" fg:w="8"/><text x="7.5912%" y="1071.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="7.3412%" y="1045" width="0.0719%" height="15" fill="rgb(209,38,44)" fg:x="817" fg:w="8"/><text x="7.5912%" y="1055.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (5 samples, 0.04%)</title><rect x="7.3681%" y="1029" width="0.0449%" height="15" fill="rgb(236,212,23)" fg:x="820" fg:w="5"/><text x="7.6181%" y="1039.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (5 samples, 0.04%)</title><rect x="7.3681%" y="1013" width="0.0449%" height="15" fill="rgb(242,79,21)" fg:x="820" fg:w="5"/><text x="7.6181%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.04%)</title><rect x="7.3681%" y="997" width="0.0449%" height="15" fill="rgb(211,96,35)" fg:x="820" fg:w="5"/><text x="7.6181%" y="1007.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="7.3681%" y="981" width="0.0449%" height="15" fill="rgb(253,215,40)" fg:x="820" fg:w="5"/><text x="7.6181%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="7.3681%" y="965" width="0.0449%" height="15" fill="rgb(211,81,21)" fg:x="820" fg:w="5"/><text x="7.6181%" y="975.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="7.3681%" y="949" width="0.0449%" height="15" fill="rgb(208,190,38)" fg:x="820" fg:w="5"/><text x="7.6181%" y="959.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="7.3681%" y="933" width="0.0449%" height="15" fill="rgb(235,213,38)" fg:x="820" fg:w="5"/><text x="7.6181%" y="943.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="7.3681%" y="917" width="0.0449%" height="15" fill="rgb(237,122,38)" fg:x="820" fg:w="5"/><text x="7.6181%" y="927.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.04%)</title><rect x="7.4310%" y="1109" width="0.0359%" height="15" fill="rgb(244,218,35)" fg:x="827" fg:w="4"/><text x="7.6810%" y="1119.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="7.4670%" y="1109" width="0.0180%" height="15" fill="rgb(240,68,47)" fg:x="831" fg:w="2"/><text x="7.7170%" y="1119.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (2 samples, 0.02%)</title><rect x="7.4670%" y="1093" width="0.0180%" height="15" fill="rgb(210,16,53)" fg:x="831" fg:w="2"/><text x="7.7170%" y="1103.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (2 samples, 0.02%)</title><rect x="7.4670%" y="1077" width="0.0180%" height="15" fill="rgb(235,124,12)" fg:x="831" fg:w="2"/><text x="7.7170%" y="1087.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (2 samples, 0.02%)</title><rect x="7.4670%" y="1061" width="0.0180%" height="15" fill="rgb(224,169,11)" fg:x="831" fg:w="2"/><text x="7.7170%" y="1071.50"></text></g><g><title>graph::Model::out_edges (8 samples, 0.07%)</title><rect x="7.4310%" y="1125" width="0.0719%" height="15" fill="rgb(250,166,2)" fg:x="827" fg:w="8"/><text x="7.6810%" y="1135.50"></text></g><g><title>[[heap]] (822 samples, 7.39%)</title><rect x="0.1348%" y="1141" width="7.3861%" height="15" fill="rgb(242,216,29)" fg:x="15" fg:w="822"/><text x="0.3848%" y="1151.50">[[heap]]</text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="7.5029%" y="1125" width="0.0180%" height="15" fill="rgb(230,116,27)" fg:x="835" fg:w="2"/><text x="7.7529%" y="1135.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.08%)</title><rect x="7.5299%" y="1125" width="0.0809%" height="15" fill="rgb(228,99,48)" fg:x="838" fg:w="9"/><text x="7.7799%" y="1135.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (16 samples, 0.14%)</title><rect x="7.6107%" y="1125" width="0.1438%" height="15" fill="rgb(253,11,6)" fg:x="847" fg:w="16"/><text x="7.8607%" y="1135.50"></text></g><g><title>[graphwalker] (3 samples, 0.03%)</title><rect x="7.7545%" y="1125" width="0.0270%" height="15" fill="rgb(247,143,39)" fg:x="863" fg:w="3"/><text x="8.0045%" y="1135.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="7.7545%" y="1109" width="0.0270%" height="15" fill="rgb(236,97,10)" fg:x="863" fg:w="3"/><text x="8.0045%" y="1119.50"></text></g><g><title>__GI___libc_free (111 samples, 1.00%)</title><rect x="7.7815%" y="1125" width="0.9974%" height="15" fill="rgb(233,208,19)" fg:x="866" fg:w="111"/><text x="8.0315%" y="1135.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.06%)</title><rect x="8.7879%" y="1125" width="0.0629%" height="15" fill="rgb(216,164,2)" fg:x="978" fg:w="7"/><text x="9.0379%" y="1135.50"></text></g><g><title>_int_free (23 samples, 0.21%)</title><rect x="8.8508%" y="1125" width="0.2067%" height="15" fill="rgb(220,129,5)" fg:x="985" fg:w="23"/><text x="9.1008%" y="1135.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (15 samples, 0.13%)</title><rect x="9.0574%" y="1125" width="0.1348%" height="15" fill="rgb(242,17,10)" fg:x="1008" fg:w="15"/><text x="9.3074%" y="1135.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (4 samples, 0.04%)</title><rect x="9.1563%" y="1109" width="0.0359%" height="15" fill="rgb(242,107,0)" fg:x="1019" fg:w="4"/><text x="9.4063%" y="1119.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (4 samples, 0.04%)</title><rect x="9.1563%" y="1093" width="0.0359%" height="15" fill="rgb(251,28,31)" fg:x="1019" fg:w="4"/><text x="9.4063%" y="1103.50"></text></g><g><title>alloc::collections::btree::mem::replace (4 samples, 0.04%)</title><rect x="9.1563%" y="1077" width="0.0359%" height="15" fill="rgb(233,223,10)" fg:x="1019" fg:w="4"/><text x="9.4063%" y="1087.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (4 samples, 0.04%)</title><rect x="9.1563%" y="1061" width="0.0359%" height="15" fill="rgb(215,21,27)" fg:x="1019" fg:w="4"/><text x="9.4063%" y="1071.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (4 samples, 0.04%)</title><rect x="9.1563%" y="1045" width="0.0359%" height="15" fill="rgb(232,23,21)" fg:x="1019" fg:w="4"/><text x="9.4063%" y="1055.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (4 samples, 0.04%)</title><rect x="9.1563%" y="1029" width="0.0359%" height="15" fill="rgb(244,5,23)" fg:x="1019" fg:w="4"/><text x="9.4063%" y="1039.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.04%)</title><rect x="9.1563%" y="1013" width="0.0359%" height="15" fill="rgb(226,81,46)" fg:x="1019" fg:w="4"/><text x="9.4063%" y="1023.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.04%)</title><rect x="9.1563%" y="997" width="0.0359%" height="15" fill="rgb(247,70,30)" fg:x="1019" fg:w="4"/><text x="9.4063%" y="1007.50"></text></g><g><title>machine::Machine::step (3 samples, 0.03%)</title><rect x="9.1922%" y="1125" width="0.0270%" height="15" fill="rgb(212,68,19)" fg:x="1023" fg:w="3"/><text x="9.4422%" y="1135.50"></text></g><g><title>[[stack]] (190 samples, 1.71%)</title><rect x="7.5209%" y="1141" width="1.7073%" height="15" fill="rgb(240,187,13)" fg:x="837" fg:w="190"/><text x="7.7709%" y="1151.50"></text></g><g><title>_int_free (5 samples, 0.04%)</title><rect x="9.2281%" y="1125" width="0.0449%" height="15" fill="rgb(223,113,26)" fg:x="1027" fg:w="5"/><text x="9.4781%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (13 samples, 0.12%)</title><rect x="9.3090%" y="1109" width="0.1168%" height="15" fill="rgb(206,192,2)" fg:x="1036" fg:w="13"/><text x="9.5590%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (13 samples, 0.12%)</title><rect x="9.3090%" y="1093" width="0.1168%" height="15" fill="rgb(241,108,4)" fg:x="1036" fg:w="13"/><text x="9.5590%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (13 samples, 0.12%)</title><rect x="9.3090%" y="1077" width="0.1168%" height="15" fill="rgb(247,173,49)" fg:x="1036" fg:w="13"/><text x="9.5590%" y="1087.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (13 samples, 0.12%)</title><rect x="9.3090%" y="1061" width="0.1168%" height="15" fill="rgb(224,114,35)" fg:x="1036" fg:w="13"/><text x="9.5590%" y="1071.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (13 samples, 0.12%)</title><rect x="9.3090%" y="1045" width="0.1168%" height="15" fill="rgb(245,159,27)" fg:x="1036" fg:w="13"/><text x="9.5590%" y="1055.50"></text></g><g><title>alloc::alloc::dealloc (13 samples, 0.12%)</title><rect x="9.3090%" y="1029" width="0.1168%" height="15" fill="rgb(245,172,44)" fg:x="1036" fg:w="13"/><text x="9.5590%" y="1039.50"></text></g><g><title>[graphwalker] (24 samples, 0.22%)</title><rect x="9.2281%" y="1141" width="0.2157%" height="15" fill="rgb(236,23,11)" fg:x="1027" fg:w="24"/><text x="9.4781%" y="1151.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph::Edge&gt; (19 samples, 0.17%)</title><rect x="9.2731%" y="1125" width="0.1707%" height="15" fill="rgb(205,117,38)" fg:x="1032" fg:w="19"/><text x="9.5231%" y="1135.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (2 samples, 0.02%)</title><rect x="9.4258%" y="1109" width="0.0180%" height="15" fill="rgb(237,72,25)" fg:x="1049" fg:w="2"/><text x="9.6758%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="9.4258%" y="1093" width="0.0180%" height="15" fill="rgb(244,70,9)" fg:x="1049" fg:w="2"/><text x="9.6758%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="9.4258%" y="1077" width="0.0180%" height="15" fill="rgb(217,125,39)" fg:x="1049" fg:w="2"/><text x="9.6758%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="9.4258%" y="1061" width="0.0180%" height="15" fill="rgb(235,36,10)" fg:x="1049" fg:w="2"/><text x="9.6758%" y="1071.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="9.4258%" y="1045" width="0.0180%" height="15" fill="rgb(251,123,47)" fg:x="1049" fg:w="2"/><text x="9.6758%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="9.4258%" y="1029" width="0.0180%" height="15" fill="rgb(221,13,13)" fg:x="1049" fg:w="2"/><text x="9.6758%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="9.4258%" y="1013" width="0.0180%" height="15" fill="rgb(238,131,9)" fg:x="1049" fg:w="2"/><text x="9.6758%" y="1023.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (20 samples, 0.18%)</title><rect x="9.7403%" y="1109" width="0.1797%" height="15" fill="rgb(211,50,8)" fg:x="1084" fg:w="20"/><text x="9.9903%" y="1119.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (20 samples, 0.18%)</title><rect x="9.7403%" y="1093" width="0.1797%" height="15" fill="rgb(245,182,24)" fg:x="1084" fg:w="20"/><text x="9.9903%" y="1103.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (2 samples, 0.02%)</title><rect x="9.9200%" y="1109" width="0.0180%" height="15" fill="rgb(242,14,37)" fg:x="1104" fg:w="2"/><text x="10.1700%" y="1119.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (2 samples, 0.02%)</title><rect x="9.9200%" y="1093" width="0.0180%" height="15" fill="rgb(246,228,12)" fg:x="1104" fg:w="2"/><text x="10.1700%" y="1103.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (2 samples, 0.02%)</title><rect x="9.9200%" y="1077" width="0.0180%" height="15" fill="rgb(213,55,15)" fg:x="1104" fg:w="2"/><text x="10.1700%" y="1087.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.02%)</title><rect x="9.9200%" y="1061" width="0.0180%" height="15" fill="rgb(209,9,3)" fg:x="1104" fg:w="2"/><text x="10.1700%" y="1071.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.02%)</title><rect x="9.9200%" y="1045" width="0.0180%" height="15" fill="rgb(230,59,30)" fg:x="1104" fg:w="2"/><text x="10.1700%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="9.9200%" y="1029" width="0.0180%" height="15" fill="rgb(209,121,21)" fg:x="1104" fg:w="2"/><text x="10.1700%" y="1039.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="9.9200%" y="1013" width="0.0180%" height="15" fill="rgb(220,109,13)" fg:x="1104" fg:w="2"/><text x="10.1700%" y="1023.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="9.9200%" y="997" width="0.0180%" height="15" fill="rgb(232,18,1)" fg:x="1104" fg:w="2"/><text x="10.1700%" y="1007.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (56 samples, 0.50%)</title><rect x="9.4438%" y="1125" width="0.5032%" height="15" fill="rgb(215,41,42)" fg:x="1051" fg:w="56"/><text x="9.6938%" y="1135.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.19%)</title><rect x="9.9470%" y="1125" width="0.1887%" height="15" fill="rgb(224,123,36)" fg:x="1107" fg:w="21"/><text x="10.1970%" y="1135.50"></text></g><g><title>core::mem::drop (21 samples, 0.19%)</title><rect x="9.9470%" y="1109" width="0.1887%" height="15" fill="rgb(240,125,3)" fg:x="1107" fg:w="21"/><text x="10.1970%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,graph::Edge&gt;&gt; (21 samples, 0.19%)</title><rect x="9.9470%" y="1093" width="0.1887%" height="15" fill="rgb(205,98,50)" fg:x="1107" fg:w="21"/><text x="10.1970%" y="1103.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (21 samples, 0.19%)</title><rect x="9.9470%" y="1077" width="0.1887%" height="15" fill="rgb(205,185,37)" fg:x="1107" fg:w="21"/><text x="10.1970%" y="1087.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (16 samples, 0.14%)</title><rect x="9.9919%" y="1061" width="0.1438%" height="15" fill="rgb(238,207,15)" fg:x="1112" fg:w="16"/><text x="10.2419%" y="1071.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (16 samples, 0.14%)</title><rect x="9.9919%" y="1045" width="0.1438%" height="15" fill="rgb(213,199,42)" fg:x="1112" fg:w="16"/><text x="10.2419%" y="1055.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (10 samples, 0.09%)</title><rect x="10.0458%" y="1029" width="0.0899%" height="15" fill="rgb(235,201,11)" fg:x="1118" fg:w="10"/><text x="10.2958%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (10 samples, 0.09%)</title><rect x="10.0458%" y="1013" width="0.0899%" height="15" fill="rgb(207,46,11)" fg:x="1118" fg:w="10"/><text x="10.2958%" y="1023.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (10 samples, 0.09%)</title><rect x="10.0458%" y="997" width="0.0899%" height="15" fill="rgb(241,35,35)" fg:x="1118" fg:w="10"/><text x="10.2958%" y="1007.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (10 samples, 0.09%)</title><rect x="10.0458%" y="981" width="0.0899%" height="15" fill="rgb(243,32,47)" fg:x="1118" fg:w="10"/><text x="10.2958%" y="991.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.09%)</title><rect x="10.0458%" y="965" width="0.0899%" height="15" fill="rgb(247,202,23)" fg:x="1118" fg:w="10"/><text x="10.2958%" y="975.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.09%)</title><rect x="10.0458%" y="949" width="0.0899%" height="15" fill="rgb(219,102,11)" fg:x="1118" fg:w="10"/><text x="10.2958%" y="959.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.05%)</title><rect x="10.1357%" y="1125" width="0.0539%" height="15" fill="rgb(243,110,44)" fg:x="1128" fg:w="6"/><text x="10.3857%" y="1135.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (96 samples, 0.86%)</title><rect x="10.1896%" y="1125" width="0.8626%" height="15" fill="rgb(222,74,54)" fg:x="1134" fg:w="96"/><text x="10.4396%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="11.0252%" y="1109" width="0.0270%" height="15" fill="rgb(216,99,12)" fg:x="1227" fg:w="3"/><text x="11.2752%" y="1119.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="11.0252%" y="1093" width="0.0270%" height="15" fill="rgb(226,22,26)" fg:x="1227" fg:w="3"/><text x="11.2752%" y="1103.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="11.0252%" y="1077" width="0.0270%" height="15" fill="rgb(217,163,10)" fg:x="1227" fg:w="3"/><text x="11.2752%" y="1087.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="11.0252%" y="1061" width="0.0270%" height="15" fill="rgb(213,25,53)" fg:x="1227" fg:w="3"/><text x="11.2752%" y="1071.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="11.0342%" y="1045" width="0.0180%" height="15" fill="rgb(252,105,26)" fg:x="1228" fg:w="2"/><text x="11.2842%" y="1055.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="11.0342%" y="1029" width="0.0180%" height="15" fill="rgb(220,39,43)" fg:x="1228" fg:w="2"/><text x="11.2842%" y="1039.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (76 samples, 0.68%)</title><rect x="11.0522%" y="1125" width="0.6829%" height="15" fill="rgb(229,68,48)" fg:x="1230" fg:w="76"/><text x="11.3022%" y="1135.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (5 samples, 0.04%)</title><rect x="11.6902%" y="1109" width="0.0449%" height="15" fill="rgb(252,8,32)" fg:x="1301" fg:w="5"/><text x="11.9402%" y="1119.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="11.7351%" y="1125" width="0.1528%" height="15" fill="rgb(223,20,43)" fg:x="1306" fg:w="17"/><text x="11.9851%" y="1135.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="11.8609%" y="1109" width="0.0270%" height="15" fill="rgb(229,81,49)" fg:x="1320" fg:w="3"/><text x="12.1109%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph::Edge&gt; (6 samples, 0.05%)</title><rect x="11.8968%" y="1109" width="0.0539%" height="15" fill="rgb(236,28,36)" fg:x="1324" fg:w="6"/><text x="12.1468%" y="1119.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.04%)</title><rect x="11.9058%" y="1093" width="0.0449%" height="15" fill="rgb(249,185,26)" fg:x="1325" fg:w="5"/><text x="12.1558%" y="1103.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="11.9058%" y="1077" width="0.0449%" height="15" fill="rgb(249,174,33)" fg:x="1325" fg:w="5"/><text x="12.1558%" y="1087.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="11.9058%" y="1061" width="0.0449%" height="15" fill="rgb(233,201,37)" fg:x="1325" fg:w="5"/><text x="12.1558%" y="1071.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="11.9058%" y="1045" width="0.0449%" height="15" fill="rgb(221,78,26)" fg:x="1325" fg:w="5"/><text x="12.1558%" y="1055.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="11.9058%" y="1029" width="0.0449%" height="15" fill="rgb(250,127,30)" fg:x="1325" fg:w="5"/><text x="12.1558%" y="1039.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="11.9058%" y="1013" width="0.0449%" height="15" fill="rgb(230,49,44)" fg:x="1325" fg:w="5"/><text x="12.1558%" y="1023.50"></text></g><g><title>[graphwalker] (7 samples, 0.06%)</title><rect x="11.8968%" y="1125" width="0.0629%" height="15" fill="rgb(229,67,23)" fg:x="1324" fg:w="7"/><text x="12.1468%" y="1135.50"></text></g><g><title>__GI___libc_free (16 samples, 0.14%)</title><rect x="11.9687%" y="1125" width="0.1438%" height="15" fill="rgb(249,83,47)" fg:x="1332" fg:w="16"/><text x="12.2187%" y="1135.50"></text></g><g><title>__GI___libc_malloc (46 samples, 0.41%)</title><rect x="12.1125%" y="1125" width="0.4133%" height="15" fill="rgb(215,43,3)" fg:x="1348" fg:w="46"/><text x="12.3625%" y="1135.50"></text></g><g><title>__memcmp_avx2_movbe (5 samples, 0.04%)</title><rect x="12.5258%" y="1125" width="0.0449%" height="15" fill="rgb(238,154,13)" fg:x="1394" fg:w="5"/><text x="12.7758%" y="1135.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.07%)</title><rect x="12.5708%" y="1125" width="0.0719%" height="15" fill="rgb(219,56,2)" fg:x="1399" fg:w="8"/><text x="12.8208%" y="1135.50"></text></g><g><title>_int_free (75 samples, 0.67%)</title><rect x="12.6426%" y="1125" width="0.6739%" height="15" fill="rgb(233,0,4)" fg:x="1407" fg:w="75"/><text x="12.8926%" y="1135.50"></text></g><g><title>_int_free_maybe_consolidate (10 samples, 0.09%)</title><rect x="13.3166%" y="1125" width="0.0899%" height="15" fill="rgb(235,30,7)" fg:x="1482" fg:w="10"/><text x="13.5666%" y="1135.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.04%)</title><rect x="13.4064%" y="1125" width="0.0359%" height="15" fill="rgb(250,79,13)" fg:x="1492" fg:w="4"/><text x="13.6564%" y="1135.50"></text></g><g><title>_int_malloc (57 samples, 0.51%)</title><rect x="13.4424%" y="1125" width="0.5122%" height="15" fill="rgb(211,146,34)" fg:x="1496" fg:w="57"/><text x="13.6924%" y="1135.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.02%)</title><rect x="13.9545%" y="1125" width="0.0180%" height="15" fill="rgb(228,22,38)" fg:x="1553" fg:w="2"/><text x="14.2045%" y="1135.50"></text></g><g><title>alloc_perturb (5 samples, 0.04%)</title><rect x="13.9725%" y="1125" width="0.0449%" height="15" fill="rgb(235,168,5)" fg:x="1555" fg:w="5"/><text x="14.2225%" y="1135.50"></text></g><g><title>malloc_consolidate (12 samples, 0.11%)</title><rect x="14.0174%" y="1125" width="0.1078%" height="15" fill="rgb(221,155,16)" fg:x="1560" fg:w="12"/><text x="14.2674%" y="1135.50"></text></g><g><title>[unknown] (560 samples, 5.03%)</title><rect x="9.4438%" y="1141" width="5.0319%" height="15" fill="rgb(215,215,53)" fg:x="1051" fg:w="560"/><text x="9.6938%" y="1151.50">[unkno..</text></g><g><title>unlink_chunk (39 samples, 0.35%)</title><rect x="14.1253%" y="1125" width="0.3504%" height="15" fill="rgb(223,4,10)" fg:x="1572" fg:w="39"/><text x="14.3753%" y="1135.50"></text></g><g><title>__GI___libc_free (9 samples, 0.08%)</title><rect x="14.4757%" y="1141" width="0.0809%" height="15" fill="rgb(234,103,6)" fg:x="1611" fg:w="9"/><text x="14.7257%" y="1151.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="14.5566%" y="1141" width="0.0180%" height="15" fill="rgb(227,97,0)" fg:x="1620" fg:w="2"/><text x="14.8066%" y="1151.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="14.5745%" y="1141" width="0.0180%" height="15" fill="rgb(234,150,53)" fg:x="1622" fg:w="2"/><text x="14.8245%" y="1151.50"></text></g><g><title>io::read (6 samples, 0.05%)</title><rect x="14.5925%" y="869" width="0.0539%" height="15" fill="rgb(228,201,54)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="879.50"></text></g><g><title>io::json_read::read (6 samples, 0.05%)</title><rect x="14.5925%" y="853" width="0.0539%" height="15" fill="rgb(222,22,37)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="863.50"></text></g><g><title>serde_json::de::from_str (6 samples, 0.05%)</title><rect x="14.5925%" y="837" width="0.0539%" height="15" fill="rgb(237,53,32)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="847.50"></text></g><g><title>serde_json::de::from_trait (6 samples, 0.05%)</title><rect x="14.5925%" y="821" width="0.0539%" height="15" fill="rgb(233,25,53)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="831.50"></text></g><g><title>graph::_::&lt;impl serde::de::Deserialize for graph::Models&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="805" width="0.0539%" height="15" fill="rgb(210,40,34)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="815.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.05%)</title><rect x="14.5925%" y="789" width="0.0539%" height="15" fill="rgb(241,220,44)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="799.50"></text></g><g><title>&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Models&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.05%)</title><rect x="14.5925%" y="773" width="0.0539%" height="15" fill="rgb(235,28,35)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="783.50"></text></g><g><title>serde::de::MapAccess::next_value (6 samples, 0.05%)</title><rect x="14.5925%" y="757" width="0.0539%" height="15" fill="rgb(210,56,17)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="767.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6 samples, 0.05%)</title><rect x="14.5925%" y="741" width="0.0539%" height="15" fill="rgb(224,130,29)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="751.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="725" width="0.0539%" height="15" fill="rgb(235,212,8)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="735.50"></text></g><g><title>&lt;&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Models&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="709" width="0.0539%" height="15" fill="rgb(223,33,50)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="719.50"></text></g><g><title>graph::models_to_hash::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="693" width="0.0539%" height="15" fill="rgb(219,149,13)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="703.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="677" width="0.0539%" height="15" fill="rgb(250,156,29)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="687.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (6 samples, 0.05%)</title><rect x="14.5925%" y="661" width="0.0539%" height="15" fill="rgb(216,193,19)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="671.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (6 samples, 0.05%)</title><rect x="14.5925%" y="645" width="0.0539%" height="15" fill="rgb(216,135,14)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="655.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.05%)</title><rect x="14.5925%" y="629" width="0.0539%" height="15" fill="rgb(241,47,5)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="639.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.05%)</title><rect x="14.5925%" y="613" width="0.0539%" height="15" fill="rgb(233,42,35)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="623.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="597" width="0.0539%" height="15" fill="rgb(231,13,6)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="607.50"></text></g><g><title>graph::_::&lt;impl serde::de::Deserialize for graph::Model&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="581" width="0.0539%" height="15" fill="rgb(207,181,40)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="591.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.05%)</title><rect x="14.5925%" y="565" width="0.0539%" height="15" fill="rgb(254,173,49)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="575.50"></text></g><g><title>&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Model&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.05%)</title><rect x="14.5925%" y="549" width="0.0539%" height="15" fill="rgb(221,1,38)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="559.50"></text></g><g><title>serde::de::MapAccess::next_value (6 samples, 0.05%)</title><rect x="14.5925%" y="533" width="0.0539%" height="15" fill="rgb(206,124,46)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="543.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (6 samples, 0.05%)</title><rect x="14.5925%" y="517" width="0.0539%" height="15" fill="rgb(249,21,11)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="527.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="501" width="0.0539%" height="15" fill="rgb(222,201,40)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="511.50"></text></g><g><title>&lt;&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Model&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map::__DeserializeWith as serde::de::Deserialize&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="485" width="0.0539%" height="15" fill="rgb(235,61,29)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="495.50"></text></g><g><title>graph::edges_to_hash::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="469" width="0.0539%" height="15" fill="rgb(219,207,3)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="453" width="0.0539%" height="15" fill="rgb(222,56,46)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (6 samples, 0.05%)</title><rect x="14.5925%" y="437" width="0.0539%" height="15" fill="rgb(239,76,54)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="447.50"></text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (6 samples, 0.05%)</title><rect x="14.5925%" y="421" width="0.0539%" height="15" fill="rgb(231,124,27)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="431.50"></text></g><g><title>serde::de::SeqAccess::next_element (6 samples, 0.05%)</title><rect x="14.5925%" y="405" width="0.0539%" height="15" fill="rgb(249,195,6)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="415.50"></text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (6 samples, 0.05%)</title><rect x="14.5925%" y="389" width="0.0539%" height="15" fill="rgb(237,174,47)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="399.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="373" width="0.0539%" height="15" fill="rgb(206,201,31)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="383.50"></text></g><g><title>graph::_::&lt;impl serde::de::Deserialize for graph::Edge&gt;::deserialize (6 samples, 0.05%)</title><rect x="14.5925%" y="357" width="0.0539%" height="15" fill="rgb(231,57,52)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="367.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_struct (6 samples, 0.05%)</title><rect x="14.5925%" y="341" width="0.0539%" height="15" fill="rgb(248,177,22)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="351.50"></text></g><g><title>&lt;graph::_::&lt;impl serde::de::Deserialize for graph::Edge&gt;::deserialize::__Visitor as serde::de::Visitor&gt;::visit_map (6 samples, 0.05%)</title><rect x="14.5925%" y="325" width="0.0539%" height="15" fill="rgb(215,211,37)" fg:x="1624" fg:w="6"/><text x="14.8425%" y="335.50"></text></g><g><title>serde::de::MapAccess::next_value (5 samples, 0.04%)</title><rect x="14.6015%" y="309" width="0.0449%" height="15" fill="rgb(241,128,51)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="319.50"></text></g><g><title>&lt;serde_json::de::MapAccess&lt;R&gt; as serde::de::MapAccess&gt;::next_value_seed (5 samples, 0.04%)</title><rect x="14.6015%" y="293" width="0.0449%" height="15" fill="rgb(227,165,31)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="303.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (5 samples, 0.04%)</title><rect x="14.6015%" y="277" width="0.0449%" height="15" fill="rgb(228,167,24)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="287.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for core::option::Option&lt;T&gt;&gt;::deserialize (5 samples, 0.04%)</title><rect x="14.6015%" y="261" width="0.0449%" height="15" fill="rgb(228,143,12)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="271.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_option (5 samples, 0.04%)</title><rect x="14.6015%" y="245" width="0.0449%" height="15" fill="rgb(249,149,8)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="255.50"></text></g><g><title>&lt;serde::de::impls::OptionVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_some (5 samples, 0.04%)</title><rect x="14.6015%" y="229" width="0.0449%" height="15" fill="rgb(243,35,44)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (5 samples, 0.04%)</title><rect x="14.6015%" y="213" width="0.0449%" height="15" fill="rgb(246,89,9)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="197" width="0.0449%" height="15" fill="rgb(233,213,13)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="181" width="0.0449%" height="15" fill="rgb(233,141,41)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="165" width="0.0449%" height="15" fill="rgb(239,167,4)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="175.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="149" width="0.0449%" height="15" fill="rgb(209,217,16)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="159.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="133" width="0.0449%" height="15" fill="rgb(219,88,35)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="143.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="117" width="0.0449%" height="15" fill="rgb(220,193,23)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="127.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="101" width="0.0449%" height="15" fill="rgb(230,90,52)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="111.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="85" width="0.0449%" height="15" fill="rgb(252,106,19)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="95.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="69" width="0.0449%" height="15" fill="rgb(206,74,20)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="79.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="53" width="0.0449%" height="15" fill="rgb(230,138,44)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="63.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="14.6015%" y="37" width="0.0449%" height="15" fill="rgb(235,182,43)" fg:x="1625" fg:w="5"/><text x="14.8515%" y="47.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="14.6554%" y="853" width="0.0180%" height="15" fill="rgb(242,16,51)" fg:x="1631" fg:w="2"/><text x="14.9054%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="14.6554%" y="837" width="0.0180%" height="15" fill="rgb(248,9,4)" fg:x="1631" fg:w="2"/><text x="14.9054%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="14.6554%" y="821" width="0.0180%" height="15" fill="rgb(210,31,22)" fg:x="1631" fg:w="2"/><text x="14.9054%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="14.6554%" y="805" width="0.0180%" height="15" fill="rgb(239,54,39)" fg:x="1631" fg:w="2"/><text x="14.9054%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="14.6554%" y="789" width="0.0180%" height="15" fill="rgb(230,99,41)" fg:x="1631" fg:w="2"/><text x="14.9054%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="14.6554%" y="773" width="0.0180%" height="15" fill="rgb(253,106,12)" fg:x="1631" fg:w="2"/><text x="14.9054%" y="783.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="14.6554%" y="757" width="0.0180%" height="15" fill="rgb(213,46,41)" fg:x="1631" fg:w="2"/><text x="14.9054%" y="767.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="14.6554%" y="741" width="0.0180%" height="15" fill="rgb(215,133,35)" fg:x="1631" fg:w="2"/><text x="14.9054%" y="751.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (26 samples, 0.23%)</title><rect x="14.8621%" y="629" width="0.2336%" height="15" fill="rgb(213,28,5)" fg:x="1654" fg:w="26"/><text x="15.1121%" y="639.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (17 samples, 0.15%)</title><rect x="14.9429%" y="613" width="0.1528%" height="15" fill="rgb(215,77,49)" fg:x="1663" fg:w="17"/><text x="15.1929%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (32 samples, 0.29%)</title><rect x="14.8621%" y="645" width="0.2875%" height="15" fill="rgb(248,100,22)" fg:x="1654" fg:w="32"/><text x="15.1121%" y="655.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (6 samples, 0.05%)</title><rect x="15.0957%" y="629" width="0.0539%" height="15" fill="rgb(208,67,9)" fg:x="1680" fg:w="6"/><text x="15.3457%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.03%)</title><rect x="15.1227%" y="613" width="0.0270%" height="15" fill="rgb(219,133,21)" fg:x="1683" fg:w="3"/><text x="15.3727%" y="623.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend::_{{closure}} (3 samples, 0.03%)</title><rect x="15.1227%" y="597" width="0.0270%" height="15" fill="rgb(246,46,29)" fg:x="1683" fg:w="3"/><text x="15.3727%" y="607.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.02%)</title><rect x="15.2574%" y="613" width="0.0180%" height="15" fill="rgb(246,185,52)" fg:x="1698" fg:w="2"/><text x="15.5074%" y="623.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (2 samples, 0.02%)</title><rect x="15.2574%" y="597" width="0.0180%" height="15" fill="rgb(252,136,11)" fg:x="1698" fg:w="2"/><text x="15.5074%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (2 samples, 0.02%)</title><rect x="15.2574%" y="581" width="0.0180%" height="15" fill="rgb(219,138,53)" fg:x="1698" fg:w="2"/><text x="15.5074%" y="591.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="15.2574%" y="565" width="0.0180%" height="15" fill="rgb(211,51,23)" fg:x="1698" fg:w="2"/><text x="15.5074%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (6 samples, 0.05%)</title><rect x="15.2305%" y="629" width="0.0539%" height="15" fill="rgb(247,221,28)" fg:x="1695" fg:w="6"/><text x="15.4805%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (52 samples, 0.47%)</title><rect x="14.8261%" y="693" width="0.4672%" height="15" fill="rgb(251,222,45)" fg:x="1650" fg:w="52"/><text x="15.0761%" y="703.50"></text></g><g><title>alloc::collections::btree::mem::replace (52 samples, 0.47%)</title><rect x="14.8261%" y="677" width="0.4672%" height="15" fill="rgb(217,162,53)" fg:x="1650" fg:w="52"/><text x="15.0761%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (52 samples, 0.47%)</title><rect x="14.8261%" y="661" width="0.4672%" height="15" fill="rgb(229,93,14)" fg:x="1650" fg:w="52"/><text x="15.0761%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (16 samples, 0.14%)</title><rect x="15.1496%" y="645" width="0.1438%" height="15" fill="rgb(209,67,49)" fg:x="1686" fg:w="16"/><text x="15.3996%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (80 samples, 0.72%)</title><rect x="14.6824%" y="725" width="0.7188%" height="15" fill="rgb(213,87,29)" fg:x="1634" fg:w="80"/><text x="14.9324%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (71 samples, 0.64%)</title><rect x="14.7632%" y="709" width="0.6380%" height="15" fill="rgb(205,151,52)" fg:x="1643" fg:w="71"/><text x="15.0132%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (12 samples, 0.11%)</title><rect x="15.2934%" y="693" width="0.1078%" height="15" fill="rgb(253,215,39)" fg:x="1702" fg:w="12"/><text x="15.5434%" y="703.50"></text></g><g><title>machine::Machine::is_all_fullfilled (99 samples, 0.89%)</title><rect x="14.6824%" y="853" width="0.8896%" height="15" fill="rgb(221,220,41)" fg:x="1634" fg:w="99"/><text x="14.9324%" y="863.50"></text></g><g><title>machine::Context::is_fullfilled (99 samples, 0.89%)</title><rect x="14.6824%" y="837" width="0.8896%" height="15" fill="rgb(218,133,21)" fg:x="1634" fg:w="99"/><text x="14.9324%" y="847.50"></text></g><g><title>machine::Context::get_fullfilment (99 samples, 0.89%)</title><rect x="14.6824%" y="821" width="0.8896%" height="15" fill="rgb(221,193,43)" fg:x="1634" fg:w="99"/><text x="14.9324%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (99 samples, 0.89%)</title><rect x="14.6824%" y="805" width="0.8896%" height="15" fill="rgb(240,128,52)" fg:x="1634" fg:w="99"/><text x="14.9324%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (99 samples, 0.89%)</title><rect x="14.6824%" y="789" width="0.8896%" height="15" fill="rgb(253,114,12)" fg:x="1634" fg:w="99"/><text x="14.9324%" y="799.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (99 samples, 0.89%)</title><rect x="14.6824%" y="773" width="0.8896%" height="15" fill="rgb(215,223,47)" fg:x="1634" fg:w="99"/><text x="14.9324%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (99 samples, 0.89%)</title><rect x="14.6824%" y="757" width="0.8896%" height="15" fill="rgb(248,225,23)" fg:x="1634" fg:w="99"/><text x="14.9324%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (99 samples, 0.89%)</title><rect x="14.6824%" y="741" width="0.8896%" height="15" fill="rgb(250,108,0)" fg:x="1634" fg:w="99"/><text x="14.9324%" y="751.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (19 samples, 0.17%)</title><rect x="15.4012%" y="725" width="0.1707%" height="15" fill="rgb(228,208,7)" fg:x="1714" fg:w="19"/><text x="15.6512%" y="735.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (19 samples, 0.17%)</title><rect x="15.4012%" y="709" width="0.1707%" height="15" fill="rgb(244,45,10)" fg:x="1714" fg:w="19"/><text x="15.6512%" y="719.50"></text></g><g><title>alloc_perturb (3 samples, 0.03%)</title><rect x="17.1534%" y="549" width="0.0270%" height="15" fill="rgb(207,125,25)" fg:x="1909" fg:w="3"/><text x="17.4034%" y="559.50"></text></g><g><title>checked_request2size (4 samples, 0.04%)</title><rect x="17.1803%" y="549" width="0.0359%" height="15" fill="rgb(210,195,18)" fg:x="1912" fg:w="4"/><text x="17.4303%" y="559.50"></text></g><g><title>tcache_put (22 samples, 0.20%)</title><rect x="17.2253%" y="549" width="0.1977%" height="15" fill="rgb(249,80,12)" fg:x="1917" fg:w="22"/><text x="17.4753%" y="559.50"></text></g><g><title>_int_malloc (154 samples, 1.38%)</title><rect x="16.0931%" y="565" width="1.3838%" height="15" fill="rgb(221,65,9)" fg:x="1791" fg:w="154"/><text x="16.3431%" y="575.50"></text></g><g><title>unlink_chunk (6 samples, 0.05%)</title><rect x="17.4229%" y="549" width="0.0539%" height="15" fill="rgb(235,49,36)" fg:x="1939" fg:w="6"/><text x="17.6729%" y="559.50"></text></g><g><title>checked_request2size (9 samples, 0.08%)</title><rect x="17.4858%" y="565" width="0.0809%" height="15" fill="rgb(225,32,20)" fg:x="1946" fg:w="9"/><text x="17.7358%" y="575.50"></text></g><g><title>__GI___libc_malloc (206 samples, 1.85%)</title><rect x="15.8505%" y="581" width="1.8510%" height="15" fill="rgb(215,141,46)" fg:x="1764" fg:w="206"/><text x="16.1005%" y="591.50">_..</text></g><g><title>tcache_get (15 samples, 0.13%)</title><rect x="17.5667%" y="565" width="0.1348%" height="15" fill="rgb(250,160,47)" fg:x="1955" fg:w="15"/><text x="17.8167%" y="575.50"></text></g><g><title>tcache_get_n (15 samples, 0.13%)</title><rect x="17.5667%" y="549" width="0.1348%" height="15" fill="rgb(216,222,40)" fg:x="1955" fg:w="15"/><text x="17.8167%" y="559.50"></text></g><g><title>__rdl_alloc (13 samples, 0.12%)</title><rect x="17.7015%" y="581" width="0.1168%" height="15" fill="rgb(234,217,39)" fg:x="1970" fg:w="13"/><text x="17.9515%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (13 samples, 0.12%)</title><rect x="17.7015%" y="565" width="0.1168%" height="15" fill="rgb(207,178,40)" fg:x="1970" fg:w="13"/><text x="17.9515%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (235 samples, 2.11%)</title><rect x="15.7247%" y="677" width="2.1116%" height="15" fill="rgb(221,136,13)" fg:x="1750" fg:w="235"/><text x="15.9747%" y="687.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (235 samples, 2.11%)</title><rect x="15.7247%" y="661" width="2.1116%" height="15" fill="rgb(249,199,10)" fg:x="1750" fg:w="235"/><text x="15.9747%" y="671.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (235 samples, 2.11%)</title><rect x="15.7247%" y="645" width="2.1116%" height="15" fill="rgb(249,222,13)" fg:x="1750" fg:w="235"/><text x="15.9747%" y="655.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (227 samples, 2.04%)</title><rect x="15.7966%" y="629" width="2.0397%" height="15" fill="rgb(244,185,38)" fg:x="1758" fg:w="227"/><text x="16.0466%" y="639.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (227 samples, 2.04%)</title><rect x="15.7966%" y="613" width="2.0397%" height="15" fill="rgb(236,202,9)" fg:x="1758" fg:w="227"/><text x="16.0466%" y="623.50">a..</text></g><g><title>alloc::alloc::alloc (227 samples, 2.04%)</title><rect x="15.7966%" y="597" width="2.0397%" height="15" fill="rgb(250,229,37)" fg:x="1758" fg:w="227"/><text x="16.0466%" y="607.50">a..</text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="17.8183%" y="581" width="0.0180%" height="15" fill="rgb(206,174,23)" fg:x="1983" fg:w="2"/><text x="18.0683%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (260 samples, 2.34%)</title><rect x="15.6348%" y="757" width="2.3362%" height="15" fill="rgb(211,33,43)" fg:x="1740" fg:w="260"/><text x="15.8848%" y="767.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (250 samples, 2.25%)</title><rect x="15.7247%" y="741" width="2.2464%" height="15" fill="rgb(245,58,50)" fg:x="1750" fg:w="250"/><text x="15.9747%" y="751.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (250 samples, 2.25%)</title><rect x="15.7247%" y="725" width="2.2464%" height="15" fill="rgb(244,68,36)" fg:x="1750" fg:w="250"/><text x="15.9747%" y="735.50">a..</text></g><g><title>alloc::slice::hack::to_vec (250 samples, 2.25%)</title><rect x="15.7247%" y="709" width="2.2464%" height="15" fill="rgb(232,229,15)" fg:x="1750" fg:w="250"/><text x="15.9747%" y="719.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (250 samples, 2.25%)</title><rect x="15.7247%" y="693" width="2.2464%" height="15" fill="rgb(254,30,23)" fg:x="1750" fg:w="250"/><text x="15.9747%" y="703.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (15 samples, 0.13%)</title><rect x="17.8363%" y="677" width="0.1348%" height="15" fill="rgb(235,160,14)" fg:x="1985" fg:w="15"/><text x="18.0863%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.13%)</title><rect x="17.8363%" y="661" width="0.1348%" height="15" fill="rgb(212,155,44)" fg:x="1985" fg:w="15"/><text x="18.0863%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (15 samples, 0.13%)</title><rect x="17.8363%" y="645" width="0.1348%" height="15" fill="rgb(226,2,50)" fg:x="1985" fg:w="15"/><text x="18.0863%" y="655.50"></text></g><g><title>checked_request2size (16 samples, 0.14%)</title><rect x="22.9580%" y="533" width="0.1438%" height="15" fill="rgb(234,177,6)" fg:x="2555" fg:w="16"/><text x="23.2080%" y="543.50"></text></g><g><title>tcache_put (49 samples, 0.44%)</title><rect x="23.1018%" y="533" width="0.4403%" height="15" fill="rgb(217,24,9)" fg:x="2571" fg:w="49"/><text x="23.3518%" y="543.50"></text></g><g><title>_int_malloc (373 samples, 3.35%)</title><rect x="20.2893%" y="549" width="3.3516%" height="15" fill="rgb(220,13,46)" fg:x="2258" fg:w="373"/><text x="20.5393%" y="559.50">_in..</text></g><g><title>unlink_chunk (11 samples, 0.10%)</title><rect x="23.5421%" y="533" width="0.0988%" height="15" fill="rgb(239,221,27)" fg:x="2620" fg:w="11"/><text x="23.7921%" y="543.50"></text></g><g><title>arena_for_chunk (6 samples, 0.05%)</title><rect x="23.6409%" y="549" width="0.0539%" height="15" fill="rgb(222,198,25)" fg:x="2631" fg:w="6"/><text x="23.8909%" y="559.50"></text></g><g><title>checked_request2size (19 samples, 0.17%)</title><rect x="23.6949%" y="549" width="0.1707%" height="15" fill="rgb(211,99,13)" fg:x="2637" fg:w="19"/><text x="23.9449%" y="559.50"></text></g><g><title>__GI___libc_malloc (505 samples, 4.54%)</title><rect x="19.6424%" y="565" width="4.5377%" height="15" fill="rgb(232,111,31)" fg:x="2186" fg:w="505"/><text x="19.8924%" y="575.50">__GI_..</text></g><g><title>tcache_get (35 samples, 0.31%)</title><rect x="23.8656%" y="549" width="0.3145%" height="15" fill="rgb(245,82,37)" fg:x="2656" fg:w="35"/><text x="24.1156%" y="559.50"></text></g><g><title>tcache_get_n (35 samples, 0.31%)</title><rect x="23.8656%" y="533" width="0.3145%" height="15" fill="rgb(227,149,46)" fg:x="2656" fg:w="35"/><text x="24.1156%" y="543.50"></text></g><g><title>__rdl_alloc (35 samples, 0.31%)</title><rect x="24.1801%" y="565" width="0.3145%" height="15" fill="rgb(218,36,50)" fg:x="2691" fg:w="35"/><text x="24.4301%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (35 samples, 0.31%)</title><rect x="24.1801%" y="549" width="0.3145%" height="15" fill="rgb(226,80,48)" fg:x="2691" fg:w="35"/><text x="24.4301%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (603 samples, 5.42%)</title><rect x="19.1572%" y="661" width="5.4183%" height="15" fill="rgb(238,224,15)" fg:x="2132" fg:w="603"/><text x="19.4072%" y="671.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (603 samples, 5.42%)</title><rect x="19.1572%" y="645" width="5.4183%" height="15" fill="rgb(241,136,10)" fg:x="2132" fg:w="603"/><text x="19.4072%" y="655.50">alloc::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (603 samples, 5.42%)</title><rect x="19.1572%" y="629" width="5.4183%" height="15" fill="rgb(208,32,45)" fg:x="2132" fg:w="603"/><text x="19.4072%" y="639.50">alloc::..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (571 samples, 5.13%)</title><rect x="19.4447%" y="613" width="5.1307%" height="15" fill="rgb(207,135,9)" fg:x="2164" fg:w="571"/><text x="19.6947%" y="623.50">&lt;alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (571 samples, 5.13%)</title><rect x="19.4447%" y="597" width="5.1307%" height="15" fill="rgb(206,86,44)" fg:x="2164" fg:w="571"/><text x="19.6947%" y="607.50">alloc:..</text></g><g><title>alloc::alloc::alloc (571 samples, 5.13%)</title><rect x="19.4447%" y="581" width="5.1307%" height="15" fill="rgb(245,177,15)" fg:x="2164" fg:w="571"/><text x="19.6947%" y="591.50">alloc:..</text></g><g><title>__rust_alloc (9 samples, 0.08%)</title><rect x="24.4946%" y="565" width="0.0809%" height="15" fill="rgb(206,64,50)" fg:x="2726" fg:w="9"/><text x="24.7446%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (677 samples, 6.08%)</title><rect x="18.9145%" y="741" width="6.0832%" height="15" fill="rgb(234,36,40)" fg:x="2105" fg:w="677"/><text x="19.1645%" y="751.50">&lt;alloc::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (650 samples, 5.84%)</title><rect x="19.1572%" y="725" width="5.8406%" height="15" fill="rgb(213,64,8)" fg:x="2132" fg:w="650"/><text x="19.4072%" y="735.50">&lt;alloc:..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (650 samples, 5.84%)</title><rect x="19.1572%" y="709" width="5.8406%" height="15" fill="rgb(210,75,36)" fg:x="2132" fg:w="650"/><text x="19.4072%" y="719.50">alloc::..</text></g><g><title>alloc::slice::hack::to_vec (650 samples, 5.84%)</title><rect x="19.1572%" y="693" width="5.8406%" height="15" fill="rgb(229,88,21)" fg:x="2132" fg:w="650"/><text x="19.4072%" y="703.50">alloc::..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (650 samples, 5.84%)</title><rect x="19.1572%" y="677" width="5.8406%" height="15" fill="rgb(252,204,47)" fg:x="2132" fg:w="650"/><text x="19.4072%" y="687.50">&lt;T as a..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (47 samples, 0.42%)</title><rect x="24.5754%" y="661" width="0.4223%" height="15" fill="rgb(208,77,27)" fg:x="2735" fg:w="47"/><text x="24.8254%" y="671.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (47 samples, 0.42%)</title><rect x="24.5754%" y="645" width="0.4223%" height="15" fill="rgb(221,76,26)" fg:x="2735" fg:w="47"/><text x="24.8254%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (47 samples, 0.42%)</title><rect x="24.5754%" y="629" width="0.4223%" height="15" fill="rgb(225,139,18)" fg:x="2735" fg:w="47"/><text x="24.8254%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (8 samples, 0.07%)</title><rect x="24.9978%" y="725" width="0.0719%" height="15" fill="rgb(230,137,11)" fg:x="2782" fg:w="8"/><text x="25.2478%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (38 samples, 0.34%)</title><rect x="24.9978%" y="741" width="0.3415%" height="15" fill="rgb(212,28,1)" fg:x="2782" fg:w="38"/><text x="25.2478%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (30 samples, 0.27%)</title><rect x="25.0696%" y="725" width="0.2696%" height="15" fill="rgb(248,164,17)" fg:x="2790" fg:w="30"/><text x="25.3196%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (30 samples, 0.27%)</title><rect x="25.0696%" y="709" width="0.2696%" height="15" fill="rgb(222,171,42)" fg:x="2790" fg:w="30"/><text x="25.3196%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (30 samples, 0.27%)</title><rect x="25.0696%" y="693" width="0.2696%" height="15" fill="rgb(243,84,45)" fg:x="2790" fg:w="30"/><text x="25.3196%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.13%)</title><rect x="25.2134%" y="677" width="0.1258%" height="15" fill="rgb(252,49,23)" fg:x="2806" fg:w="14"/><text x="25.4634%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="25.2853%" y="661" width="0.0539%" height="15" fill="rgb(215,19,7)" fg:x="2814" fg:w="6"/><text x="25.5353%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.05%)</title><rect x="25.2853%" y="645" width="0.0539%" height="15" fill="rgb(238,81,41)" fg:x="2814" fg:w="6"/><text x="25.5353%" y="655.50"></text></g><g><title>checked_request2size (6 samples, 0.05%)</title><rect x="28.2685%" y="517" width="0.0539%" height="15" fill="rgb(210,199,37)" fg:x="3146" fg:w="6"/><text x="28.5185%" y="527.50"></text></g><g><title>tcache_put (18 samples, 0.16%)</title><rect x="28.3224%" y="517" width="0.1617%" height="15" fill="rgb(244,192,49)" fg:x="3152" fg:w="18"/><text x="28.5724%" y="527.50"></text></g><g><title>_int_malloc (142 samples, 1.28%)</title><rect x="27.3070%" y="533" width="1.2759%" height="15" fill="rgb(226,211,11)" fg:x="3039" fg:w="142"/><text x="27.5570%" y="543.50"></text></g><g><title>unlink_chunk (11 samples, 0.10%)</title><rect x="28.4841%" y="517" width="0.0988%" height="15" fill="rgb(236,162,54)" fg:x="3170" fg:w="11"/><text x="28.7341%" y="527.50"></text></g><g><title>checked_request2size (4 samples, 0.04%)</title><rect x="28.5920%" y="533" width="0.0359%" height="15" fill="rgb(220,229,9)" fg:x="3182" fg:w="4"/><text x="28.8420%" y="543.50"></text></g><g><title>__GI___libc_malloc (184 samples, 1.65%)</title><rect x="27.0824%" y="549" width="1.6533%" height="15" fill="rgb(250,87,22)" fg:x="3014" fg:w="184"/><text x="27.3324%" y="559.50"></text></g><g><title>tcache_get (12 samples, 0.11%)</title><rect x="28.6279%" y="533" width="0.1078%" height="15" fill="rgb(239,43,17)" fg:x="3186" fg:w="12"/><text x="28.8779%" y="543.50"></text></g><g><title>tcache_get_n (12 samples, 0.11%)</title><rect x="28.6279%" y="517" width="0.1078%" height="15" fill="rgb(231,177,25)" fg:x="3186" fg:w="12"/><text x="28.8779%" y="527.50"></text></g><g><title>__rdl_alloc (12 samples, 0.11%)</title><rect x="28.7357%" y="549" width="0.1078%" height="15" fill="rgb(219,179,1)" fg:x="3198" fg:w="12"/><text x="28.9857%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (12 samples, 0.11%)</title><rect x="28.7357%" y="533" width="0.1078%" height="15" fill="rgb(238,219,53)" fg:x="3198" fg:w="12"/><text x="28.9857%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (221 samples, 1.99%)</title><rect x="26.9386%" y="645" width="1.9858%" height="15" fill="rgb(232,167,36)" fg:x="2998" fg:w="221"/><text x="27.1886%" y="655.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (221 samples, 1.99%)</title><rect x="26.9386%" y="629" width="1.9858%" height="15" fill="rgb(244,19,51)" fg:x="2998" fg:w="221"/><text x="27.1886%" y="639.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (221 samples, 1.99%)</title><rect x="26.9386%" y="613" width="1.9858%" height="15" fill="rgb(224,6,22)" fg:x="2998" fg:w="221"/><text x="27.1886%" y="623.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (209 samples, 1.88%)</title><rect x="27.0465%" y="597" width="1.8780%" height="15" fill="rgb(224,145,5)" fg:x="3010" fg:w="209"/><text x="27.2965%" y="607.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (209 samples, 1.88%)</title><rect x="27.0465%" y="581" width="1.8780%" height="15" fill="rgb(234,130,49)" fg:x="3010" fg:w="209"/><text x="27.2965%" y="591.50">a..</text></g><g><title>alloc::alloc::alloc (209 samples, 1.88%)</title><rect x="27.0465%" y="565" width="1.8780%" height="15" fill="rgb(254,6,2)" fg:x="3010" fg:w="209"/><text x="27.2965%" y="575.50">a..</text></g><g><title>__rust_alloc (9 samples, 0.08%)</title><rect x="28.8436%" y="549" width="0.0809%" height="15" fill="rgb(208,96,46)" fg:x="3210" fg:w="9"/><text x="29.0936%" y="559.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (1,240 samples, 11.14%)</title><rect x="17.9711%" y="757" width="11.1421%" height="15" fill="rgb(239,3,39)" fg:x="2000" fg:w="1240"/><text x="18.2211%" y="767.50">&lt;graph::Edge as ..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (420 samples, 3.77%)</title><rect x="25.3392%" y="741" width="3.7739%" height="15" fill="rgb(233,210,1)" fg:x="2820" fg:w="420"/><text x="25.5892%" y="751.50">&lt;cor..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (255 samples, 2.29%)</title><rect x="26.8218%" y="725" width="2.2913%" height="15" fill="rgb(244,137,37)" fg:x="2985" fg:w="255"/><text x="27.0718%" y="735.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (242 samples, 2.17%)</title><rect x="26.9386%" y="709" width="2.1745%" height="15" fill="rgb(240,136,2)" fg:x="2998" fg:w="242"/><text x="27.1886%" y="719.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (242 samples, 2.17%)</title><rect x="26.9386%" y="693" width="2.1745%" height="15" fill="rgb(239,18,37)" fg:x="2998" fg:w="242"/><text x="27.1886%" y="703.50">a..</text></g><g><title>alloc::slice::hack::to_vec (242 samples, 2.17%)</title><rect x="26.9386%" y="677" width="2.1745%" height="15" fill="rgb(218,185,22)" fg:x="2998" fg:w="242"/><text x="27.1886%" y="687.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (242 samples, 2.17%)</title><rect x="26.9386%" y="661" width="2.1745%" height="15" fill="rgb(225,218,4)" fg:x="2998" fg:w="242"/><text x="27.1886%" y="671.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (21 samples, 0.19%)</title><rect x="28.9244%" y="645" width="0.1887%" height="15" fill="rgb(230,182,32)" fg:x="3219" fg:w="21"/><text x="29.1744%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (21 samples, 0.19%)</title><rect x="28.9244%" y="629" width="0.1887%" height="15" fill="rgb(242,56,43)" fg:x="3219" fg:w="21"/><text x="29.1744%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (21 samples, 0.19%)</title><rect x="28.9244%" y="613" width="0.1887%" height="15" fill="rgb(233,99,24)" fg:x="3219" fg:w="21"/><text x="29.1744%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (17 samples, 0.15%)</title><rect x="29.1131%" y="757" width="0.1528%" height="15" fill="rgb(234,209,42)" fg:x="3240" fg:w="17"/><text x="29.3631%" y="767.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::val_area_mut (3 samples, 0.03%)</title><rect x="29.2928%" y="741" width="0.0270%" height="15" fill="rgb(227,7,12)" fg:x="3260" fg:w="3"/><text x="29.5428%" y="751.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (3 samples, 0.03%)</title><rect x="29.2928%" y="725" width="0.0270%" height="15" fill="rgb(245,203,43)" fg:x="3260" fg:w="3"/><text x="29.5428%" y="735.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (3 samples, 0.03%)</title><rect x="29.2928%" y="709" width="0.0270%" height="15" fill="rgb(238,205,33)" fg:x="3260" fg:w="3"/><text x="29.5428%" y="719.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (3 samples, 0.03%)</title><rect x="29.2928%" y="693" width="0.0270%" height="15" fill="rgb(231,56,7)" fg:x="3260" fg:w="3"/><text x="29.5428%" y="703.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (130 samples, 1.17%)</title><rect x="29.2659%" y="757" width="1.1681%" height="15" fill="rgb(244,186,29)" fg:x="3257" fg:w="130"/><text x="29.5159%" y="767.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (124 samples, 1.11%)</title><rect x="29.3198%" y="741" width="1.1142%" height="15" fill="rgb(234,111,31)" fg:x="3263" fg:w="124"/><text x="29.5698%" y="751.50"></text></g><g><title>__memcpy_avx_unaligned_erms (117 samples, 1.05%)</title><rect x="29.3827%" y="725" width="1.0513%" height="15" fill="rgb(241,149,10)" fg:x="3270" fg:w="117"/><text x="29.6327%" y="735.50"></text></g><g><title>malloc_consolidate (1,487 samples, 13.36%)</title><rect x="39.2488%" y="597" width="13.3615%" height="15" fill="rgb(249,206,44)" fg:x="4368" fg:w="1487"/><text x="39.4988%" y="607.50">malloc_consolidate</text></g><g><title>unlink_chunk (34 samples, 0.31%)</title><rect x="52.3048%" y="581" width="0.3055%" height="15" fill="rgb(251,153,30)" fg:x="5821" fg:w="34"/><text x="52.5548%" y="591.50"></text></g><g><title>_int_malloc (2,474 samples, 22.23%)</title><rect x="30.4879%" y="613" width="22.2302%" height="15" fill="rgb(239,152,38)" fg:x="3393" fg:w="2474"/><text x="30.7379%" y="623.50">_int_malloc</text></g><g><title>unlink_chunk (12 samples, 0.11%)</title><rect x="52.6103%" y="597" width="0.1078%" height="15" fill="rgb(249,139,47)" fg:x="5855" fg:w="12"/><text x="52.8603%" y="607.50"></text></g><g><title>__GI___libc_malloc (2,481 samples, 22.29%)</title><rect x="30.4340%" y="629" width="22.2931%" height="15" fill="rgb(244,64,35)" fg:x="3387" fg:w="2481"/><text x="30.6840%" y="639.50">__GI___libc_malloc</text></g><g><title>__rdl_alloc (4 samples, 0.04%)</title><rect x="52.7271%" y="629" width="0.0359%" height="15" fill="rgb(216,46,15)" fg:x="5868" fg:w="4"/><text x="52.9771%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.04%)</title><rect x="52.7271%" y="613" width="0.0359%" height="15" fill="rgb(250,74,19)" fg:x="5868" fg:w="4"/><text x="52.9771%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2,487 samples, 22.35%)</title><rect x="30.4340%" y="709" width="22.3470%" height="15" fill="rgb(249,42,33)" fg:x="3387" fg:w="2487"/><text x="30.6840%" y="719.50">alloc::boxed::Box&lt;T,A&gt;::new_uninit_..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2,487 samples, 22.35%)</title><rect x="30.4340%" y="693" width="22.3470%" height="15" fill="rgb(242,149,17)" fg:x="3387" fg:w="2487"/><text x="30.6840%" y="703.50">alloc::boxed::Box&lt;T,A&gt;::try_new_uni..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2,487 samples, 22.35%)</title><rect x="30.4340%" y="677" width="22.3470%" height="15" fill="rgb(244,29,21)" fg:x="3387" fg:w="2487"/><text x="30.6840%" y="687.50">&lt;alloc::alloc::Global as core::allo..</text></g><g><title>alloc::alloc::Global::alloc_impl (2,487 samples, 22.35%)</title><rect x="30.4340%" y="661" width="22.3470%" height="15" fill="rgb(220,130,37)" fg:x="3387" fg:w="2487"/><text x="30.6840%" y="671.50">alloc::alloc::Global::alloc_impl</text></g><g><title>alloc::alloc::alloc (2,487 samples, 22.35%)</title><rect x="30.4340%" y="645" width="22.3470%" height="15" fill="rgb(211,67,2)" fg:x="3387" fg:w="2487"/><text x="30.6840%" y="655.50">alloc::alloc::alloc</text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="52.7631%" y="629" width="0.0180%" height="15" fill="rgb(235,68,52)" fg:x="5872" fg:w="2"/><text x="53.0131%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4,136 samples, 37.16%)</title><rect x="15.6258%" y="773" width="37.1642%" height="15" fill="rgb(246,142,3)" fg:x="1739" fg:w="4136"/><text x="15.8758%" y="783.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::cl..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (2,488 samples, 22.36%)</title><rect x="30.4340%" y="757" width="22.3560%" height="15" fill="rgb(241,25,7)" fg:x="3387" fg:w="2488"/><text x="30.6840%" y="767.50">alloc::collections::btree::node::No..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (2,488 samples, 22.36%)</title><rect x="30.4340%" y="741" width="22.3560%" height="15" fill="rgb(242,119,39)" fg:x="3387" fg:w="2488"/><text x="30.6840%" y="751.50">alloc::collections::btree::node::No..</text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (2,488 samples, 22.36%)</title><rect x="30.4340%" y="725" width="22.3560%" height="15" fill="rgb(241,98,45)" fg:x="3387" fg:w="2488"/><text x="30.6840%" y="735.50">alloc::collections::btree::node::Le..</text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="53.0416%" y="565" width="0.0180%" height="15" fill="rgb(254,28,30)" fg:x="5903" fg:w="2"/><text x="53.2916%" y="575.50"></text></g><g><title>_int_malloc (27 samples, 0.24%)</title><rect x="52.8260%" y="581" width="0.2426%" height="15" fill="rgb(241,142,54)" fg:x="5879" fg:w="27"/><text x="53.0760%" y="591.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="53.0775%" y="581" width="0.0180%" height="15" fill="rgb(222,85,15)" fg:x="5907" fg:w="2"/><text x="53.3275%" y="591.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.31%)</title><rect x="52.7990%" y="597" width="0.3145%" height="15" fill="rgb(210,85,47)" fg:x="5876" fg:w="35"/><text x="53.0490%" y="607.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="53.0955%" y="581" width="0.0180%" height="15" fill="rgb(224,206,25)" fg:x="5909" fg:w="2"/><text x="53.3455%" y="591.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="53.0955%" y="565" width="0.0180%" height="15" fill="rgb(243,201,19)" fg:x="5909" fg:w="2"/><text x="53.3455%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.34%)</title><rect x="52.7900%" y="693" width="0.3415%" height="15" fill="rgb(236,59,4)" fg:x="5875" fg:w="38"/><text x="53.0400%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.34%)</title><rect x="52.7900%" y="677" width="0.3415%" height="15" fill="rgb(254,179,45)" fg:x="5875" fg:w="38"/><text x="53.0400%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.34%)</title><rect x="52.7900%" y="661" width="0.3415%" height="15" fill="rgb(226,14,10)" fg:x="5875" fg:w="38"/><text x="53.0400%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (37 samples, 0.33%)</title><rect x="52.7990%" y="645" width="0.3325%" height="15" fill="rgb(244,27,41)" fg:x="5876" fg:w="37"/><text x="53.0490%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (37 samples, 0.33%)</title><rect x="52.7990%" y="629" width="0.3325%" height="15" fill="rgb(235,35,32)" fg:x="5876" fg:w="37"/><text x="53.0490%" y="639.50"></text></g><g><title>alloc::alloc::alloc (37 samples, 0.33%)</title><rect x="52.7990%" y="613" width="0.3325%" height="15" fill="rgb(218,68,31)" fg:x="5876" fg:w="37"/><text x="53.0490%" y="623.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="53.1135%" y="597" width="0.0180%" height="15" fill="rgb(207,120,37)" fg:x="5911" fg:w="2"/><text x="53.3635%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="53.1135%" y="581" width="0.0180%" height="15" fill="rgb(227,98,0)" fg:x="5911" fg:w="2"/><text x="53.3635%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (43 samples, 0.39%)</title><rect x="52.7900%" y="773" width="0.3864%" height="15" fill="rgb(207,7,3)" fg:x="5875" fg:w="43"/><text x="53.0400%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (43 samples, 0.39%)</title><rect x="52.7900%" y="757" width="0.3864%" height="15" fill="rgb(206,98,19)" fg:x="5875" fg:w="43"/><text x="53.0400%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (43 samples, 0.39%)</title><rect x="52.7900%" y="741" width="0.3864%" height="15" fill="rgb(217,5,26)" fg:x="5875" fg:w="43"/><text x="53.0400%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (43 samples, 0.39%)</title><rect x="52.7900%" y="725" width="0.3864%" height="15" fill="rgb(235,190,38)" fg:x="5875" fg:w="43"/><text x="53.0400%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (43 samples, 0.39%)</title><rect x="52.7900%" y="709" width="0.3864%" height="15" fill="rgb(247,86,24)" fg:x="5875" fg:w="43"/><text x="53.0400%" y="719.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.04%)</title><rect x="53.1315%" y="693" width="0.0449%" height="15" fill="rgb(205,101,16)" fg:x="5913" fg:w="5"/><text x="53.3815%" y="703.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="53.1315%" y="677" width="0.0449%" height="15" fill="rgb(246,168,33)" fg:x="5913" fg:w="5"/><text x="53.3815%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="53.1315%" y="661" width="0.0449%" height="15" fill="rgb(231,114,1)" fg:x="5913" fg:w="5"/><text x="53.3815%" y="671.50"></text></g><g><title>tcache_put (9 samples, 0.08%)</title><rect x="53.8862%" y="549" width="0.0809%" height="15" fill="rgb(207,184,53)" fg:x="5997" fg:w="9"/><text x="54.1362%" y="559.50"></text></g><g><title>_int_malloc (58 samples, 0.52%)</title><rect x="53.4999%" y="565" width="0.5212%" height="15" fill="rgb(224,95,51)" fg:x="5954" fg:w="58"/><text x="53.7499%" y="575.50"></text></g><g><title>unlink_chunk (6 samples, 0.05%)</title><rect x="53.9671%" y="549" width="0.0539%" height="15" fill="rgb(212,188,45)" fg:x="6006" fg:w="6"/><text x="54.2171%" y="559.50"></text></g><g><title>checked_request2size (4 samples, 0.04%)</title><rect x="54.0300%" y="565" width="0.0359%" height="15" fill="rgb(223,154,38)" fg:x="6013" fg:w="4"/><text x="54.2800%" y="575.50"></text></g><g><title>__GI___libc_malloc (76 samples, 0.68%)</title><rect x="53.4370%" y="581" width="0.6829%" height="15" fill="rgb(251,22,52)" fg:x="5947" fg:w="76"/><text x="53.6870%" y="591.50"></text></g><g><title>tcache_get (6 samples, 0.05%)</title><rect x="54.0660%" y="565" width="0.0539%" height="15" fill="rgb(229,209,22)" fg:x="6017" fg:w="6"/><text x="54.3160%" y="575.50"></text></g><g><title>tcache_get_n (6 samples, 0.05%)</title><rect x="54.0660%" y="549" width="0.0539%" height="15" fill="rgb(234,138,34)" fg:x="6017" fg:w="6"/><text x="54.3160%" y="559.50"></text></g><g><title>__rdl_alloc (5 samples, 0.04%)</title><rect x="54.1199%" y="581" width="0.0449%" height="15" fill="rgb(212,95,11)" fg:x="6023" fg:w="5"/><text x="54.3699%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (5 samples, 0.04%)</title><rect x="54.1199%" y="565" width="0.0449%" height="15" fill="rgb(240,179,47)" fg:x="6023" fg:w="5"/><text x="54.3699%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (95 samples, 0.85%)</title><rect x="53.3471%" y="677" width="0.8536%" height="15" fill="rgb(240,163,11)" fg:x="5937" fg:w="95"/><text x="53.5971%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (95 samples, 0.85%)</title><rect x="53.3471%" y="661" width="0.8536%" height="15" fill="rgb(236,37,12)" fg:x="5937" fg:w="95"/><text x="53.5971%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (95 samples, 0.85%)</title><rect x="53.3471%" y="645" width="0.8536%" height="15" fill="rgb(232,164,16)" fg:x="5937" fg:w="95"/><text x="53.5971%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (89 samples, 0.80%)</title><rect x="53.4010%" y="629" width="0.7997%" height="15" fill="rgb(244,205,15)" fg:x="5943" fg:w="89"/><text x="53.6510%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (89 samples, 0.80%)</title><rect x="53.4010%" y="613" width="0.7997%" height="15" fill="rgb(223,117,47)" fg:x="5943" fg:w="89"/><text x="53.6510%" y="623.50"></text></g><g><title>alloc::alloc::alloc (89 samples, 0.80%)</title><rect x="53.4010%" y="597" width="0.7997%" height="15" fill="rgb(244,107,35)" fg:x="5943" fg:w="89"/><text x="53.6510%" y="607.50"></text></g><g><title>__rust_alloc (4 samples, 0.04%)</title><rect x="54.1648%" y="581" width="0.0359%" height="15" fill="rgb(205,140,8)" fg:x="6028" fg:w="4"/><text x="54.4148%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (105 samples, 0.94%)</title><rect x="53.3022%" y="757" width="0.9435%" height="15" fill="rgb(228,84,46)" fg:x="5932" fg:w="105"/><text x="53.5522%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (100 samples, 0.90%)</title><rect x="53.3471%" y="741" width="0.8986%" height="15" fill="rgb(254,188,9)" fg:x="5937" fg:w="100"/><text x="53.5971%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (100 samples, 0.90%)</title><rect x="53.3471%" y="725" width="0.8986%" height="15" fill="rgb(206,112,54)" fg:x="5937" fg:w="100"/><text x="53.5971%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (100 samples, 0.90%)</title><rect x="53.3471%" y="709" width="0.8986%" height="15" fill="rgb(216,84,49)" fg:x="5937" fg:w="100"/><text x="53.5971%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (100 samples, 0.90%)</title><rect x="53.3471%" y="693" width="0.8986%" height="15" fill="rgb(214,194,35)" fg:x="5937" fg:w="100"/><text x="53.5971%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.04%)</title><rect x="54.2007%" y="677" width="0.0449%" height="15" fill="rgb(249,28,3)" fg:x="6032" fg:w="5"/><text x="54.4507%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="54.2007%" y="661" width="0.0449%" height="15" fill="rgb(222,56,52)" fg:x="6032" fg:w="5"/><text x="54.4507%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="54.2007%" y="645" width="0.0449%" height="15" fill="rgb(245,217,50)" fg:x="6032" fg:w="5"/><text x="54.4507%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="54.2457%" y="757" width="0.0539%" height="15" fill="rgb(213,201,24)" fg:x="6037" fg:w="6"/><text x="54.4957%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.04%)</title><rect x="54.2547%" y="741" width="0.0449%" height="15" fill="rgb(248,116,28)" fg:x="6038" fg:w="5"/><text x="54.5047%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.04%)</title><rect x="54.2547%" y="725" width="0.0449%" height="15" fill="rgb(219,72,43)" fg:x="6038" fg:w="5"/><text x="54.5047%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.04%)</title><rect x="54.2547%" y="709" width="0.0449%" height="15" fill="rgb(209,138,14)" fg:x="6038" fg:w="5"/><text x="54.5047%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="54.2726%" y="693" width="0.0270%" height="15" fill="rgb(222,18,33)" fg:x="6040" fg:w="3"/><text x="54.5226%" y="703.50"></text></g><g><title>__GI___libc_malloc (31 samples, 0.28%)</title><rect x="54.4164%" y="565" width="0.2786%" height="15" fill="rgb(213,199,7)" fg:x="6056" fg:w="31"/><text x="54.6664%" y="575.50"></text></g><g><title>_int_malloc (24 samples, 0.22%)</title><rect x="54.4793%" y="549" width="0.2157%" height="15" fill="rgb(250,110,10)" fg:x="6063" fg:w="24"/><text x="54.7293%" y="559.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="54.6949%" y="565" width="0.0180%" height="15" fill="rgb(248,123,6)" fg:x="6087" fg:w="2"/><text x="54.9449%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="54.6949%" y="549" width="0.0180%" height="15" fill="rgb(206,91,31)" fg:x="6087" fg:w="2"/><text x="54.9449%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (34 samples, 0.31%)</title><rect x="54.4164%" y="661" width="0.3055%" height="15" fill="rgb(211,154,13)" fg:x="6056" fg:w="34"/><text x="54.6664%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (34 samples, 0.31%)</title><rect x="54.4164%" y="645" width="0.3055%" height="15" fill="rgb(225,148,7)" fg:x="6056" fg:w="34"/><text x="54.6664%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (34 samples, 0.31%)</title><rect x="54.4164%" y="629" width="0.3055%" height="15" fill="rgb(220,160,43)" fg:x="6056" fg:w="34"/><text x="54.6664%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (34 samples, 0.31%)</title><rect x="54.4164%" y="613" width="0.3055%" height="15" fill="rgb(213,52,39)" fg:x="6056" fg:w="34"/><text x="54.6664%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (34 samples, 0.31%)</title><rect x="54.4164%" y="597" width="0.3055%" height="15" fill="rgb(243,137,7)" fg:x="6056" fg:w="34"/><text x="54.6664%" y="607.50"></text></g><g><title>alloc::alloc::alloc (34 samples, 0.31%)</title><rect x="54.4164%" y="581" width="0.3055%" height="15" fill="rgb(230,79,13)" fg:x="6056" fg:w="34"/><text x="54.6664%" y="591.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (173 samples, 1.55%)</title><rect x="53.1764%" y="773" width="1.5545%" height="15" fill="rgb(247,105,23)" fg:x="5918" fg:w="173"/><text x="53.4264%" y="783.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (48 samples, 0.43%)</title><rect x="54.2996%" y="757" width="0.4313%" height="15" fill="rgb(223,179,41)" fg:x="6043" fg:w="48"/><text x="54.5496%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (37 samples, 0.33%)</title><rect x="54.3984%" y="741" width="0.3325%" height="15" fill="rgb(218,9,34)" fg:x="6054" fg:w="37"/><text x="54.6484%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (35 samples, 0.31%)</title><rect x="54.4164%" y="725" width="0.3145%" height="15" fill="rgb(222,106,8)" fg:x="6056" fg:w="35"/><text x="54.6664%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (35 samples, 0.31%)</title><rect x="54.4164%" y="709" width="0.3145%" height="15" fill="rgb(211,220,0)" fg:x="6056" fg:w="35"/><text x="54.6664%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (35 samples, 0.31%)</title><rect x="54.4164%" y="693" width="0.3145%" height="15" fill="rgb(229,52,16)" fg:x="6056" fg:w="35"/><text x="54.6664%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (35 samples, 0.31%)</title><rect x="54.4164%" y="677" width="0.3145%" height="15" fill="rgb(212,155,18)" fg:x="6056" fg:w="35"/><text x="54.6664%" y="687.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="54.7309%" y="773" width="0.0449%" height="15" fill="rgb(242,21,14)" fg:x="6091" fg:w="5"/><text x="54.9809%" y="783.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (11 samples, 0.10%)</title><rect x="54.7938%" y="773" width="0.0988%" height="15" fill="rgb(222,19,48)" fg:x="6098" fg:w="11"/><text x="55.0438%" y="783.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (8 samples, 0.07%)</title><rect x="54.8207%" y="757" width="0.0719%" height="15" fill="rgb(232,45,27)" fg:x="6101" fg:w="8"/><text x="55.0707%" y="767.50"></text></g><g><title>__memcpy_avx_unaligned_erms (7 samples, 0.06%)</title><rect x="54.8297%" y="741" width="0.0629%" height="15" fill="rgb(249,103,42)" fg:x="6102" fg:w="7"/><text x="55.0797%" y="751.50"></text></g><g><title>_int_malloc (33 samples, 0.30%)</title><rect x="54.9016%" y="565" width="0.2965%" height="15" fill="rgb(246,81,33)" fg:x="6110" fg:w="33"/><text x="55.1516%" y="575.50"></text></g><g><title>unlink_chunk (3 samples, 0.03%)</title><rect x="55.1712%" y="549" width="0.0270%" height="15" fill="rgb(252,33,42)" fg:x="6140" fg:w="3"/><text x="55.4212%" y="559.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (35 samples, 0.31%)</title><rect x="54.8926%" y="677" width="0.3145%" height="15" fill="rgb(209,212,41)" fg:x="6109" fg:w="35"/><text x="55.1426%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (35 samples, 0.31%)</title><rect x="54.8926%" y="661" width="0.3145%" height="15" fill="rgb(207,154,6)" fg:x="6109" fg:w="35"/><text x="55.1426%" y="671.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (35 samples, 0.31%)</title><rect x="54.8926%" y="645" width="0.3145%" height="15" fill="rgb(223,64,47)" fg:x="6109" fg:w="35"/><text x="55.1426%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (35 samples, 0.31%)</title><rect x="54.8926%" y="629" width="0.3145%" height="15" fill="rgb(211,161,38)" fg:x="6109" fg:w="35"/><text x="55.1426%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (35 samples, 0.31%)</title><rect x="54.8926%" y="613" width="0.3145%" height="15" fill="rgb(219,138,40)" fg:x="6109" fg:w="35"/><text x="55.1426%" y="623.50"></text></g><g><title>alloc::alloc::alloc (35 samples, 0.31%)</title><rect x="54.8926%" y="597" width="0.3145%" height="15" fill="rgb(241,228,46)" fg:x="6109" fg:w="35"/><text x="55.1426%" y="607.50"></text></g><g><title>__GI___libc_malloc (35 samples, 0.31%)</title><rect x="54.8926%" y="581" width="0.3145%" height="15" fill="rgb(223,209,38)" fg:x="6109" fg:w="35"/><text x="55.1426%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4,411 samples, 39.64%)</title><rect x="15.5809%" y="789" width="39.6352%" height="15" fill="rgb(236,164,45)" fg:x="1734" fg:w="4411"/><text x="15.8309%" y="799.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (36 samples, 0.32%)</title><rect x="54.8926%" y="773" width="0.3235%" height="15" fill="rgb(231,15,5)" fg:x="6109" fg:w="36"/><text x="55.1426%" y="783.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (36 samples, 0.32%)</title><rect x="54.8926%" y="757" width="0.3235%" height="15" fill="rgb(252,35,15)" fg:x="6109" fg:w="36"/><text x="55.1426%" y="767.50"></text></g><g><title>alloc::collections::btree::mem::replace (36 samples, 0.32%)</title><rect x="54.8926%" y="741" width="0.3235%" height="15" fill="rgb(248,181,18)" fg:x="6109" fg:w="36"/><text x="55.1426%" y="751.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (36 samples, 0.32%)</title><rect x="54.8926%" y="725" width="0.3235%" height="15" fill="rgb(233,39,42)" fg:x="6109" fg:w="36"/><text x="55.1426%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (36 samples, 0.32%)</title><rect x="54.8926%" y="709" width="0.3235%" height="15" fill="rgb(238,110,33)" fg:x="6109" fg:w="36"/><text x="55.1426%" y="719.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (36 samples, 0.32%)</title><rect x="54.8926%" y="693" width="0.3235%" height="15" fill="rgb(233,195,10)" fg:x="6109" fg:w="36"/><text x="55.1426%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="55.2161%" y="789" width="0.0629%" height="15" fill="rgb(254,105,3)" fg:x="6145" fg:w="7"/><text x="55.4661%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="55.2251%" y="773" width="0.0539%" height="15" fill="rgb(221,225,9)" fg:x="6146" fg:w="6"/><text x="55.4751%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.05%)</title><rect x="55.2251%" y="757" width="0.0539%" height="15" fill="rgb(224,227,45)" fg:x="6146" fg:w="6"/><text x="55.4751%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.05%)</title><rect x="55.2251%" y="741" width="0.0539%" height="15" fill="rgb(229,198,43)" fg:x="6146" fg:w="6"/><text x="55.4751%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.05%)</title><rect x="55.2251%" y="725" width="0.0539%" height="15" fill="rgb(206,209,35)" fg:x="6146" fg:w="6"/><text x="55.4751%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="55.2251%" y="709" width="0.0539%" height="15" fill="rgb(245,195,53)" fg:x="6146" fg:w="6"/><text x="55.4751%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="55.2251%" y="693" width="0.0539%" height="15" fill="rgb(240,92,26)" fg:x="6146" fg:w="6"/><text x="55.4751%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.05%)</title><rect x="55.2251%" y="677" width="0.0539%" height="15" fill="rgb(207,40,23)" fg:x="6146" fg:w="6"/><text x="55.4751%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="55.2341%" y="661" width="0.0449%" height="15" fill="rgb(223,111,35)" fg:x="6147" fg:w="5"/><text x="55.4841%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="55.2341%" y="645" width="0.0449%" height="15" fill="rgb(229,147,28)" fg:x="6147" fg:w="5"/><text x="55.4841%" y="655.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="55.2341%" y="629" width="0.0449%" height="15" fill="rgb(211,29,28)" fg:x="6147" fg:w="5"/><text x="55.4841%" y="639.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="55.2341%" y="613" width="0.0449%" height="15" fill="rgb(228,72,33)" fg:x="6147" fg:w="5"/><text x="55.4841%" y="623.50"></text></g><g><title>_int_malloc (5 samples, 0.04%)</title><rect x="55.2341%" y="597" width="0.0449%" height="15" fill="rgb(205,214,31)" fg:x="6147" fg:w="5"/><text x="55.4841%" y="607.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.13%)</title><rect x="55.2970%" y="773" width="0.1348%" height="15" fill="rgb(224,111,15)" fg:x="6154" fg:w="15"/><text x="55.5470%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (13 samples, 0.12%)</title><rect x="55.3149%" y="757" width="0.1168%" height="15" fill="rgb(253,21,26)" fg:x="6156" fg:w="13"/><text x="55.5649%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (13 samples, 0.12%)</title><rect x="55.3149%" y="741" width="0.1168%" height="15" fill="rgb(245,139,43)" fg:x="6156" fg:w="13"/><text x="55.5649%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (13 samples, 0.12%)</title><rect x="55.3149%" y="725" width="0.1168%" height="15" fill="rgb(252,170,7)" fg:x="6156" fg:w="13"/><text x="55.5649%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (13 samples, 0.12%)</title><rect x="55.3149%" y="709" width="0.1168%" height="15" fill="rgb(231,118,14)" fg:x="6156" fg:w="13"/><text x="55.5649%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (13 samples, 0.12%)</title><rect x="55.3149%" y="693" width="0.1168%" height="15" fill="rgb(238,83,0)" fg:x="6156" fg:w="13"/><text x="55.5649%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (13 samples, 0.12%)</title><rect x="55.3149%" y="677" width="0.1168%" height="15" fill="rgb(221,39,39)" fg:x="6156" fg:w="13"/><text x="55.5649%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (13 samples, 0.12%)</title><rect x="55.3149%" y="661" width="0.1168%" height="15" fill="rgb(222,119,46)" fg:x="6156" fg:w="13"/><text x="55.5649%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.09%)</title><rect x="55.3419%" y="645" width="0.0899%" height="15" fill="rgb(222,165,49)" fg:x="6159" fg:w="10"/><text x="55.5919%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.09%)</title><rect x="55.3419%" y="629" width="0.0899%" height="15" fill="rgb(219,113,52)" fg:x="6159" fg:w="10"/><text x="55.5919%" y="639.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.09%)</title><rect x="55.3419%" y="613" width="0.0899%" height="15" fill="rgb(214,7,15)" fg:x="6159" fg:w="10"/><text x="55.5919%" y="623.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.09%)</title><rect x="55.3419%" y="597" width="0.0899%" height="15" fill="rgb(235,32,4)" fg:x="6159" fg:w="10"/><text x="55.5919%" y="607.50"></text></g><g><title>_int_malloc (10 samples, 0.09%)</title><rect x="55.3419%" y="581" width="0.0899%" height="15" fill="rgb(238,90,54)" fg:x="6159" fg:w="10"/><text x="55.5919%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="55.4497%" y="677" width="0.0359%" height="15" fill="rgb(213,208,19)" fg:x="6171" fg:w="4"/><text x="55.6997%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="55.4497%" y="661" width="0.0359%" height="15" fill="rgb(233,156,4)" fg:x="6171" fg:w="4"/><text x="55.6997%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="55.4497%" y="645" width="0.0359%" height="15" fill="rgb(207,194,5)" fg:x="6171" fg:w="4"/><text x="55.6997%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="55.4497%" y="629" width="0.0359%" height="15" fill="rgb(206,111,30)" fg:x="6171" fg:w="4"/><text x="55.6997%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="55.4497%" y="613" width="0.0359%" height="15" fill="rgb(243,70,54)" fg:x="6171" fg:w="4"/><text x="55.6997%" y="623.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="55.4497%" y="597" width="0.0359%" height="15" fill="rgb(242,28,8)" fg:x="6171" fg:w="4"/><text x="55.6997%" y="607.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="55.4497%" y="581" width="0.0359%" height="15" fill="rgb(219,106,18)" fg:x="6171" fg:w="4"/><text x="55.6997%" y="591.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="55.4497%" y="565" width="0.0359%" height="15" fill="rgb(244,222,10)" fg:x="6171" fg:w="4"/><text x="55.6997%" y="575.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (25 samples, 0.22%)</title><rect x="55.2790%" y="789" width="0.2246%" height="15" fill="rgb(236,179,52)" fg:x="6152" fg:w="25"/><text x="55.5290%" y="799.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.07%)</title><rect x="55.4318%" y="773" width="0.0719%" height="15" fill="rgb(213,23,39)" fg:x="6169" fg:w="8"/><text x="55.6818%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="55.4497%" y="757" width="0.0539%" height="15" fill="rgb(238,48,10)" fg:x="6171" fg:w="6"/><text x="55.6997%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="55.4497%" y="741" width="0.0539%" height="15" fill="rgb(251,196,23)" fg:x="6171" fg:w="6"/><text x="55.6997%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.05%)</title><rect x="55.4497%" y="725" width="0.0539%" height="15" fill="rgb(250,152,24)" fg:x="6171" fg:w="6"/><text x="55.6997%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.05%)</title><rect x="55.4497%" y="709" width="0.0539%" height="15" fill="rgb(209,150,17)" fg:x="6171" fg:w="6"/><text x="55.6997%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.05%)</title><rect x="55.4497%" y="693" width="0.0539%" height="15" fill="rgb(234,202,34)" fg:x="6171" fg:w="6"/><text x="55.6997%" y="703.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="55.4857%" y="677" width="0.0180%" height="15" fill="rgb(253,148,53)" fg:x="6175" fg:w="2"/><text x="55.7357%" y="687.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="55.4857%" y="661" width="0.0180%" height="15" fill="rgb(218,129,16)" fg:x="6175" fg:w="2"/><text x="55.7357%" y="671.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="55.4857%" y="645" width="0.0180%" height="15" fill="rgb(216,85,19)" fg:x="6175" fg:w="2"/><text x="55.7357%" y="655.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.07%)</title><rect x="55.5036%" y="789" width="0.0719%" height="15" fill="rgb(235,228,7)" fg:x="6177" fg:w="8"/><text x="55.7536%" y="799.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (2 samples, 0.02%)</title><rect x="55.5755%" y="789" width="0.0180%" height="15" fill="rgb(245,175,0)" fg:x="6185" fg:w="2"/><text x="55.8255%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4,456 samples, 40.04%)</title><rect x="15.5719%" y="805" width="40.0395%" height="15" fill="rgb(208,168,36)" fg:x="1733" fg:w="4456"/><text x="15.8219%" y="815.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (2 samples, 0.02%)</title><rect x="55.5935%" y="789" width="0.0180%" height="15" fill="rgb(246,171,24)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="799.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (2 samples, 0.02%)</title><rect x="55.5935%" y="773" width="0.0180%" height="15" fill="rgb(215,142,24)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="783.50"></text></g><g><title>alloc::collections::btree::mem::replace (2 samples, 0.02%)</title><rect x="55.5935%" y="757" width="0.0180%" height="15" fill="rgb(250,187,7)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="767.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (2 samples, 0.02%)</title><rect x="55.5935%" y="741" width="0.0180%" height="15" fill="rgb(228,66,33)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="751.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (2 samples, 0.02%)</title><rect x="55.5935%" y="725" width="0.0180%" height="15" fill="rgb(234,215,21)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (2 samples, 0.02%)</title><rect x="55.5935%" y="709" width="0.0180%" height="15" fill="rgb(222,191,20)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="719.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (2 samples, 0.02%)</title><rect x="55.5935%" y="693" width="0.0180%" height="15" fill="rgb(245,79,54)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.02%)</title><rect x="55.5935%" y="677" width="0.0180%" height="15" fill="rgb(240,10,37)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.02%)</title><rect x="55.5935%" y="661" width="0.0180%" height="15" fill="rgb(214,192,32)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="55.5935%" y="645" width="0.0180%" height="15" fill="rgb(209,36,54)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="55.5935%" y="629" width="0.0180%" height="15" fill="rgb(220,10,11)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="639.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="55.5935%" y="613" width="0.0180%" height="15" fill="rgb(221,106,17)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="623.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="55.5935%" y="597" width="0.0180%" height="15" fill="rgb(251,142,44)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="607.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="55.5935%" y="581" width="0.0180%" height="15" fill="rgb(238,13,15)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="591.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="55.5935%" y="565" width="0.0180%" height="15" fill="rgb(208,107,27)" fg:x="6187" fg:w="2"/><text x="55.8435%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.6205%" y="789" width="0.0180%" height="15" fill="rgb(205,136,37)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.6205%" y="773" width="0.0180%" height="15" fill="rgb(250,205,27)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="55.6205%" y="757" width="0.0180%" height="15" fill="rgb(210,80,43)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="55.6205%" y="741" width="0.0180%" height="15" fill="rgb(247,160,36)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="55.6205%" y="725" width="0.0180%" height="15" fill="rgb(234,13,49)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="735.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="55.6205%" y="709" width="0.0180%" height="15" fill="rgb(234,122,0)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="55.6205%" y="693" width="0.0180%" height="15" fill="rgb(207,146,38)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="55.6205%" y="677" width="0.0180%" height="15" fill="rgb(207,177,25)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="55.6205%" y="661" width="0.0180%" height="15" fill="rgb(211,178,42)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="671.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="55.6205%" y="645" width="0.0180%" height="15" fill="rgb(230,69,54)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="655.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="55.6205%" y="629" width="0.0180%" height="15" fill="rgb(214,135,41)" fg:x="6190" fg:w="2"/><text x="55.8705%" y="639.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (4,461 samples, 40.08%)</title><rect x="15.5719%" y="837" width="40.0845%" height="15" fill="rgb(237,67,25)" fg:x="1733" fg:w="4461"/><text x="15.8219%" y="847.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (4,461 samples, 40.08%)</title><rect x="15.5719%" y="821" width="40.0845%" height="15" fill="rgb(222,189,50)" fg:x="1733" fg:w="4461"/><text x="15.8219%" y="831.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::..</text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="55.6205%" y="805" width="0.0359%" height="15" fill="rgb(245,148,34)" fg:x="6190" fg:w="4"/><text x="55.8705%" y="815.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.6384%" y="789" width="0.0180%" height="15" fill="rgb(222,29,6)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.6384%" y="773" width="0.0180%" height="15" fill="rgb(221,189,43)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="55.6384%" y="757" width="0.0180%" height="15" fill="rgb(207,36,27)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="767.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="55.6384%" y="741" width="0.0180%" height="15" fill="rgb(217,90,24)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="751.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="55.6384%" y="725" width="0.0180%" height="15" fill="rgb(224,66,35)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="735.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="55.6384%" y="709" width="0.0180%" height="15" fill="rgb(221,13,50)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="719.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="55.6384%" y="693" width="0.0180%" height="15" fill="rgb(236,68,49)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="703.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="55.6384%" y="677" width="0.0180%" height="15" fill="rgb(229,146,28)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="55.6384%" y="661" width="0.0180%" height="15" fill="rgb(225,31,38)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="55.6384%" y="645" width="0.0180%" height="15" fill="rgb(250,208,3)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="55.6384%" y="629" width="0.0180%" height="15" fill="rgb(246,54,23)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="639.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="55.6384%" y="613" width="0.0180%" height="15" fill="rgb(243,76,11)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="623.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="55.6384%" y="597" width="0.0180%" height="15" fill="rgb(245,21,50)" fg:x="6192" fg:w="2"/><text x="55.8884%" y="607.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="55.6564%" y="837" width="0.0629%" height="15" fill="rgb(228,9,43)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="847.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="55.6564%" y="821" width="0.0629%" height="15" fill="rgb(208,100,47)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="55.6564%" y="805" width="0.0629%" height="15" fill="rgb(232,26,8)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="815.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.06%)</title><rect x="55.6564%" y="789" width="0.0629%" height="15" fill="rgb(216,166,38)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="799.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.06%)</title><rect x="55.6564%" y="773" width="0.0629%" height="15" fill="rgb(251,202,51)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="783.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.06%)</title><rect x="55.6564%" y="757" width="0.0629%" height="15" fill="rgb(254,216,34)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.06%)</title><rect x="55.6564%" y="741" width="0.0629%" height="15" fill="rgb(251,32,27)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.06%)</title><rect x="55.6564%" y="725" width="0.0629%" height="15" fill="rgb(208,127,28)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.06%)</title><rect x="55.6564%" y="709" width="0.0629%" height="15" fill="rgb(224,137,22)" fg:x="6194" fg:w="7"/><text x="55.9064%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="55.6654%" y="693" width="0.0539%" height="15" fill="rgb(254,70,32)" fg:x="6195" fg:w="6"/><text x="55.9154%" y="703.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="55.6654%" y="677" width="0.0539%" height="15" fill="rgb(229,75,37)" fg:x="6195" fg:w="6"/><text x="55.9154%" y="687.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="55.6654%" y="661" width="0.0539%" height="15" fill="rgb(252,64,23)" fg:x="6195" fg:w="6"/><text x="55.9154%" y="671.50"></text></g><g><title>__GI___libc_malloc (6 samples, 0.05%)</title><rect x="55.6654%" y="645" width="0.0539%" height="15" fill="rgb(232,162,48)" fg:x="6195" fg:w="6"/><text x="55.9154%" y="655.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="55.6923%" y="629" width="0.0270%" height="15" fill="rgb(246,160,12)" fg:x="6198" fg:w="3"/><text x="55.9423%" y="639.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (3 samples, 0.03%)</title><rect x="55.7193%" y="837" width="0.0270%" height="15" fill="rgb(247,166,0)" fg:x="6201" fg:w="3"/><text x="55.9693%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.03%)</title><rect x="55.7193%" y="821" width="0.0270%" height="15" fill="rgb(249,219,21)" fg:x="6201" fg:w="3"/><text x="55.9693%" y="831.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.03%)</title><rect x="55.7193%" y="805" width="0.0270%" height="15" fill="rgb(205,209,3)" fg:x="6201" fg:w="3"/><text x="55.9693%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.03%)</title><rect x="55.7193%" y="789" width="0.0270%" height="15" fill="rgb(243,44,1)" fg:x="6201" fg:w="3"/><text x="55.9693%" y="799.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut (2 samples, 0.02%)</title><rect x="55.7462%" y="837" width="0.0180%" height="15" fill="rgb(206,159,16)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.02%)</title><rect x="55.7462%" y="821" width="0.0180%" height="15" fill="rgb(244,77,30)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="831.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.02%)</title><rect x="55.7462%" y="805" width="0.0180%" height="15" fill="rgb(218,69,12)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.02%)</title><rect x="55.7462%" y="789" width="0.0180%" height="15" fill="rgb(212,87,7)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="799.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="55.7462%" y="773" width="0.0180%" height="15" fill="rgb(245,114,25)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="55.7462%" y="757" width="0.0180%" height="15" fill="rgb(210,61,42)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="767.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (2 samples, 0.02%)</title><rect x="55.7462%" y="741" width="0.0180%" height="15" fill="rgb(211,52,33)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="751.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.02%)</title><rect x="55.7462%" y="725" width="0.0180%" height="15" fill="rgb(234,58,33)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="735.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.02%)</title><rect x="55.7462%" y="709" width="0.0180%" height="15" fill="rgb(220,115,36)" fg:x="6204" fg:w="2"/><text x="55.9962%" y="719.50"></text></g><g><title>checked_request2size (11 samples, 0.10%)</title><rect x="57.3097%" y="517" width="0.0988%" height="15" fill="rgb(243,153,54)" fg:x="6378" fg:w="11"/><text x="57.5597%" y="527.50"></text></g><g><title>tcache_get (5 samples, 0.04%)</title><rect x="57.4086%" y="517" width="0.0449%" height="15" fill="rgb(251,47,18)" fg:x="6389" fg:w="5"/><text x="57.6586%" y="527.50"></text></g><g><title>tcache_get_n (5 samples, 0.04%)</title><rect x="57.4086%" y="501" width="0.0449%" height="15" fill="rgb(242,102,42)" fg:x="6389" fg:w="5"/><text x="57.6586%" y="511.50"></text></g><g><title>_int_malloc (137 samples, 1.23%)</title><rect x="56.3932%" y="533" width="1.2310%" height="15" fill="rgb(234,31,38)" fg:x="6276" fg:w="137"/><text x="56.6432%" y="543.50"></text></g><g><title>unlink_chunk (18 samples, 0.16%)</title><rect x="57.4625%" y="517" width="0.1617%" height="15" fill="rgb(221,117,51)" fg:x="6395" fg:w="18"/><text x="57.7125%" y="527.50"></text></g><g><title>arena_for_chunk (5 samples, 0.04%)</title><rect x="57.6242%" y="533" width="0.0449%" height="15" fill="rgb(212,20,18)" fg:x="6413" fg:w="5"/><text x="57.8742%" y="543.50"></text></g><g><title>__GI___libc_malloc (175 samples, 1.57%)</title><rect x="56.1596%" y="549" width="1.5725%" height="15" fill="rgb(245,133,36)" fg:x="6250" fg:w="175"/><text x="56.4096%" y="559.50"></text></g><g><title>checked_request2size (7 samples, 0.06%)</title><rect x="57.6692%" y="533" width="0.0629%" height="15" fill="rgb(212,6,19)" fg:x="6418" fg:w="7"/><text x="57.9192%" y="543.50"></text></g><g><title>__rdl_alloc (8 samples, 0.07%)</title><rect x="57.7321%" y="549" width="0.0719%" height="15" fill="rgb(218,1,36)" fg:x="6425" fg:w="8"/><text x="57.9821%" y="559.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.07%)</title><rect x="57.7321%" y="533" width="0.0719%" height="15" fill="rgb(246,84,54)" fg:x="6425" fg:w="8"/><text x="57.9821%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (198 samples, 1.78%)</title><rect x="56.0518%" y="645" width="1.7791%" height="15" fill="rgb(242,110,6)" fg:x="6238" fg:w="198"/><text x="56.3018%" y="655.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (198 samples, 1.78%)</title><rect x="56.0518%" y="629" width="1.7791%" height="15" fill="rgb(214,47,5)" fg:x="6238" fg:w="198"/><text x="56.3018%" y="639.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (198 samples, 1.78%)</title><rect x="56.0518%" y="613" width="1.7791%" height="15" fill="rgb(218,159,25)" fg:x="6238" fg:w="198"/><text x="56.3018%" y="623.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (191 samples, 1.72%)</title><rect x="56.1147%" y="597" width="1.7162%" height="15" fill="rgb(215,211,28)" fg:x="6245" fg:w="191"/><text x="56.3647%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (191 samples, 1.72%)</title><rect x="56.1147%" y="581" width="1.7162%" height="15" fill="rgb(238,59,32)" fg:x="6245" fg:w="191"/><text x="56.3647%" y="591.50"></text></g><g><title>alloc::alloc::alloc (191 samples, 1.72%)</title><rect x="56.1147%" y="565" width="1.7162%" height="15" fill="rgb(226,82,3)" fg:x="6245" fg:w="191"/><text x="56.3647%" y="575.50"></text></g><g><title>__rust_alloc (3 samples, 0.03%)</title><rect x="57.8039%" y="549" width="0.0270%" height="15" fill="rgb(240,164,32)" fg:x="6433" fg:w="3"/><text x="58.0539%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (229 samples, 2.06%)</title><rect x="55.8810%" y="725" width="2.0577%" height="15" fill="rgb(232,46,7)" fg:x="6219" fg:w="229"/><text x="56.1310%" y="735.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (210 samples, 1.89%)</title><rect x="56.0518%" y="709" width="1.8870%" height="15" fill="rgb(229,129,53)" fg:x="6238" fg:w="210"/><text x="56.3018%" y="719.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (210 samples, 1.89%)</title><rect x="56.0518%" y="693" width="1.8870%" height="15" fill="rgb(234,188,29)" fg:x="6238" fg:w="210"/><text x="56.3018%" y="703.50">a..</text></g><g><title>alloc::slice::hack::to_vec (210 samples, 1.89%)</title><rect x="56.0518%" y="677" width="1.8870%" height="15" fill="rgb(246,141,4)" fg:x="6238" fg:w="210"/><text x="56.3018%" y="687.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (210 samples, 1.89%)</title><rect x="56.0518%" y="661" width="1.8870%" height="15" fill="rgb(229,23,39)" fg:x="6238" fg:w="210"/><text x="56.3018%" y="671.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (12 samples, 0.11%)</title><rect x="57.8309%" y="645" width="0.1078%" height="15" fill="rgb(206,12,3)" fg:x="6436" fg:w="12"/><text x="58.0809%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (12 samples, 0.11%)</title><rect x="57.8309%" y="629" width="0.1078%" height="15" fill="rgb(252,226,20)" fg:x="6436" fg:w="12"/><text x="58.0809%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (12 samples, 0.11%)</title><rect x="57.8309%" y="613" width="0.1078%" height="15" fill="rgb(216,123,35)" fg:x="6436" fg:w="12"/><text x="58.0809%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (6 samples, 0.05%)</title><rect x="57.9387%" y="725" width="0.0539%" height="15" fill="rgb(212,68,40)" fg:x="6448" fg:w="6"/><text x="58.1887%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::key_area_mut (5 samples, 0.04%)</title><rect x="57.9926%" y="709" width="0.0449%" height="15" fill="rgb(254,125,32)" fg:x="6454" fg:w="5"/><text x="58.2426%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (5 samples, 0.04%)</title><rect x="57.9926%" y="693" width="0.0449%" height="15" fill="rgb(253,97,22)" fg:x="6454" fg:w="5"/><text x="58.2426%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (5 samples, 0.04%)</title><rect x="57.9926%" y="677" width="0.0449%" height="15" fill="rgb(241,101,14)" fg:x="6454" fg:w="5"/><text x="58.2426%" y="687.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (5 samples, 0.04%)</title><rect x="57.9926%" y="661" width="0.0449%" height="15" fill="rgb(238,103,29)" fg:x="6454" fg:w="5"/><text x="58.2426%" y="671.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (89 samples, 0.80%)</title><rect x="57.9926%" y="725" width="0.7997%" height="15" fill="rgb(233,195,47)" fg:x="6454" fg:w="89"/><text x="58.2426%" y="735.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (84 samples, 0.75%)</title><rect x="58.0376%" y="709" width="0.7548%" height="15" fill="rgb(246,218,30)" fg:x="6459" fg:w="84"/><text x="58.2876%" y="719.50"></text></g><g><title>tcache_put (4 samples, 0.04%)</title><rect x="59.1518%" y="565" width="0.0359%" height="15" fill="rgb(219,145,47)" fg:x="6583" fg:w="4"/><text x="59.4018%" y="575.50"></text></g><g><title>_int_malloc (45 samples, 0.40%)</title><rect x="58.8193%" y="581" width="0.4043%" height="15" fill="rgb(243,12,26)" fg:x="6546" fg:w="45"/><text x="59.0693%" y="591.50"></text></g><g><title>unlink_chunk (4 samples, 0.04%)</title><rect x="59.1877%" y="565" width="0.0359%" height="15" fill="rgb(214,87,16)" fg:x="6587" fg:w="4"/><text x="59.4377%" y="575.50"></text></g><g><title>__GI___libc_malloc (49 samples, 0.44%)</title><rect x="58.8013%" y="597" width="0.4403%" height="15" fill="rgb(208,99,42)" fg:x="6544" fg:w="49"/><text x="59.0513%" y="607.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="59.2416%" y="597" width="0.0180%" height="15" fill="rgb(253,99,2)" fg:x="6593" fg:w="2"/><text x="59.4916%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="59.2416%" y="581" width="0.0180%" height="15" fill="rgb(220,168,23)" fg:x="6593" fg:w="2"/><text x="59.4916%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (389 samples, 3.50%)</title><rect x="55.7822%" y="741" width="3.4954%" height="15" fill="rgb(242,38,24)" fg:x="6208" fg:w="389"/><text x="56.0322%" y="751.50">&lt;al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (54 samples, 0.49%)</title><rect x="58.7923%" y="725" width="0.4852%" height="15" fill="rgb(225,182,9)" fg:x="6543" fg:w="54"/><text x="59.0423%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (54 samples, 0.49%)</title><rect x="58.7923%" y="709" width="0.4852%" height="15" fill="rgb(243,178,37)" fg:x="6543" fg:w="54"/><text x="59.0423%" y="719.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (54 samples, 0.49%)</title><rect x="58.7923%" y="693" width="0.4852%" height="15" fill="rgb(232,139,19)" fg:x="6543" fg:w="54"/><text x="59.0423%" y="703.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (54 samples, 0.49%)</title><rect x="58.7923%" y="677" width="0.4852%" height="15" fill="rgb(225,201,24)" fg:x="6543" fg:w="54"/><text x="59.0423%" y="687.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (54 samples, 0.49%)</title><rect x="58.7923%" y="661" width="0.4852%" height="15" fill="rgb(221,47,46)" fg:x="6543" fg:w="54"/><text x="59.0423%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (54 samples, 0.49%)</title><rect x="58.7923%" y="645" width="0.4852%" height="15" fill="rgb(249,23,13)" fg:x="6543" fg:w="54"/><text x="59.0423%" y="655.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (54 samples, 0.49%)</title><rect x="58.7923%" y="629" width="0.4852%" height="15" fill="rgb(219,9,5)" fg:x="6543" fg:w="54"/><text x="59.0423%" y="639.50"></text></g><g><title>alloc::alloc::alloc (54 samples, 0.49%)</title><rect x="58.7923%" y="613" width="0.4852%" height="15" fill="rgb(254,171,16)" fg:x="6543" fg:w="54"/><text x="59.0423%" y="623.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="59.2596%" y="597" width="0.0180%" height="15" fill="rgb(230,171,20)" fg:x="6595" fg:w="2"/><text x="59.5096%" y="607.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="59.3944%" y="533" width="0.0180%" height="15" fill="rgb(210,71,41)" fg:x="6610" fg:w="2"/><text x="59.6444%" y="543.50"></text></g><g><title>_int_malloc (10 samples, 0.09%)</title><rect x="59.3315%" y="549" width="0.0899%" height="15" fill="rgb(206,173,20)" fg:x="6603" fg:w="10"/><text x="59.5815%" y="559.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.12%)</title><rect x="59.3135%" y="565" width="0.1168%" height="15" fill="rgb(233,88,34)" fg:x="6601" fg:w="13"/><text x="59.5635%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 0.16%)</title><rect x="59.2865%" y="661" width="0.1617%" height="15" fill="rgb(223,209,46)" fg:x="6598" fg:w="18"/><text x="59.5365%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 0.16%)</title><rect x="59.2865%" y="645" width="0.1617%" height="15" fill="rgb(250,43,18)" fg:x="6598" fg:w="18"/><text x="59.5365%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 0.16%)</title><rect x="59.2865%" y="629" width="0.1617%" height="15" fill="rgb(208,13,10)" fg:x="6598" fg:w="18"/><text x="59.5365%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.15%)</title><rect x="59.2955%" y="613" width="0.1528%" height="15" fill="rgb(212,200,36)" fg:x="6599" fg:w="17"/><text x="59.5455%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.15%)</title><rect x="59.2955%" y="597" width="0.1528%" height="15" fill="rgb(225,90,30)" fg:x="6599" fg:w="17"/><text x="59.5455%" y="607.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.15%)</title><rect x="59.2955%" y="581" width="0.1528%" height="15" fill="rgb(236,182,39)" fg:x="6599" fg:w="17"/><text x="59.5455%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (20 samples, 0.18%)</title><rect x="59.2776%" y="741" width="0.1797%" height="15" fill="rgb(212,144,35)" fg:x="6597" fg:w="20"/><text x="59.5276%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.17%)</title><rect x="59.2865%" y="725" width="0.1707%" height="15" fill="rgb(228,63,44)" fg:x="6598" fg:w="19"/><text x="59.5365%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.17%)</title><rect x="59.2865%" y="709" width="0.1707%" height="15" fill="rgb(228,109,6)" fg:x="6598" fg:w="19"/><text x="59.5365%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.17%)</title><rect x="59.2865%" y="693" width="0.1707%" height="15" fill="rgb(238,117,24)" fg:x="6598" fg:w="19"/><text x="59.5365%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.17%)</title><rect x="59.2865%" y="677" width="0.1707%" height="15" fill="rgb(242,26,26)" fg:x="6598" fg:w="19"/><text x="59.5365%" y="687.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.02%)</title><rect x="59.4663%" y="741" width="0.0180%" height="15" fill="rgb(221,92,48)" fg:x="6618" fg:w="2"/><text x="59.7163%" y="751.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (2 samples, 0.02%)</title><rect x="59.4663%" y="725" width="0.0180%" height="15" fill="rgb(209,209,32)" fg:x="6618" fg:w="2"/><text x="59.7163%" y="735.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (2 samples, 0.02%)</title><rect x="59.4663%" y="709" width="0.0180%" height="15" fill="rgb(221,70,22)" fg:x="6618" fg:w="2"/><text x="59.7163%" y="719.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="59.4663%" y="693" width="0.0180%" height="15" fill="rgb(248,145,5)" fg:x="6618" fg:w="2"/><text x="59.7163%" y="703.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (2 samples, 0.02%)</title><rect x="59.4842%" y="741" width="0.0180%" height="15" fill="rgb(226,116,26)" fg:x="6620" fg:w="2"/><text x="59.7342%" y="751.50"></text></g><g><title>_int_malloc (10 samples, 0.09%)</title><rect x="59.5022%" y="533" width="0.0899%" height="15" fill="rgb(244,5,17)" fg:x="6622" fg:w="10"/><text x="59.7522%" y="543.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (11 samples, 0.10%)</title><rect x="59.5022%" y="741" width="0.0988%" height="15" fill="rgb(252,159,33)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="751.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (11 samples, 0.10%)</title><rect x="59.5022%" y="725" width="0.0988%" height="15" fill="rgb(206,71,0)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="735.50"></text></g><g><title>alloc::collections::btree::mem::replace (11 samples, 0.10%)</title><rect x="59.5022%" y="709" width="0.0988%" height="15" fill="rgb(233,118,54)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="719.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (11 samples, 0.10%)</title><rect x="59.5022%" y="693" width="0.0988%" height="15" fill="rgb(234,83,48)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="703.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (11 samples, 0.10%)</title><rect x="59.5022%" y="677" width="0.0988%" height="15" fill="rgb(228,3,54)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="687.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (11 samples, 0.10%)</title><rect x="59.5022%" y="661" width="0.0988%" height="15" fill="rgb(226,155,13)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="671.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (11 samples, 0.10%)</title><rect x="59.5022%" y="645" width="0.0988%" height="15" fill="rgb(241,28,37)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="655.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (11 samples, 0.10%)</title><rect x="59.5022%" y="629" width="0.0988%" height="15" fill="rgb(233,93,10)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (11 samples, 0.10%)</title><rect x="59.5022%" y="613" width="0.0988%" height="15" fill="rgb(225,113,19)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.10%)</title><rect x="59.5022%" y="597" width="0.0988%" height="15" fill="rgb(241,2,18)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.10%)</title><rect x="59.5022%" y="581" width="0.0988%" height="15" fill="rgb(228,207,21)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="591.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.10%)</title><rect x="59.5022%" y="565" width="0.0988%" height="15" fill="rgb(213,211,35)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="575.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.10%)</title><rect x="59.5022%" y="549" width="0.0988%" height="15" fill="rgb(209,83,10)" fg:x="6622" fg:w="11"/><text x="59.7522%" y="559.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (428 samples, 3.85%)</title><rect x="55.7642%" y="757" width="3.8458%" height="15" fill="rgb(209,164,1)" fg:x="6206" fg:w="428"/><text x="56.0142%" y="767.50">&lt;all..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (433 samples, 3.89%)</title><rect x="55.7642%" y="805" width="3.8907%" height="15" fill="rgb(213,184,43)" fg:x="6206" fg:w="433"/><text x="56.0142%" y="815.50">&lt;all..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (433 samples, 3.89%)</title><rect x="55.7642%" y="789" width="3.8907%" height="15" fill="rgb(231,61,34)" fg:x="6206" fg:w="433"/><text x="56.0142%" y="799.50">&lt;all..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (433 samples, 3.89%)</title><rect x="55.7642%" y="773" width="3.8907%" height="15" fill="rgb(235,75,3)" fg:x="6206" fg:w="433"/><text x="56.0142%" y="783.50">&lt;all..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="59.6100%" y="757" width="0.0449%" height="15" fill="rgb(220,106,47)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="59.6100%" y="741" width="0.0449%" height="15" fill="rgb(210,196,33)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.04%)</title><rect x="59.6100%" y="725" width="0.0449%" height="15" fill="rgb(229,154,42)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.04%)</title><rect x="59.6100%" y="709" width="0.0449%" height="15" fill="rgb(228,114,26)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.04%)</title><rect x="59.6100%" y="693" width="0.0449%" height="15" fill="rgb(208,144,1)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="59.6100%" y="677" width="0.0449%" height="15" fill="rgb(239,112,37)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="59.6100%" y="661" width="0.0449%" height="15" fill="rgb(210,96,50)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.04%)</title><rect x="59.6100%" y="645" width="0.0449%" height="15" fill="rgb(222,178,2)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="59.6100%" y="629" width="0.0449%" height="15" fill="rgb(226,74,18)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="59.6100%" y="613" width="0.0449%" height="15" fill="rgb(225,67,54)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="623.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="59.6100%" y="597" width="0.0449%" height="15" fill="rgb(251,92,32)" fg:x="6634" fg:w="5"/><text x="59.8600%" y="607.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="59.6190%" y="581" width="0.0359%" height="15" fill="rgb(228,149,22)" fg:x="6635" fg:w="4"/><text x="59.8690%" y="591.50"></text></g><g><title>alloc_perturb (2 samples, 0.02%)</title><rect x="60.7242%" y="501" width="0.0180%" height="15" fill="rgb(243,54,13)" fg:x="6758" fg:w="2"/><text x="60.9742%" y="511.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="60.7422%" y="501" width="0.0180%" height="15" fill="rgb(243,180,28)" fg:x="6760" fg:w="2"/><text x="60.9922%" y="511.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="60.7602%" y="501" width="0.0180%" height="15" fill="rgb(208,167,24)" fg:x="6762" fg:w="2"/><text x="61.0102%" y="511.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="60.7602%" y="485" width="0.0180%" height="15" fill="rgb(245,73,45)" fg:x="6762" fg:w="2"/><text x="61.0102%" y="495.50"></text></g><g><title>tcache_put (10 samples, 0.09%)</title><rect x="60.7781%" y="501" width="0.0899%" height="15" fill="rgb(237,203,48)" fg:x="6764" fg:w="10"/><text x="61.0281%" y="511.50"></text></g><g><title>_int_malloc (107 samples, 0.96%)</title><rect x="59.9784%" y="517" width="0.9615%" height="15" fill="rgb(211,197,16)" fg:x="6675" fg:w="107"/><text x="60.2284%" y="527.50"></text></g><g><title>unlink_chunk (8 samples, 0.07%)</title><rect x="60.8680%" y="501" width="0.0719%" height="15" fill="rgb(243,99,51)" fg:x="6774" fg:w="8"/><text x="61.1180%" y="511.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="60.9399%" y="517" width="0.0180%" height="15" fill="rgb(215,123,29)" fg:x="6782" fg:w="2"/><text x="61.1899%" y="527.50"></text></g><g><title>checked_request2size (9 samples, 0.08%)</title><rect x="60.9579%" y="517" width="0.0809%" height="15" fill="rgb(239,186,37)" fg:x="6784" fg:w="9"/><text x="61.2079%" y="527.50"></text></g><g><title>__GI___libc_malloc (142 samples, 1.28%)</title><rect x="59.8347%" y="533" width="1.2759%" height="15" fill="rgb(252,136,39)" fg:x="6659" fg:w="142"/><text x="60.0847%" y="543.50"></text></g><g><title>tcache_get (8 samples, 0.07%)</title><rect x="61.0387%" y="517" width="0.0719%" height="15" fill="rgb(223,213,32)" fg:x="6793" fg:w="8"/><text x="61.2887%" y="527.50"></text></g><g><title>tcache_get_n (8 samples, 0.07%)</title><rect x="61.0387%" y="501" width="0.0719%" height="15" fill="rgb(233,115,5)" fg:x="6793" fg:w="8"/><text x="61.2887%" y="511.50"></text></g><g><title>__rdl_alloc (9 samples, 0.08%)</title><rect x="61.1106%" y="533" width="0.0809%" height="15" fill="rgb(207,226,44)" fg:x="6801" fg:w="9"/><text x="61.3606%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (9 samples, 0.08%)</title><rect x="61.1106%" y="517" width="0.0809%" height="15" fill="rgb(208,126,0)" fg:x="6801" fg:w="9"/><text x="61.3606%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (171 samples, 1.54%)</title><rect x="59.7448%" y="629" width="1.5365%" height="15" fill="rgb(244,66,21)" fg:x="6649" fg:w="171"/><text x="59.9948%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (171 samples, 1.54%)</title><rect x="59.7448%" y="613" width="1.5365%" height="15" fill="rgb(222,97,12)" fg:x="6649" fg:w="171"/><text x="59.9948%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (171 samples, 1.54%)</title><rect x="59.7448%" y="597" width="1.5365%" height="15" fill="rgb(219,213,19)" fg:x="6649" fg:w="171"/><text x="59.9948%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (164 samples, 1.47%)</title><rect x="59.8077%" y="581" width="1.4736%" height="15" fill="rgb(252,169,30)" fg:x="6656" fg:w="164"/><text x="60.0577%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (164 samples, 1.47%)</title><rect x="59.8077%" y="565" width="1.4736%" height="15" fill="rgb(206,32,51)" fg:x="6656" fg:w="164"/><text x="60.0577%" y="575.50"></text></g><g><title>alloc::alloc::alloc (164 samples, 1.47%)</title><rect x="59.8077%" y="549" width="1.4736%" height="15" fill="rgb(250,172,42)" fg:x="6656" fg:w="164"/><text x="60.0577%" y="559.50"></text></g><g><title>__rust_alloc (10 samples, 0.09%)</title><rect x="61.1915%" y="533" width="0.0899%" height="15" fill="rgb(209,34,43)" fg:x="6810" fg:w="10"/><text x="61.4415%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (191 samples, 1.72%)</title><rect x="59.6909%" y="709" width="1.7162%" height="15" fill="rgb(223,11,35)" fg:x="6643" fg:w="191"/><text x="59.9409%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (185 samples, 1.66%)</title><rect x="59.7448%" y="693" width="1.6623%" height="15" fill="rgb(251,219,26)" fg:x="6649" fg:w="185"/><text x="59.9948%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (185 samples, 1.66%)</title><rect x="59.7448%" y="677" width="1.6623%" height="15" fill="rgb(231,119,3)" fg:x="6649" fg:w="185"/><text x="59.9948%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (185 samples, 1.66%)</title><rect x="59.7448%" y="661" width="1.6623%" height="15" fill="rgb(216,97,11)" fg:x="6649" fg:w="185"/><text x="59.9948%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (185 samples, 1.66%)</title><rect x="59.7448%" y="645" width="1.6623%" height="15" fill="rgb(223,59,9)" fg:x="6649" fg:w="185"/><text x="59.9948%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.13%)</title><rect x="61.2813%" y="629" width="0.1258%" height="15" fill="rgb(233,93,31)" fg:x="6820" fg:w="14"/><text x="61.5313%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.13%)</title><rect x="61.2813%" y="613" width="0.1258%" height="15" fill="rgb(239,81,33)" fg:x="6820" fg:w="14"/><text x="61.5313%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.13%)</title><rect x="61.2813%" y="597" width="0.1258%" height="15" fill="rgb(213,120,34)" fg:x="6820" fg:w="14"/><text x="61.5313%" y="607.50"></text></g><g><title>checked_request2size (19 samples, 0.17%)</title><rect x="64.3544%" y="485" width="0.1707%" height="15" fill="rgb(243,49,53)" fg:x="7162" fg:w="19"/><text x="64.6044%" y="495.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="64.5251%" y="485" width="0.0180%" height="15" fill="rgb(247,216,33)" fg:x="7181" fg:w="2"/><text x="64.7751%" y="495.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="64.5251%" y="469" width="0.0180%" height="15" fill="rgb(226,26,14)" fg:x="7181" fg:w="2"/><text x="64.7751%" y="479.50"></text></g><g><title>tcache_put (20 samples, 0.18%)</title><rect x="64.5431%" y="485" width="0.1797%" height="15" fill="rgb(215,49,53)" fg:x="7183" fg:w="20"/><text x="64.7931%" y="495.50"></text></g><g><title>_int_malloc (267 samples, 2.40%)</title><rect x="62.5034%" y="501" width="2.3991%" height="15" fill="rgb(245,162,40)" fg:x="6956" fg:w="267"/><text x="62.7534%" y="511.50">_i..</text></g><g><title>unlink_chunk (20 samples, 0.18%)</title><rect x="64.7228%" y="485" width="0.1797%" height="15" fill="rgb(229,68,17)" fg:x="7203" fg:w="20"/><text x="64.9728%" y="495.50"></text></g><g><title>arena_for_chunk (5 samples, 0.04%)</title><rect x="64.9025%" y="501" width="0.0449%" height="15" fill="rgb(213,182,10)" fg:x="7223" fg:w="5"/><text x="65.1525%" y="511.50"></text></g><g><title>checked_request2size (16 samples, 0.14%)</title><rect x="64.9474%" y="501" width="0.1438%" height="15" fill="rgb(245,125,30)" fg:x="7228" fg:w="16"/><text x="65.1974%" y="511.50"></text></g><g><title>__GI___libc_malloc (318 samples, 2.86%)</title><rect x="62.3057%" y="517" width="2.8574%" height="15" fill="rgb(232,202,2)" fg:x="6934" fg:w="318"/><text x="62.5557%" y="527.50">__..</text></g><g><title>tcache_get (8 samples, 0.07%)</title><rect x="65.0912%" y="501" width="0.0719%" height="15" fill="rgb(237,140,51)" fg:x="7244" fg:w="8"/><text x="65.3412%" y="511.50"></text></g><g><title>tcache_get_n (8 samples, 0.07%)</title><rect x="65.0912%" y="485" width="0.0719%" height="15" fill="rgb(236,157,25)" fg:x="7244" fg:w="8"/><text x="65.3412%" y="495.50"></text></g><g><title>__rdl_alloc (18 samples, 0.16%)</title><rect x="65.1631%" y="517" width="0.1617%" height="15" fill="rgb(219,209,0)" fg:x="7252" fg:w="18"/><text x="65.4131%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 0.16%)</title><rect x="65.1631%" y="501" width="0.1617%" height="15" fill="rgb(240,116,54)" fg:x="7252" fg:w="18"/><text x="65.4131%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (366 samples, 3.29%)</title><rect x="62.1170%" y="613" width="3.2887%" height="15" fill="rgb(216,10,36)" fg:x="6913" fg:w="366"/><text x="62.3670%" y="623.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (366 samples, 3.29%)</title><rect x="62.1170%" y="597" width="3.2887%" height="15" fill="rgb(222,72,44)" fg:x="6913" fg:w="366"/><text x="62.3670%" y="607.50">all..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (366 samples, 3.29%)</title><rect x="62.1170%" y="581" width="3.2887%" height="15" fill="rgb(232,159,9)" fg:x="6913" fg:w="366"/><text x="62.3670%" y="591.50">all..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (351 samples, 3.15%)</title><rect x="62.2518%" y="565" width="3.1539%" height="15" fill="rgb(210,39,32)" fg:x="6928" fg:w="351"/><text x="62.5018%" y="575.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (351 samples, 3.15%)</title><rect x="62.2518%" y="549" width="3.1539%" height="15" fill="rgb(216,194,45)" fg:x="6928" fg:w="351"/><text x="62.5018%" y="559.50">all..</text></g><g><title>alloc::alloc::alloc (351 samples, 3.15%)</title><rect x="62.2518%" y="533" width="3.1539%" height="15" fill="rgb(218,18,35)" fg:x="6928" fg:w="351"/><text x="62.5018%" y="543.50">all..</text></g><g><title>__rust_alloc (9 samples, 0.08%)</title><rect x="65.3248%" y="517" width="0.0809%" height="15" fill="rgb(207,83,51)" fg:x="7270" fg:w="9"/><text x="65.5748%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (400 samples, 3.59%)</title><rect x="61.9912%" y="693" width="3.5942%" height="15" fill="rgb(225,63,43)" fg:x="6899" fg:w="400"/><text x="62.2412%" y="703.50">&lt;all..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (386 samples, 3.47%)</title><rect x="62.1170%" y="677" width="3.4684%" height="15" fill="rgb(207,57,36)" fg:x="6913" fg:w="386"/><text x="62.3670%" y="687.50">&lt;al..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (386 samples, 3.47%)</title><rect x="62.1170%" y="661" width="3.4684%" height="15" fill="rgb(216,99,33)" fg:x="6913" fg:w="386"/><text x="62.3670%" y="671.50">all..</text></g><g><title>alloc::slice::hack::to_vec (386 samples, 3.47%)</title><rect x="62.1170%" y="645" width="3.4684%" height="15" fill="rgb(225,42,16)" fg:x="6913" fg:w="386"/><text x="62.3670%" y="655.50">all..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (386 samples, 3.47%)</title><rect x="62.1170%" y="629" width="3.4684%" height="15" fill="rgb(220,201,45)" fg:x="6913" fg:w="386"/><text x="62.3670%" y="639.50">&lt;T ..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (20 samples, 0.18%)</title><rect x="65.4057%" y="613" width="0.1797%" height="15" fill="rgb(225,33,4)" fg:x="7279" fg:w="20"/><text x="65.6557%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 0.18%)</title><rect x="65.4057%" y="597" width="0.1797%" height="15" fill="rgb(224,33,50)" fg:x="7279" fg:w="20"/><text x="65.6557%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (20 samples, 0.18%)</title><rect x="65.4057%" y="581" width="0.1797%" height="15" fill="rgb(246,198,51)" fg:x="7279" fg:w="20"/><text x="65.6557%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="65.5854%" y="677" width="0.0180%" height="15" fill="rgb(205,22,4)" fg:x="7299" fg:w="2"/><text x="65.8354%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.24%)</title><rect x="65.5854%" y="693" width="0.2426%" height="15" fill="rgb(206,3,8)" fg:x="7299" fg:w="27"/><text x="65.8354%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (25 samples, 0.22%)</title><rect x="65.6034%" y="677" width="0.2246%" height="15" fill="rgb(251,23,15)" fg:x="7301" fg:w="25"/><text x="65.8534%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (25 samples, 0.22%)</title><rect x="65.6034%" y="661" width="0.2246%" height="15" fill="rgb(252,88,28)" fg:x="7301" fg:w="25"/><text x="65.8534%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (25 samples, 0.22%)</title><rect x="65.6034%" y="645" width="0.2246%" height="15" fill="rgb(212,127,14)" fg:x="7301" fg:w="25"/><text x="65.8534%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.14%)</title><rect x="65.6842%" y="629" width="0.1438%" height="15" fill="rgb(247,145,37)" fg:x="7310" fg:w="16"/><text x="65.9342%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (9 samples, 0.08%)</title><rect x="65.7471%" y="613" width="0.0809%" height="15" fill="rgb(209,117,53)" fg:x="7317" fg:w="9"/><text x="65.9971%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (9 samples, 0.08%)</title><rect x="65.7471%" y="597" width="0.0809%" height="15" fill="rgb(212,90,42)" fg:x="7317" fg:w="9"/><text x="65.9971%" y="607.50"></text></g><g><title>checked_request2size (5 samples, 0.04%)</title><rect x="67.3196%" y="469" width="0.0449%" height="15" fill="rgb(218,164,37)" fg:x="7492" fg:w="5"/><text x="67.5696%" y="479.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="67.3645%" y="469" width="0.0180%" height="15" fill="rgb(246,65,34)" fg:x="7497" fg:w="2"/><text x="67.6145%" y="479.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="67.3645%" y="453" width="0.0180%" height="15" fill="rgb(231,100,33)" fg:x="7497" fg:w="2"/><text x="67.6145%" y="463.50"></text></g><g><title>tcache_put (4 samples, 0.04%)</title><rect x="67.3825%" y="469" width="0.0359%" height="15" fill="rgb(228,126,14)" fg:x="7499" fg:w="4"/><text x="67.6325%" y="479.50"></text></g><g><title>_int_malloc (81 samples, 0.73%)</title><rect x="66.7625%" y="485" width="0.7278%" height="15" fill="rgb(215,173,21)" fg:x="7430" fg:w="81"/><text x="67.0125%" y="495.50"></text></g><g><title>unlink_chunk (8 samples, 0.07%)</title><rect x="67.4185%" y="469" width="0.0719%" height="15" fill="rgb(210,6,40)" fg:x="7503" fg:w="8"/><text x="67.6685%" y="479.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="67.4903%" y="485" width="0.0180%" height="15" fill="rgb(212,48,18)" fg:x="7511" fg:w="2"/><text x="67.7403%" y="495.50"></text></g><g><title>__GI___libc_malloc (103 samples, 0.93%)</title><rect x="66.6187%" y="501" width="0.9255%" height="15" fill="rgb(230,214,11)" fg:x="7414" fg:w="103"/><text x="66.8687%" y="511.50"></text></g><g><title>tcache_get (4 samples, 0.04%)</title><rect x="67.5083%" y="485" width="0.0359%" height="15" fill="rgb(254,105,39)" fg:x="7513" fg:w="4"/><text x="67.7583%" y="495.50"></text></g><g><title>tcache_get_n (4 samples, 0.04%)</title><rect x="67.5083%" y="469" width="0.0359%" height="15" fill="rgb(245,158,5)" fg:x="7513" fg:w="4"/><text x="67.7583%" y="479.50"></text></g><g><title>__rdl_alloc (11 samples, 0.10%)</title><rect x="67.5443%" y="501" width="0.0988%" height="15" fill="rgb(249,208,11)" fg:x="7517" fg:w="11"/><text x="67.7943%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.10%)</title><rect x="67.5443%" y="485" width="0.0988%" height="15" fill="rgb(210,39,28)" fg:x="7517" fg:w="11"/><text x="67.7943%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (128 samples, 1.15%)</title><rect x="66.5558%" y="597" width="1.1501%" height="15" fill="rgb(211,56,53)" fg:x="7407" fg:w="128"/><text x="66.8058%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (128 samples, 1.15%)</title><rect x="66.5558%" y="581" width="1.1501%" height="15" fill="rgb(226,201,30)" fg:x="7407" fg:w="128"/><text x="66.8058%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (128 samples, 1.15%)</title><rect x="66.5558%" y="565" width="1.1501%" height="15" fill="rgb(239,101,34)" fg:x="7407" fg:w="128"/><text x="66.8058%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (124 samples, 1.11%)</title><rect x="66.5918%" y="549" width="1.1142%" height="15" fill="rgb(226,209,5)" fg:x="7411" fg:w="124"/><text x="66.8418%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (124 samples, 1.11%)</title><rect x="66.5918%" y="533" width="1.1142%" height="15" fill="rgb(250,105,47)" fg:x="7411" fg:w="124"/><text x="66.8418%" y="543.50"></text></g><g><title>alloc::alloc::alloc (124 samples, 1.11%)</title><rect x="66.5918%" y="517" width="1.1142%" height="15" fill="rgb(230,72,3)" fg:x="7411" fg:w="124"/><text x="66.8418%" y="527.50"></text></g><g><title>__rust_alloc (7 samples, 0.06%)</title><rect x="67.6431%" y="501" width="0.0629%" height="15" fill="rgb(232,218,39)" fg:x="7528" fg:w="7"/><text x="67.8931%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (139 samples, 1.25%)</title><rect x="66.4929%" y="677" width="1.2490%" height="15" fill="rgb(248,166,6)" fg:x="7400" fg:w="139"/><text x="66.7429%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (132 samples, 1.19%)</title><rect x="66.5558%" y="661" width="1.1861%" height="15" fill="rgb(247,89,20)" fg:x="7407" fg:w="132"/><text x="66.8058%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (132 samples, 1.19%)</title><rect x="66.5558%" y="645" width="1.1861%" height="15" fill="rgb(248,130,54)" fg:x="7407" fg:w="132"/><text x="66.8058%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (132 samples, 1.19%)</title><rect x="66.5558%" y="629" width="1.1861%" height="15" fill="rgb(234,196,4)" fg:x="7407" fg:w="132"/><text x="66.8058%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (132 samples, 1.19%)</title><rect x="66.5558%" y="613" width="1.1861%" height="15" fill="rgb(250,143,31)" fg:x="7407" fg:w="132"/><text x="66.8058%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.04%)</title><rect x="67.7060%" y="597" width="0.0359%" height="15" fill="rgb(211,110,34)" fg:x="7535" fg:w="4"/><text x="67.9560%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="67.7060%" y="581" width="0.0359%" height="15" fill="rgb(215,124,48)" fg:x="7535" fg:w="4"/><text x="67.9560%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="67.7060%" y="565" width="0.0359%" height="15" fill="rgb(216,46,13)" fg:x="7535" fg:w="4"/><text x="67.9560%" y="575.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (710 samples, 6.38%)</title><rect x="61.4071%" y="709" width="6.3797%" height="15" fill="rgb(205,184,25)" fg:x="6834" fg:w="710"/><text x="61.6571%" y="719.50">&lt;graph::..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (218 samples, 1.96%)</title><rect x="65.8280%" y="693" width="1.9588%" height="15" fill="rgb(228,1,10)" fg:x="7326" fg:w="218"/><text x="66.0780%" y="703.50">&lt;..</text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="677" width="0.0449%" height="15" fill="rgb(213,116,27)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="661" width="0.0449%" height="15" fill="rgb(241,95,50)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="645" width="0.0449%" height="15" fill="rgb(238,48,32)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="655.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="629" width="0.0449%" height="15" fill="rgb(235,113,49)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="639.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="613" width="0.0449%" height="15" fill="rgb(205,127,43)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="623.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="597" width="0.0449%" height="15" fill="rgb(250,162,2)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="607.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="581" width="0.0449%" height="15" fill="rgb(220,13,41)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="591.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="565" width="0.0449%" height="15" fill="rgb(249,221,25)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="575.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="67.7419%" y="549" width="0.0449%" height="15" fill="rgb(215,208,19)" fg:x="7539" fg:w="5"/><text x="67.9919%" y="559.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="67.7509%" y="533" width="0.0359%" height="15" fill="rgb(236,175,2)" fg:x="7540" fg:w="4"/><text x="68.0009%" y="543.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="67.7509%" y="517" width="0.0359%" height="15" fill="rgb(241,52,2)" fg:x="7540" fg:w="4"/><text x="68.0009%" y="527.50"></text></g><g><title>alloc_perturb (2 samples, 0.02%)</title><rect x="68.1553%" y="485" width="0.0180%" height="15" fill="rgb(248,140,14)" fg:x="7585" fg:w="2"/><text x="68.4053%" y="495.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="68.1732%" y="485" width="0.0180%" height="15" fill="rgb(253,22,42)" fg:x="7587" fg:w="2"/><text x="68.4232%" y="495.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="68.1912%" y="485" width="0.0270%" height="15" fill="rgb(234,61,47)" fg:x="7589" fg:w="3"/><text x="68.4412%" y="495.50"></text></g><g><title>_int_malloc (27 samples, 0.24%)</title><rect x="67.9845%" y="501" width="0.2426%" height="15" fill="rgb(208,226,15)" fg:x="7566" fg:w="27"/><text x="68.2345%" y="511.50"></text></g><g><title>checked_request2size (4 samples, 0.04%)</title><rect x="68.2272%" y="501" width="0.0359%" height="15" fill="rgb(217,221,4)" fg:x="7593" fg:w="4"/><text x="68.4772%" y="511.50"></text></g><g><title>__GI___libc_malloc (33 samples, 0.30%)</title><rect x="67.9756%" y="517" width="0.2965%" height="15" fill="rgb(212,174,34)" fg:x="7565" fg:w="33"/><text x="68.2256%" y="527.50"></text></g><g><title>__rdl_alloc (4 samples, 0.04%)</title><rect x="68.2721%" y="517" width="0.0359%" height="15" fill="rgb(253,83,4)" fg:x="7598" fg:w="4"/><text x="68.5221%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.04%)</title><rect x="68.2721%" y="501" width="0.0359%" height="15" fill="rgb(250,195,49)" fg:x="7598" fg:w="4"/><text x="68.5221%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (41 samples, 0.37%)</title><rect x="67.9576%" y="613" width="0.3684%" height="15" fill="rgb(241,192,25)" fg:x="7563" fg:w="41"/><text x="68.2076%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (41 samples, 0.37%)</title><rect x="67.9576%" y="597" width="0.3684%" height="15" fill="rgb(208,124,10)" fg:x="7563" fg:w="41"/><text x="68.2076%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (41 samples, 0.37%)</title><rect x="67.9576%" y="581" width="0.3684%" height="15" fill="rgb(222,33,0)" fg:x="7563" fg:w="41"/><text x="68.2076%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (39 samples, 0.35%)</title><rect x="67.9756%" y="565" width="0.3504%" height="15" fill="rgb(234,209,28)" fg:x="7565" fg:w="39"/><text x="68.2256%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (39 samples, 0.35%)</title><rect x="67.9756%" y="549" width="0.3504%" height="15" fill="rgb(224,11,23)" fg:x="7565" fg:w="39"/><text x="68.2256%" y="559.50"></text></g><g><title>alloc::alloc::alloc (39 samples, 0.35%)</title><rect x="67.9756%" y="533" width="0.3504%" height="15" fill="rgb(232,99,1)" fg:x="7565" fg:w="39"/><text x="68.2256%" y="543.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="68.3080%" y="517" width="0.0180%" height="15" fill="rgb(237,95,45)" fg:x="7602" fg:w="2"/><text x="68.5580%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (48 samples, 0.43%)</title><rect x="67.9216%" y="693" width="0.4313%" height="15" fill="rgb(208,109,11)" fg:x="7559" fg:w="48"/><text x="68.1716%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (44 samples, 0.40%)</title><rect x="67.9576%" y="677" width="0.3954%" height="15" fill="rgb(216,190,48)" fg:x="7563" fg:w="44"/><text x="68.2076%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (44 samples, 0.40%)</title><rect x="67.9576%" y="661" width="0.3954%" height="15" fill="rgb(251,171,36)" fg:x="7563" fg:w="44"/><text x="68.2076%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (44 samples, 0.40%)</title><rect x="67.9576%" y="645" width="0.3954%" height="15" fill="rgb(230,62,22)" fg:x="7563" fg:w="44"/><text x="68.2076%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (44 samples, 0.40%)</title><rect x="67.9576%" y="629" width="0.3954%" height="15" fill="rgb(225,114,35)" fg:x="7563" fg:w="44"/><text x="68.2076%" y="639.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="68.3260%" y="613" width="0.0270%" height="15" fill="rgb(215,118,42)" fg:x="7604" fg:w="3"/><text x="68.5760%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="68.3260%" y="597" width="0.0270%" height="15" fill="rgb(243,119,21)" fg:x="7604" fg:w="3"/><text x="68.5760%" y="607.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="68.3260%" y="581" width="0.0270%" height="15" fill="rgb(252,177,53)" fg:x="7604" fg:w="3"/><text x="68.5760%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (3 samples, 0.03%)</title><rect x="68.3530%" y="677" width="0.0270%" height="15" fill="rgb(237,209,29)" fg:x="7607" fg:w="3"/><text x="68.6030%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (11 samples, 0.10%)</title><rect x="68.3530%" y="693" width="0.0988%" height="15" fill="rgb(212,65,23)" fg:x="7607" fg:w="11"/><text x="68.6030%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.07%)</title><rect x="68.3799%" y="677" width="0.0719%" height="15" fill="rgb(230,222,46)" fg:x="7610" fg:w="8"/><text x="68.6299%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.07%)</title><rect x="68.3799%" y="661" width="0.0719%" height="15" fill="rgb(215,135,32)" fg:x="7610" fg:w="8"/><text x="68.6299%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.07%)</title><rect x="68.3799%" y="645" width="0.0719%" height="15" fill="rgb(246,101,22)" fg:x="7610" fg:w="8"/><text x="68.6299%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="68.4069%" y="629" width="0.0449%" height="15" fill="rgb(206,107,13)" fg:x="7613" fg:w="5"/><text x="68.6569%" y="639.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="69.2695%" y="469" width="0.0180%" height="15" fill="rgb(250,100,44)" fg:x="7709" fg:w="2"/><text x="69.5195%" y="479.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="69.2874%" y="469" width="0.0270%" height="15" fill="rgb(231,147,38)" fg:x="7711" fg:w="3"/><text x="69.5374%" y="479.50"></text></g><g><title>_int_malloc (31 samples, 0.28%)</title><rect x="69.0448%" y="485" width="0.2786%" height="15" fill="rgb(229,8,40)" fg:x="7684" fg:w="31"/><text x="69.2948%" y="495.50"></text></g><g><title>__GI___libc_malloc (40 samples, 0.36%)</title><rect x="68.9999%" y="501" width="0.3594%" height="15" fill="rgb(221,135,30)" fg:x="7679" fg:w="40"/><text x="69.2499%" y="511.50"></text></g><g><title>tcache_get (4 samples, 0.04%)</title><rect x="69.3234%" y="485" width="0.0359%" height="15" fill="rgb(249,193,18)" fg:x="7715" fg:w="4"/><text x="69.5734%" y="495.50"></text></g><g><title>tcache_get_n (4 samples, 0.04%)</title><rect x="69.3234%" y="469" width="0.0359%" height="15" fill="rgb(209,133,39)" fg:x="7715" fg:w="4"/><text x="69.5734%" y="479.50"></text></g><g><title>__rdl_alloc (4 samples, 0.04%)</title><rect x="69.3593%" y="501" width="0.0359%" height="15" fill="rgb(232,100,14)" fg:x="7719" fg:w="4"/><text x="69.6093%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.04%)</title><rect x="69.3593%" y="485" width="0.0359%" height="15" fill="rgb(224,185,1)" fg:x="7719" fg:w="4"/><text x="69.6093%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (59 samples, 0.53%)</title><rect x="68.8921%" y="597" width="0.5301%" height="15" fill="rgb(223,139,8)" fg:x="7667" fg:w="59"/><text x="69.1421%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (59 samples, 0.53%)</title><rect x="68.8921%" y="581" width="0.5301%" height="15" fill="rgb(232,213,38)" fg:x="7667" fg:w="59"/><text x="69.1421%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (59 samples, 0.53%)</title><rect x="68.8921%" y="565" width="0.5301%" height="15" fill="rgb(207,94,22)" fg:x="7667" fg:w="59"/><text x="69.1421%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (49 samples, 0.44%)</title><rect x="68.9819%" y="549" width="0.4403%" height="15" fill="rgb(219,183,54)" fg:x="7677" fg:w="49"/><text x="69.2319%" y="559.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (49 samples, 0.44%)</title><rect x="68.9819%" y="533" width="0.4403%" height="15" fill="rgb(216,185,54)" fg:x="7677" fg:w="49"/><text x="69.2319%" y="543.50"></text></g><g><title>alloc::alloc::alloc (49 samples, 0.44%)</title><rect x="68.9819%" y="517" width="0.4403%" height="15" fill="rgb(254,217,39)" fg:x="7677" fg:w="49"/><text x="69.2319%" y="527.50"></text></g><g><title>__rust_alloc (3 samples, 0.03%)</title><rect x="69.3953%" y="501" width="0.0270%" height="15" fill="rgb(240,178,23)" fg:x="7723" fg:w="3"/><text x="69.6453%" y="511.50"></text></g><g><title>&lt;graph::Vertex as core::clone::Clone&gt;::clone (186 samples, 1.67%)</title><rect x="67.7869%" y="709" width="1.6713%" height="15" fill="rgb(218,11,47)" fg:x="7544" fg:w="186"/><text x="68.0369%" y="719.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (112 samples, 1.01%)</title><rect x="68.4518%" y="693" width="1.0064%" height="15" fill="rgb(218,51,51)" fg:x="7618" fg:w="112"/><text x="68.7018%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (66 samples, 0.59%)</title><rect x="68.8651%" y="677" width="0.5930%" height="15" fill="rgb(238,126,27)" fg:x="7664" fg:w="66"/><text x="69.1151%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (63 samples, 0.57%)</title><rect x="68.8921%" y="661" width="0.5661%" height="15" fill="rgb(249,202,22)" fg:x="7667" fg:w="63"/><text x="69.1421%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (63 samples, 0.57%)</title><rect x="68.8921%" y="645" width="0.5661%" height="15" fill="rgb(254,195,49)" fg:x="7667" fg:w="63"/><text x="69.1421%" y="655.50"></text></g><g><title>alloc::slice::hack::to_vec (63 samples, 0.57%)</title><rect x="68.8921%" y="629" width="0.5661%" height="15" fill="rgb(208,123,14)" fg:x="7667" fg:w="63"/><text x="69.1421%" y="639.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (63 samples, 0.57%)</title><rect x="68.8921%" y="613" width="0.5661%" height="15" fill="rgb(224,200,8)" fg:x="7667" fg:w="63"/><text x="69.1421%" y="623.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.04%)</title><rect x="69.4222%" y="597" width="0.0359%" height="15" fill="rgb(217,61,36)" fg:x="7726" fg:w="4"/><text x="69.6722%" y="607.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="69.4222%" y="581" width="0.0359%" height="15" fill="rgb(206,35,45)" fg:x="7726" fg:w="4"/><text x="69.6722%" y="591.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="69.4222%" y="565" width="0.0359%" height="15" fill="rgb(217,65,33)" fg:x="7726" fg:w="4"/><text x="69.6722%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (12 samples, 0.11%)</title><rect x="69.4582%" y="709" width="0.1078%" height="15" fill="rgb(222,158,48)" fg:x="7730" fg:w="12"/><text x="69.7082%" y="719.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::val_area_mut (2 samples, 0.02%)</title><rect x="69.6379%" y="693" width="0.0180%" height="15" fill="rgb(254,2,54)" fg:x="7750" fg:w="2"/><text x="69.8879%" y="703.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (2 samples, 0.02%)</title><rect x="69.6379%" y="677" width="0.0180%" height="15" fill="rgb(250,143,38)" fg:x="7750" fg:w="2"/><text x="69.8879%" y="687.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2 samples, 0.02%)</title><rect x="69.6379%" y="661" width="0.0180%" height="15" fill="rgb(248,25,0)" fg:x="7750" fg:w="2"/><text x="69.8879%" y="671.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.02%)</title><rect x="69.6379%" y="645" width="0.0180%" height="15" fill="rgb(206,152,27)" fg:x="7750" fg:w="2"/><text x="69.8879%" y="655.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (66 samples, 0.59%)</title><rect x="69.5750%" y="709" width="0.5930%" height="15" fill="rgb(240,77,30)" fg:x="7743" fg:w="66"/><text x="69.8250%" y="719.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (57 samples, 0.51%)</title><rect x="69.6559%" y="693" width="0.5122%" height="15" fill="rgb(231,5,3)" fg:x="7752" fg:w="57"/><text x="69.9059%" y="703.50"></text></g><g><title>__memcpy_avx_unaligned_erms (42 samples, 0.38%)</title><rect x="69.7906%" y="677" width="0.3774%" height="15" fill="rgb(207,226,32)" fg:x="7767" fg:w="42"/><text x="70.0406%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="533" width="0.0449%" height="15" fill="rgb(222,207,47)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="543.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="517" width="0.0449%" height="15" fill="rgb(229,115,45)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="501" width="0.0449%" height="15" fill="rgb(224,191,6)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="485" width="0.0449%" height="15" fill="rgb(230,227,24)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="469" width="0.0449%" height="15" fill="rgb(228,80,19)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="453" width="0.0449%" height="15" fill="rgb(247,229,0)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="437" width="0.0449%" height="15" fill="rgb(237,194,15)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="421" width="0.0449%" height="15" fill="rgb(219,203,20)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="405" width="0.0449%" height="15" fill="rgb(234,128,8)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="389" width="0.0449%" height="15" fill="rgb(248,202,8)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="78.1382%" y="373" width="0.0449%" height="15" fill="rgb(206,104,37)" fg:x="8696" fg:w="5"/><text x="78.3882%" y="383.50"></text></g><g><title>malloc_consolidate (447 samples, 4.02%)</title><rect x="74.2475%" y="549" width="4.0165%" height="15" fill="rgb(223,8,27)" fg:x="8263" fg:w="447"/><text x="74.4975%" y="559.50">mall..</text></g><g><title>unlink_chunk (9 samples, 0.08%)</title><rect x="78.1831%" y="533" width="0.0809%" height="15" fill="rgb(216,217,28)" fg:x="8701" fg:w="9"/><text x="78.4331%" y="543.50"></text></g><g><title>_int_malloc (909 samples, 8.17%)</title><rect x="70.2040%" y="565" width="8.1678%" height="15" fill="rgb(249,199,1)" fg:x="7813" fg:w="909"/><text x="70.4540%" y="575.50">_int_malloc</text></g><g><title>unlink_chunk (12 samples, 0.11%)</title><rect x="78.2640%" y="549" width="0.1078%" height="15" fill="rgb(240,85,17)" fg:x="8710" fg:w="12"/><text x="78.5140%" y="559.50"></text></g><g><title>__GI___libc_malloc (914 samples, 8.21%)</title><rect x="70.1680%" y="581" width="8.2128%" height="15" fill="rgb(206,108,45)" fg:x="7809" fg:w="914"/><text x="70.4180%" y="591.50">__GI___libc..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,083 samples, 18.72%)</title><rect x="59.6729%" y="725" width="18.7169%" height="15" fill="rgb(245,210,41)" fg:x="6641" fg:w="2083"/><text x="59.9229%" y="735.50">&lt;alloc::collections::btree::m..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (915 samples, 8.22%)</title><rect x="70.1680%" y="709" width="8.2218%" height="15" fill="rgb(206,13,37)" fg:x="7809" fg:w="915"/><text x="70.4180%" y="719.50">alloc::coll..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (915 samples, 8.22%)</title><rect x="70.1680%" y="693" width="8.2218%" height="15" fill="rgb(250,61,18)" fg:x="7809" fg:w="915"/><text x="70.4180%" y="703.50">alloc::coll..</text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (915 samples, 8.22%)</title><rect x="70.1680%" y="677" width="8.2218%" height="15" fill="rgb(235,172,48)" fg:x="7809" fg:w="915"/><text x="70.4180%" y="687.50">alloc::coll..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (915 samples, 8.22%)</title><rect x="70.1680%" y="661" width="8.2218%" height="15" fill="rgb(249,201,17)" fg:x="7809" fg:w="915"/><text x="70.4180%" y="671.50">alloc::boxe..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (915 samples, 8.22%)</title><rect x="70.1680%" y="645" width="8.2218%" height="15" fill="rgb(219,208,6)" fg:x="7809" fg:w="915"/><text x="70.4180%" y="655.50">alloc::boxe..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (915 samples, 8.22%)</title><rect x="70.1680%" y="629" width="8.2218%" height="15" fill="rgb(248,31,23)" fg:x="7809" fg:w="915"/><text x="70.4180%" y="639.50">&lt;alloc::all..</text></g><g><title>alloc::alloc::Global::alloc_impl (915 samples, 8.22%)</title><rect x="70.1680%" y="613" width="8.2218%" height="15" fill="rgb(245,15,42)" fg:x="7809" fg:w="915"/><text x="70.4180%" y="623.50">alloc::allo..</text></g><g><title>alloc::alloc::alloc (915 samples, 8.22%)</title><rect x="70.1680%" y="597" width="8.2218%" height="15" fill="rgb(222,217,39)" fg:x="7809" fg:w="915"/><text x="70.4180%" y="607.50">alloc::allo..</text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="78.4617%" y="517" width="0.0270%" height="15" fill="rgb(210,219,27)" fg:x="8732" fg:w="3"/><text x="78.7117%" y="527.50"></text></g><g><title>_int_malloc (8 samples, 0.07%)</title><rect x="78.4257%" y="533" width="0.0719%" height="15" fill="rgb(252,166,36)" fg:x="8728" fg:w="8"/><text x="78.6757%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.13%)</title><rect x="78.3988%" y="645" width="0.1258%" height="15" fill="rgb(245,132,34)" fg:x="8725" fg:w="14"/><text x="78.6488%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.13%)</title><rect x="78.3988%" y="629" width="0.1258%" height="15" fill="rgb(236,54,3)" fg:x="8725" fg:w="14"/><text x="78.6488%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.13%)</title><rect x="78.3988%" y="613" width="0.1258%" height="15" fill="rgb(241,173,43)" fg:x="8725" fg:w="14"/><text x="78.6488%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (13 samples, 0.12%)</title><rect x="78.4078%" y="597" width="0.1168%" height="15" fill="rgb(215,190,9)" fg:x="8726" fg:w="13"/><text x="78.6578%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (13 samples, 0.12%)</title><rect x="78.4078%" y="581" width="0.1168%" height="15" fill="rgb(242,101,16)" fg:x="8726" fg:w="13"/><text x="78.6578%" y="591.50"></text></g><g><title>alloc::alloc::alloc (13 samples, 0.12%)</title><rect x="78.4078%" y="565" width="0.1168%" height="15" fill="rgb(223,190,21)" fg:x="8726" fg:w="13"/><text x="78.6578%" y="575.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.12%)</title><rect x="78.4078%" y="549" width="0.1168%" height="15" fill="rgb(215,228,25)" fg:x="8726" fg:w="13"/><text x="78.6578%" y="559.50"></text></g><g><title>checked_request2size (3 samples, 0.03%)</title><rect x="78.4976%" y="533" width="0.0270%" height="15" fill="rgb(225,36,22)" fg:x="8736" fg:w="3"/><text x="78.7476%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (18 samples, 0.16%)</title><rect x="78.3898%" y="725" width="0.1617%" height="15" fill="rgb(251,106,46)" fg:x="8724" fg:w="18"/><text x="78.6398%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (17 samples, 0.15%)</title><rect x="78.3988%" y="709" width="0.1528%" height="15" fill="rgb(208,90,1)" fg:x="8725" fg:w="17"/><text x="78.6488%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (17 samples, 0.15%)</title><rect x="78.3988%" y="693" width="0.1528%" height="15" fill="rgb(243,10,4)" fg:x="8725" fg:w="17"/><text x="78.6488%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (17 samples, 0.15%)</title><rect x="78.3988%" y="677" width="0.1528%" height="15" fill="rgb(212,137,27)" fg:x="8725" fg:w="17"/><text x="78.6488%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (17 samples, 0.15%)</title><rect x="78.3988%" y="661" width="0.1528%" height="15" fill="rgb(231,220,49)" fg:x="8725" fg:w="17"/><text x="78.6488%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="78.5246%" y="645" width="0.0270%" height="15" fill="rgb(237,96,20)" fg:x="8739" fg:w="3"/><text x="78.7746%" y="655.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="78.5246%" y="629" width="0.0270%" height="15" fill="rgb(239,229,30)" fg:x="8739" fg:w="3"/><text x="78.7746%" y="639.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="78.5246%" y="613" width="0.0270%" height="15" fill="rgb(219,65,33)" fg:x="8739" fg:w="3"/><text x="78.7746%" y="623.50"></text></g><g><title>_int_malloc (28 samples, 0.25%)</title><rect x="78.7941%" y="517" width="0.2516%" height="15" fill="rgb(243,134,7)" fg:x="8769" fg:w="28"/><text x="79.0441%" y="527.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="79.0278%" y="501" width="0.0180%" height="15" fill="rgb(216,177,54)" fg:x="8795" fg:w="2"/><text x="79.2778%" y="511.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="79.0457%" y="517" width="0.0180%" height="15" fill="rgb(211,160,20)" fg:x="8797" fg:w="2"/><text x="79.2957%" y="527.50"></text></g><g><title>__GI___libc_malloc (40 samples, 0.36%)</title><rect x="78.7133%" y="533" width="0.3594%" height="15" fill="rgb(239,85,39)" fg:x="8760" fg:w="40"/><text x="78.9633%" y="543.50"></text></g><g><title>__rdl_alloc (4 samples, 0.04%)</title><rect x="79.0727%" y="533" width="0.0359%" height="15" fill="rgb(232,125,22)" fg:x="8800" fg:w="4"/><text x="79.3227%" y="543.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (4 samples, 0.04%)</title><rect x="79.0727%" y="517" width="0.0359%" height="15" fill="rgb(244,57,34)" fg:x="8800" fg:w="4"/><text x="79.3227%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (50 samples, 0.45%)</title><rect x="78.6773%" y="629" width="0.4493%" height="15" fill="rgb(214,203,32)" fg:x="8756" fg:w="50"/><text x="78.9273%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50 samples, 0.45%)</title><rect x="78.6773%" y="613" width="0.4493%" height="15" fill="rgb(207,58,43)" fg:x="8756" fg:w="50"/><text x="78.9273%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (50 samples, 0.45%)</title><rect x="78.6773%" y="597" width="0.4493%" height="15" fill="rgb(215,193,15)" fg:x="8756" fg:w="50"/><text x="78.9273%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (48 samples, 0.43%)</title><rect x="78.6953%" y="581" width="0.4313%" height="15" fill="rgb(232,15,44)" fg:x="8758" fg:w="48"/><text x="78.9453%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (48 samples, 0.43%)</title><rect x="78.6953%" y="565" width="0.4313%" height="15" fill="rgb(212,3,48)" fg:x="8758" fg:w="48"/><text x="78.9453%" y="575.50"></text></g><g><title>alloc::alloc::alloc (48 samples, 0.43%)</title><rect x="78.6953%" y="549" width="0.4313%" height="15" fill="rgb(218,128,7)" fg:x="8758" fg:w="48"/><text x="78.9453%" y="559.50"></text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="79.1086%" y="533" width="0.0180%" height="15" fill="rgb(226,216,39)" fg:x="8804" fg:w="2"/><text x="79.3586%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (58 samples, 0.52%)</title><rect x="78.6414%" y="709" width="0.5212%" height="15" fill="rgb(243,47,51)" fg:x="8752" fg:w="58"/><text x="78.8914%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (54 samples, 0.49%)</title><rect x="78.6773%" y="693" width="0.4852%" height="15" fill="rgb(241,183,40)" fg:x="8756" fg:w="54"/><text x="78.9273%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (54 samples, 0.49%)</title><rect x="78.6773%" y="677" width="0.4852%" height="15" fill="rgb(231,217,32)" fg:x="8756" fg:w="54"/><text x="78.9273%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (54 samples, 0.49%)</title><rect x="78.6773%" y="661" width="0.4852%" height="15" fill="rgb(229,61,38)" fg:x="8756" fg:w="54"/><text x="78.9273%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (54 samples, 0.49%)</title><rect x="78.6773%" y="645" width="0.4852%" height="15" fill="rgb(225,210,5)" fg:x="8756" fg:w="54"/><text x="78.9273%" y="655.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.04%)</title><rect x="79.1266%" y="629" width="0.0359%" height="15" fill="rgb(231,79,45)" fg:x="8806" fg:w="4"/><text x="79.3766%" y="639.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="79.1266%" y="613" width="0.0359%" height="15" fill="rgb(224,100,7)" fg:x="8806" fg:w="4"/><text x="79.3766%" y="623.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="79.1266%" y="597" width="0.0359%" height="15" fill="rgb(241,198,18)" fg:x="8806" fg:w="4"/><text x="79.3766%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="79.1625%" y="709" width="0.0359%" height="15" fill="rgb(252,97,53)" fg:x="8810" fg:w="4"/><text x="79.4125%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="79.1715%" y="693" width="0.0270%" height="15" fill="rgb(220,88,7)" fg:x="8811" fg:w="3"/><text x="79.4215%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="79.1715%" y="677" width="0.0270%" height="15" fill="rgb(213,176,14)" fg:x="8811" fg:w="3"/><text x="79.4215%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="79.1715%" y="661" width="0.0270%" height="15" fill="rgb(246,73,7)" fg:x="8811" fg:w="3"/><text x="79.4215%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="79.1715%" y="645" width="0.0270%" height="15" fill="rgb(245,64,36)" fg:x="8811" fg:w="3"/><text x="79.4215%" y="655.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="79.5130%" y="485" width="0.0270%" height="15" fill="rgb(245,80,10)" fg:x="8849" fg:w="3"/><text x="79.7630%" y="495.50"></text></g><g><title>_int_malloc (17 samples, 0.15%)</title><rect x="79.3962%" y="501" width="0.1528%" height="15" fill="rgb(232,107,50)" fg:x="8836" fg:w="17"/><text x="79.6462%" y="511.50"></text></g><g><title>__GI___libc_malloc (20 samples, 0.18%)</title><rect x="79.3782%" y="517" width="0.1797%" height="15" fill="rgb(253,3,0)" fg:x="8834" fg:w="20"/><text x="79.6282%" y="527.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (114 samples, 1.02%)</title><rect x="78.5515%" y="725" width="1.0244%" height="15" fill="rgb(212,99,53)" fg:x="8742" fg:w="114"/><text x="78.8015%" y="735.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (42 samples, 0.38%)</title><rect x="79.1985%" y="709" width="0.3774%" height="15" fill="rgb(249,111,54)" fg:x="8814" fg:w="42"/><text x="79.4485%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (24 samples, 0.22%)</title><rect x="79.3602%" y="693" width="0.2157%" height="15" fill="rgb(249,55,30)" fg:x="8832" fg:w="24"/><text x="79.6102%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (23 samples, 0.21%)</title><rect x="79.3692%" y="677" width="0.2067%" height="15" fill="rgb(237,47,42)" fg:x="8833" fg:w="23"/><text x="79.6192%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (23 samples, 0.21%)</title><rect x="79.3692%" y="661" width="0.2067%" height="15" fill="rgb(211,20,18)" fg:x="8833" fg:w="23"/><text x="79.6192%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (23 samples, 0.21%)</title><rect x="79.3692%" y="645" width="0.2067%" height="15" fill="rgb(231,203,46)" fg:x="8833" fg:w="23"/><text x="79.6192%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (23 samples, 0.21%)</title><rect x="79.3692%" y="629" width="0.2067%" height="15" fill="rgb(237,142,3)" fg:x="8833" fg:w="23"/><text x="79.6192%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (23 samples, 0.21%)</title><rect x="79.3692%" y="613" width="0.2067%" height="15" fill="rgb(241,107,1)" fg:x="8833" fg:w="23"/><text x="79.6192%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (23 samples, 0.21%)</title><rect x="79.3692%" y="597" width="0.2067%" height="15" fill="rgb(229,83,13)" fg:x="8833" fg:w="23"/><text x="79.6192%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (23 samples, 0.21%)</title><rect x="79.3692%" y="581" width="0.2067%" height="15" fill="rgb(241,91,40)" fg:x="8833" fg:w="23"/><text x="79.6192%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.20%)</title><rect x="79.3782%" y="565" width="0.1977%" height="15" fill="rgb(225,3,45)" fg:x="8834" fg:w="22"/><text x="79.6282%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.20%)</title><rect x="79.3782%" y="549" width="0.1977%" height="15" fill="rgb(244,223,14)" fg:x="8834" fg:w="22"/><text x="79.6282%" y="559.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.20%)</title><rect x="79.3782%" y="533" width="0.1977%" height="15" fill="rgb(224,124,37)" fg:x="8834" fg:w="22"/><text x="79.6282%" y="543.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="79.5579%" y="517" width="0.0180%" height="15" fill="rgb(251,171,30)" fg:x="8854" fg:w="2"/><text x="79.8079%" y="527.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="79.5579%" y="501" width="0.0180%" height="15" fill="rgb(236,46,54)" fg:x="8854" fg:w="2"/><text x="79.8079%" y="511.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="79.6118%" y="533" width="0.0270%" height="15" fill="rgb(245,213,5)" fg:x="8860" fg:w="3"/><text x="79.8618%" y="543.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="79.6118%" y="517" width="0.0270%" height="15" fill="rgb(230,144,27)" fg:x="8860" fg:w="3"/><text x="79.8618%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="79.6028%" y="629" width="0.0449%" height="15" fill="rgb(220,86,6)" fg:x="8859" fg:w="5"/><text x="79.8528%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.04%)</title><rect x="79.6028%" y="613" width="0.0449%" height="15" fill="rgb(240,20,13)" fg:x="8859" fg:w="5"/><text x="79.8528%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.04%)</title><rect x="79.6028%" y="597" width="0.0449%" height="15" fill="rgb(217,89,34)" fg:x="8859" fg:w="5"/><text x="79.8528%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.04%)</title><rect x="79.6028%" y="581" width="0.0449%" height="15" fill="rgb(229,13,5)" fg:x="8859" fg:w="5"/><text x="79.8528%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.04%)</title><rect x="79.6028%" y="565" width="0.0449%" height="15" fill="rgb(244,67,35)" fg:x="8859" fg:w="5"/><text x="79.8528%" y="575.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.04%)</title><rect x="79.6028%" y="549" width="0.0449%" height="15" fill="rgb(221,40,2)" fg:x="8859" fg:w="5"/><text x="79.8528%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.06%)</title><rect x="79.5939%" y="709" width="0.0629%" height="15" fill="rgb(237,157,21)" fg:x="8858" fg:w="7"/><text x="79.8439%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="79.6028%" y="693" width="0.0539%" height="15" fill="rgb(222,94,11)" fg:x="8859" fg:w="6"/><text x="79.8528%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.05%)</title><rect x="79.6028%" y="677" width="0.0539%" height="15" fill="rgb(249,113,6)" fg:x="8859" fg:w="6"/><text x="79.8528%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.05%)</title><rect x="79.6028%" y="661" width="0.0539%" height="15" fill="rgb(238,137,36)" fg:x="8859" fg:w="6"/><text x="79.8528%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.05%)</title><rect x="79.6028%" y="645" width="0.0539%" height="15" fill="rgb(210,102,26)" fg:x="8859" fg:w="6"/><text x="79.8528%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="79.6568%" y="709" width="0.0180%" height="15" fill="rgb(218,30,30)" fg:x="8865" fg:w="2"/><text x="79.9068%" y="719.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="79.7376%" y="501" width="0.0359%" height="15" fill="rgb(214,67,26)" fg:x="8874" fg:w="4"/><text x="79.9876%" y="511.50"></text></g><g><title>&lt;graph::Vertex as core::clone::Clone&gt;::clone (23 samples, 0.21%)</title><rect x="79.5759%" y="725" width="0.2067%" height="15" fill="rgb(251,9,53)" fg:x="8856" fg:w="23"/><text x="79.8259%" y="735.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (12 samples, 0.11%)</title><rect x="79.6747%" y="709" width="0.1078%" height="15" fill="rgb(228,204,25)" fg:x="8867" fg:w="12"/><text x="79.9247%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="79.7286%" y="693" width="0.0539%" height="15" fill="rgb(207,153,8)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="79.7286%" y="677" width="0.0539%" height="15" fill="rgb(242,9,16)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="687.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 0.05%)</title><rect x="79.7286%" y="661" width="0.0539%" height="15" fill="rgb(217,211,10)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="671.50"></text></g><g><title>alloc::slice::hack::to_vec (6 samples, 0.05%)</title><rect x="79.7286%" y="645" width="0.0539%" height="15" fill="rgb(219,228,52)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="655.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 0.05%)</title><rect x="79.7286%" y="629" width="0.0539%" height="15" fill="rgb(231,92,29)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="79.7286%" y="613" width="0.0539%" height="15" fill="rgb(232,8,23)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.05%)</title><rect x="79.7286%" y="597" width="0.0539%" height="15" fill="rgb(216,211,34)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.05%)</title><rect x="79.7286%" y="581" width="0.0539%" height="15" fill="rgb(236,151,0)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.05%)</title><rect x="79.7286%" y="565" width="0.0539%" height="15" fill="rgb(209,168,3)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="575.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.05%)</title><rect x="79.7286%" y="549" width="0.0539%" height="15" fill="rgb(208,129,28)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="559.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.05%)</title><rect x="79.7286%" y="533" width="0.0539%" height="15" fill="rgb(229,78,22)" fg:x="8873" fg:w="6"/><text x="79.9786%" y="543.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.04%)</title><rect x="79.7376%" y="517" width="0.0449%" height="15" fill="rgb(228,187,13)" fg:x="8874" fg:w="5"/><text x="79.9876%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.04%)</title><rect x="79.7826%" y="725" width="0.0449%" height="15" fill="rgb(240,119,24)" fg:x="8879" fg:w="5"/><text x="80.0326%" y="735.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (2 samples, 0.02%)</title><rect x="79.8275%" y="725" width="0.0180%" height="15" fill="rgb(209,194,42)" fg:x="8884" fg:w="2"/><text x="80.0775%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (5 samples, 0.04%)</title><rect x="79.8544%" y="725" width="0.0449%" height="15" fill="rgb(247,200,46)" fg:x="8887" fg:w="5"/><text x="80.1044%" y="735.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (4 samples, 0.04%)</title><rect x="79.8634%" y="709" width="0.0359%" height="15" fill="rgb(218,76,16)" fg:x="8888" fg:w="4"/><text x="80.1134%" y="719.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="79.8724%" y="693" width="0.0270%" height="15" fill="rgb(225,21,48)" fg:x="8889" fg:w="3"/><text x="80.1224%" y="703.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (11 samples, 0.10%)</title><rect x="79.8994%" y="629" width="0.0988%" height="15" fill="rgb(239,223,50)" fg:x="8892" fg:w="11"/><text x="80.1494%" y="639.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (11 samples, 0.10%)</title><rect x="79.8994%" y="613" width="0.0988%" height="15" fill="rgb(244,45,21)" fg:x="8892" fg:w="11"/><text x="80.1494%" y="623.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (11 samples, 0.10%)</title><rect x="79.8994%" y="597" width="0.0988%" height="15" fill="rgb(232,33,43)" fg:x="8892" fg:w="11"/><text x="80.1494%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.10%)</title><rect x="79.8994%" y="581" width="0.0988%" height="15" fill="rgb(209,8,3)" fg:x="8892" fg:w="11"/><text x="80.1494%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.10%)</title><rect x="79.8994%" y="565" width="0.0988%" height="15" fill="rgb(214,25,53)" fg:x="8892" fg:w="11"/><text x="80.1494%" y="575.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.10%)</title><rect x="79.8994%" y="549" width="0.0988%" height="15" fill="rgb(254,186,54)" fg:x="8892" fg:w="11"/><text x="80.1494%" y="559.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.10%)</title><rect x="79.8994%" y="533" width="0.0988%" height="15" fill="rgb(208,174,49)" fg:x="8892" fg:w="11"/><text x="80.1494%" y="543.50"></text></g><g><title>_int_malloc (11 samples, 0.10%)</title><rect x="79.8994%" y="517" width="0.0988%" height="15" fill="rgb(233,191,51)" fg:x="8892" fg:w="11"/><text x="80.1494%" y="527.50"></text></g><g><title>unlink_chunk (7 samples, 0.06%)</title><rect x="79.9353%" y="501" width="0.0629%" height="15" fill="rgb(222,134,10)" fg:x="8896" fg:w="7"/><text x="80.1853%" y="511.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (12 samples, 0.11%)</title><rect x="79.8994%" y="725" width="0.1078%" height="15" fill="rgb(230,226,20)" fg:x="8892" fg:w="12"/><text x="80.1494%" y="735.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (12 samples, 0.11%)</title><rect x="79.8994%" y="709" width="0.1078%" height="15" fill="rgb(251,111,25)" fg:x="8892" fg:w="12"/><text x="80.1494%" y="719.50"></text></g><g><title>alloc::collections::btree::mem::replace (12 samples, 0.11%)</title><rect x="79.8994%" y="693" width="0.1078%" height="15" fill="rgb(224,40,46)" fg:x="8892" fg:w="12"/><text x="80.1494%" y="703.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (12 samples, 0.11%)</title><rect x="79.8994%" y="677" width="0.1078%" height="15" fill="rgb(236,108,47)" fg:x="8892" fg:w="12"/><text x="80.1494%" y="687.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (12 samples, 0.11%)</title><rect x="79.8994%" y="661" width="0.1078%" height="15" fill="rgb(234,93,0)" fg:x="8892" fg:w="12"/><text x="80.1494%" y="671.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (12 samples, 0.11%)</title><rect x="79.8994%" y="645" width="0.1078%" height="15" fill="rgb(224,213,32)" fg:x="8892" fg:w="12"/><text x="80.1494%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,267 samples, 20.37%)</title><rect x="59.6550%" y="741" width="20.3702%" height="15" fill="rgb(251,11,48)" fg:x="6639" fg:w="2267"/><text x="59.9050%" y="751.50">&lt;alloc::collections::btree::map:..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (2 samples, 0.02%)</title><rect x="80.0072%" y="725" width="0.0180%" height="15" fill="rgb(236,173,5)" fg:x="8904" fg:w="2"/><text x="80.2572%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="80.0252%" y="741" width="0.0270%" height="15" fill="rgb(230,95,12)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="80.0252%" y="725" width="0.0270%" height="15" fill="rgb(232,209,1)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="735.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="80.0252%" y="709" width="0.0270%" height="15" fill="rgb(232,6,1)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="719.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="80.0252%" y="693" width="0.0270%" height="15" fill="rgb(210,224,50)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="703.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="80.0252%" y="677" width="0.0270%" height="15" fill="rgb(228,127,35)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="80.0252%" y="661" width="0.0270%" height="15" fill="rgb(245,102,45)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="80.0252%" y="645" width="0.0270%" height="15" fill="rgb(214,1,49)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="80.0252%" y="629" width="0.0270%" height="15" fill="rgb(226,163,40)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="80.0252%" y="613" width="0.0270%" height="15" fill="rgb(239,212,28)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="623.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="80.0252%" y="597" width="0.0270%" height="15" fill="rgb(220,20,13)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="607.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="80.0252%" y="581" width="0.0270%" height="15" fill="rgb(210,164,35)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="591.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="80.0252%" y="565" width="0.0270%" height="15" fill="rgb(248,109,41)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="575.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="80.0252%" y="549" width="0.0270%" height="15" fill="rgb(238,23,50)" fg:x="8906" fg:w="3"/><text x="80.2752%" y="559.50"></text></g><g><title>_int_malloc (12 samples, 0.11%)</title><rect x="80.0611%" y="533" width="0.1078%" height="15" fill="rgb(211,48,49)" fg:x="8910" fg:w="12"/><text x="80.3111%" y="543.50"></text></g><g><title>unlink_chunk (5 samples, 0.04%)</title><rect x="80.1240%" y="517" width="0.0449%" height="15" fill="rgb(223,36,21)" fg:x="8917" fg:w="5"/><text x="80.3740%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (15 samples, 0.13%)</title><rect x="80.0521%" y="725" width="0.1348%" height="15" fill="rgb(207,123,46)" fg:x="8909" fg:w="15"/><text x="80.3021%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (15 samples, 0.13%)</title><rect x="80.0521%" y="709" width="0.1348%" height="15" fill="rgb(240,218,32)" fg:x="8909" fg:w="15"/><text x="80.3021%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (15 samples, 0.13%)</title><rect x="80.0521%" y="693" width="0.1348%" height="15" fill="rgb(252,5,43)" fg:x="8909" fg:w="15"/><text x="80.3021%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (15 samples, 0.13%)</title><rect x="80.0521%" y="677" width="0.1348%" height="15" fill="rgb(252,84,19)" fg:x="8909" fg:w="15"/><text x="80.3021%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (15 samples, 0.13%)</title><rect x="80.0521%" y="661" width="0.1348%" height="15" fill="rgb(243,152,39)" fg:x="8909" fg:w="15"/><text x="80.3021%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.13%)</title><rect x="80.0521%" y="645" width="0.1348%" height="15" fill="rgb(234,160,15)" fg:x="8909" fg:w="15"/><text x="80.3021%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.13%)</title><rect x="80.0521%" y="629" width="0.1348%" height="15" fill="rgb(237,34,20)" fg:x="8909" fg:w="15"/><text x="80.3021%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.13%)</title><rect x="80.0521%" y="613" width="0.1348%" height="15" fill="rgb(229,97,13)" fg:x="8909" fg:w="15"/><text x="80.3021%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.13%)</title><rect x="80.0611%" y="597" width="0.1258%" height="15" fill="rgb(234,71,50)" fg:x="8910" fg:w="14"/><text x="80.3111%" y="607.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.13%)</title><rect x="80.0611%" y="581" width="0.1258%" height="15" fill="rgb(253,155,4)" fg:x="8910" fg:w="14"/><text x="80.3111%" y="591.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.13%)</title><rect x="80.0611%" y="565" width="0.1258%" height="15" fill="rgb(222,185,37)" fg:x="8910" fg:w="14"/><text x="80.3111%" y="575.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.13%)</title><rect x="80.0611%" y="549" width="0.1258%" height="15" fill="rgb(251,177,13)" fg:x="8910" fg:w="14"/><text x="80.3111%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="80.2049%" y="629" width="0.0180%" height="15" fill="rgb(250,179,40)" fg:x="8926" fg:w="2"/><text x="80.4549%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="80.2049%" y="613" width="0.0180%" height="15" fill="rgb(242,44,2)" fg:x="8926" fg:w="2"/><text x="80.4549%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="80.2049%" y="597" width="0.0180%" height="15" fill="rgb(216,177,13)" fg:x="8926" fg:w="2"/><text x="80.4549%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="80.2049%" y="581" width="0.0180%" height="15" fill="rgb(216,106,43)" fg:x="8926" fg:w="2"/><text x="80.4549%" y="591.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="80.2049%" y="565" width="0.0180%" height="15" fill="rgb(216,183,2)" fg:x="8926" fg:w="2"/><text x="80.4549%" y="575.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="80.2049%" y="549" width="0.0180%" height="15" fill="rgb(249,75,3)" fg:x="8926" fg:w="2"/><text x="80.4549%" y="559.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="80.2049%" y="533" width="0.0180%" height="15" fill="rgb(219,67,39)" fg:x="8926" fg:w="2"/><text x="80.4549%" y="543.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="80.2049%" y="517" width="0.0180%" height="15" fill="rgb(253,228,2)" fg:x="8926" fg:w="2"/><text x="80.4549%" y="527.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (20 samples, 0.18%)</title><rect x="80.0521%" y="741" width="0.1797%" height="15" fill="rgb(235,138,27)" fg:x="8909" fg:w="20"/><text x="80.3021%" y="751.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.04%)</title><rect x="80.1869%" y="725" width="0.0449%" height="15" fill="rgb(236,97,51)" fg:x="8924" fg:w="5"/><text x="80.4369%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="80.2049%" y="709" width="0.0270%" height="15" fill="rgb(240,80,30)" fg:x="8926" fg:w="3"/><text x="80.4549%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="80.2049%" y="693" width="0.0270%" height="15" fill="rgb(230,178,19)" fg:x="8926" fg:w="3"/><text x="80.4549%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="80.2049%" y="677" width="0.0270%" height="15" fill="rgb(210,190,27)" fg:x="8926" fg:w="3"/><text x="80.4549%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="80.2049%" y="661" width="0.0270%" height="15" fill="rgb(222,107,31)" fg:x="8926" fg:w="3"/><text x="80.4549%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="80.2049%" y="645" width="0.0270%" height="15" fill="rgb(216,127,34)" fg:x="8926" fg:w="3"/><text x="80.4549%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="80.2318%" y="725" width="0.0180%" height="15" fill="rgb(234,116,52)" fg:x="8929" fg:w="2"/><text x="80.4818%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="80.2318%" y="709" width="0.0180%" height="15" fill="rgb(222,124,15)" fg:x="8929" fg:w="2"/><text x="80.4818%" y="719.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="80.2318%" y="693" width="0.0180%" height="15" fill="rgb(231,179,28)" fg:x="8929" fg:w="2"/><text x="80.4818%" y="703.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="80.2318%" y="677" width="0.0180%" height="15" fill="rgb(226,93,45)" fg:x="8929" fg:w="2"/><text x="80.4818%" y="687.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="80.2318%" y="661" width="0.0180%" height="15" fill="rgb(215,8,51)" fg:x="8929" fg:w="2"/><text x="80.4818%" y="671.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="80.2318%" y="645" width="0.0180%" height="15" fill="rgb(223,106,5)" fg:x="8929" fg:w="2"/><text x="80.4818%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="80.2318%" y="629" width="0.0180%" height="15" fill="rgb(250,191,5)" fg:x="8929" fg:w="2"/><text x="80.4818%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="80.2318%" y="613" width="0.0180%" height="15" fill="rgb(242,132,44)" fg:x="8929" fg:w="2"/><text x="80.4818%" y="623.50"></text></g><g><title>&lt;graph::Vertex as core::clone::Clone&gt;::clone (6 samples, 0.05%)</title><rect x="80.2318%" y="741" width="0.0539%" height="15" fill="rgb(251,152,29)" fg:x="8929" fg:w="6"/><text x="80.4818%" y="751.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="80.2498%" y="725" width="0.0359%" height="15" fill="rgb(218,179,5)" fg:x="8931" fg:w="4"/><text x="80.4998%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="80.2588%" y="709" width="0.0270%" height="15" fill="rgb(227,67,19)" fg:x="8932" fg:w="3"/><text x="80.5088%" y="719.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="80.2678%" y="693" width="0.0180%" height="15" fill="rgb(233,119,31)" fg:x="8933" fg:w="2"/><text x="80.5178%" y="703.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="80.2678%" y="677" width="0.0180%" height="15" fill="rgb(241,120,22)" fg:x="8933" fg:w="2"/><text x="80.5178%" y="687.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="80.2678%" y="661" width="0.0180%" height="15" fill="rgb(224,102,30)" fg:x="8933" fg:w="2"/><text x="80.5178%" y="671.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="80.2678%" y="645" width="0.0180%" height="15" fill="rgb(210,164,37)" fg:x="8933" fg:w="2"/><text x="80.5178%" y="655.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,298 samples, 20.65%)</title><rect x="59.6550%" y="757" width="20.6488%" height="15" fill="rgb(226,191,16)" fg:x="6639" fg:w="2298"/><text x="59.9050%" y="767.50">&lt;alloc::collections::btree::map:..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="80.3037%" y="757" width="0.0180%" height="15" fill="rgb(214,40,45)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="80.3037%" y="741" width="0.0180%" height="15" fill="rgb(244,29,26)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="751.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="80.3037%" y="725" width="0.0180%" height="15" fill="rgb(216,16,5)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="735.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="80.3037%" y="709" width="0.0180%" height="15" fill="rgb(249,76,35)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="719.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="80.3037%" y="693" width="0.0180%" height="15" fill="rgb(207,11,44)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="703.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="80.3037%" y="677" width="0.0180%" height="15" fill="rgb(228,190,49)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="80.3037%" y="661" width="0.0180%" height="15" fill="rgb(214,173,12)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="80.3037%" y="645" width="0.0180%" height="15" fill="rgb(218,26,35)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="80.3037%" y="629" width="0.0180%" height="15" fill="rgb(220,200,19)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="639.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="80.3037%" y="613" width="0.0180%" height="15" fill="rgb(239,95,49)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="623.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="80.3037%" y="597" width="0.0180%" height="15" fill="rgb(235,85,53)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="607.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="80.3037%" y="581" width="0.0180%" height="15" fill="rgb(233,133,31)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="591.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="80.3037%" y="565" width="0.0180%" height="15" fill="rgb(218,25,20)" fg:x="8937" fg:w="2"/><text x="80.5537%" y="575.50"></text></g><g><title>core::option::Option&lt;&amp;mut T&gt;::cloned (2,735 samples, 24.58%)</title><rect x="55.7642%" y="837" width="24.5754%" height="15" fill="rgb(252,210,38)" fg:x="6206" fg:w="2735"/><text x="56.0142%" y="847.50">core::option::Option&lt;&amp;mut T&gt;::cloned</text></g><g><title>&lt;machine::Context as core::clone::Clone&gt;::clone (2,735 samples, 24.58%)</title><rect x="55.7642%" y="821" width="24.5754%" height="15" fill="rgb(242,134,21)" fg:x="6206" fg:w="2735"/><text x="56.0142%" y="831.50">&lt;machine::Context as core::clone::Clone..</text></g><g><title>&lt;graph::Model as core::clone::Clone&gt;::clone (2,302 samples, 20.68%)</title><rect x="59.6550%" y="805" width="20.6847%" height="15" fill="rgb(213,28,48)" fg:x="6639" fg:w="2302"/><text x="59.9050%" y="815.50">&lt;graph::Model as core::clone::Clo..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (2,302 samples, 20.68%)</title><rect x="59.6550%" y="789" width="20.6847%" height="15" fill="rgb(250,196,2)" fg:x="6639" fg:w="2302"/><text x="59.9050%" y="799.50">&lt;alloc::collections::btree::map::..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,302 samples, 20.68%)</title><rect x="59.6550%" y="773" width="20.6847%" height="15" fill="rgb(227,5,17)" fg:x="6639" fg:w="2302"/><text x="59.9050%" y="783.50">&lt;alloc::collections::btree::map::..</text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="80.3217%" y="757" width="0.0180%" height="15" fill="rgb(221,226,24)" fg:x="8939" fg:w="2"/><text x="80.5717%" y="767.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (42 samples, 0.38%)</title><rect x="80.4475%" y="741" width="0.3774%" height="15" fill="rgb(211,5,48)" fg:x="8953" fg:w="42"/><text x="80.6975%" y="751.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (42 samples, 0.38%)</title><rect x="80.4475%" y="725" width="0.3774%" height="15" fill="rgb(219,150,6)" fg:x="8953" fg:w="42"/><text x="80.6975%" y="735.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (42 samples, 0.38%)</title><rect x="80.4475%" y="709" width="0.3774%" height="15" fill="rgb(251,46,16)" fg:x="8953" fg:w="42"/><text x="80.6975%" y="719.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (42 samples, 0.38%)</title><rect x="80.4475%" y="693" width="0.3774%" height="15" fill="rgb(220,204,40)" fg:x="8953" fg:w="42"/><text x="80.6975%" y="703.50"></text></g><g><title>alloc::alloc::dealloc (42 samples, 0.38%)</title><rect x="80.4475%" y="677" width="0.3774%" height="15" fill="rgb(211,85,2)" fg:x="8953" fg:w="42"/><text x="80.6975%" y="687.50"></text></g><g><title>__GI___libc_free (42 samples, 0.38%)</title><rect x="80.4475%" y="661" width="0.3774%" height="15" fill="rgb(229,17,7)" fg:x="8953" fg:w="42"/><text x="80.6975%" y="671.50"></text></g><g><title>_int_free_maybe_consolidate (42 samples, 0.38%)</title><rect x="80.4475%" y="645" width="0.3774%" height="15" fill="rgb(239,72,28)" fg:x="8953" fg:w="42"/><text x="80.6975%" y="655.50"></text></g><g><title>malloc_consolidate (42 samples, 0.38%)</title><rect x="80.4475%" y="629" width="0.3774%" height="15" fill="rgb(230,47,54)" fg:x="8953" fg:w="42"/><text x="80.6975%" y="639.50"></text></g><g><title>unlink_chunk (4 samples, 0.04%)</title><rect x="80.7889%" y="613" width="0.0359%" height="15" fill="rgb(214,50,8)" fg:x="8991" fg:w="4"/><text x="81.0389%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (8 samples, 0.07%)</title><rect x="80.9956%" y="661" width="0.0719%" height="15" fill="rgb(216,198,43)" fg:x="9014" fg:w="8"/><text x="81.2456%" y="671.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (12 samples, 0.11%)</title><rect x="81.0675%" y="661" width="0.1078%" height="15" fill="rgb(234,20,35)" fg:x="9022" fg:w="12"/><text x="81.3175%" y="671.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (7 samples, 0.06%)</title><rect x="81.1124%" y="645" width="0.0629%" height="15" fill="rgb(254,45,19)" fg:x="9027" fg:w="7"/><text x="81.3624%" y="655.50"></text></g><g><title>_int_free (10 samples, 0.09%)</title><rect x="81.2202%" y="597" width="0.0899%" height="15" fill="rgb(219,14,44)" fg:x="9039" fg:w="10"/><text x="81.4702%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 0.34%)</title><rect x="81.1843%" y="645" width="0.3415%" height="15" fill="rgb(217,220,26)" fg:x="9035" fg:w="38"/><text x="81.4343%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.34%)</title><rect x="81.1843%" y="629" width="0.3415%" height="15" fill="rgb(213,158,28)" fg:x="9035" fg:w="38"/><text x="81.4343%" y="639.50"></text></g><g><title>__GI___libc_free (38 samples, 0.34%)</title><rect x="81.1843%" y="613" width="0.3415%" height="15" fill="rgb(252,51,52)" fg:x="9035" fg:w="38"/><text x="81.4343%" y="623.50"></text></g><g><title>_int_free_merge_chunk (23 samples, 0.21%)</title><rect x="81.3191%" y="597" width="0.2067%" height="15" fill="rgb(246,89,16)" fg:x="9050" fg:w="23"/><text x="81.5691%" y="607.50"></text></g><g><title>_int_free_create_chunk (8 samples, 0.07%)</title><rect x="81.4539%" y="581" width="0.0719%" height="15" fill="rgb(216,158,49)" fg:x="9065" fg:w="8"/><text x="81.7039%" y="591.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="81.5078%" y="565" width="0.0180%" height="15" fill="rgb(236,107,19)" fg:x="9071" fg:w="2"/><text x="81.7578%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (80 samples, 0.72%)</title><rect x="80.8249%" y="725" width="0.7188%" height="15" fill="rgb(228,185,30)" fg:x="8995" fg:w="80"/><text x="81.0749%" y="735.50"></text></g><g><title>alloc::collections::btree::mem::replace (80 samples, 0.72%)</title><rect x="80.8249%" y="709" width="0.7188%" height="15" fill="rgb(246,134,8)" fg:x="8995" fg:w="80"/><text x="81.0749%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (63 samples, 0.57%)</title><rect x="80.9776%" y="693" width="0.5661%" height="15" fill="rgb(214,143,50)" fg:x="9012" fg:w="63"/><text x="81.2276%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (63 samples, 0.57%)</title><rect x="80.9776%" y="677" width="0.5661%" height="15" fill="rgb(228,75,8)" fg:x="9012" fg:w="63"/><text x="81.2276%" y="687.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (41 samples, 0.37%)</title><rect x="81.1753%" y="661" width="0.3684%" height="15" fill="rgb(207,175,4)" fg:x="9034" fg:w="41"/><text x="81.4253%" y="671.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (2 samples, 0.02%)</title><rect x="81.5257%" y="645" width="0.0180%" height="15" fill="rgb(205,108,24)" fg:x="9073" fg:w="2"/><text x="81.7757%" y="655.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (150 samples, 1.35%)</title><rect x="80.3486%" y="757" width="1.3478%" height="15" fill="rgb(244,120,49)" fg:x="8942" fg:w="150"/><text x="80.5986%" y="767.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (97 samples, 0.87%)</title><rect x="80.8249%" y="741" width="0.8716%" height="15" fill="rgb(223,47,38)" fg:x="8995" fg:w="97"/><text x="81.0749%" y="751.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (17 samples, 0.15%)</title><rect x="81.5437%" y="725" width="0.1528%" height="15" fill="rgb(229,179,11)" fg:x="9075" fg:w="17"/><text x="81.7937%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (7 samples, 0.06%)</title><rect x="81.7773%" y="693" width="0.0629%" height="15" fill="rgb(231,122,1)" fg:x="9101" fg:w="7"/><text x="82.0273%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (7 samples, 0.06%)</title><rect x="81.7773%" y="677" width="0.0629%" height="15" fill="rgb(245,119,9)" fg:x="9101" fg:w="7"/><text x="82.0273%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (7 samples, 0.06%)</title><rect x="81.7773%" y="661" width="0.0629%" height="15" fill="rgb(241,163,25)" fg:x="9101" fg:w="7"/><text x="82.0273%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (7 samples, 0.06%)</title><rect x="81.7773%" y="645" width="0.0629%" height="15" fill="rgb(217,214,3)" fg:x="9101" fg:w="7"/><text x="82.0273%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (7 samples, 0.06%)</title><rect x="81.7773%" y="629" width="0.0629%" height="15" fill="rgb(240,86,28)" fg:x="9101" fg:w="7"/><text x="82.0273%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (7 samples, 0.06%)</title><rect x="81.7773%" y="613" width="0.0629%" height="15" fill="rgb(215,47,9)" fg:x="9101" fg:w="7"/><text x="82.0273%" y="623.50"></text></g><g><title>[graphwalker] (14 samples, 0.13%)</title><rect x="81.7324%" y="725" width="0.1258%" height="15" fill="rgb(252,25,45)" fg:x="9096" fg:w="14"/><text x="81.9824%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph::Edge&gt; (14 samples, 0.13%)</title><rect x="81.7324%" y="709" width="0.1258%" height="15" fill="rgb(251,164,9)" fg:x="9096" fg:w="14"/><text x="81.9824%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (2 samples, 0.02%)</title><rect x="81.8402%" y="693" width="0.0180%" height="15" fill="rgb(233,194,0)" fg:x="9108" fg:w="2"/><text x="82.0902%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="81.8402%" y="677" width="0.0180%" height="15" fill="rgb(249,111,24)" fg:x="9108" fg:w="2"/><text x="82.0902%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="81.8402%" y="661" width="0.0180%" height="15" fill="rgb(250,223,3)" fg:x="9108" fg:w="2"/><text x="82.0902%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="81.8402%" y="645" width="0.0180%" height="15" fill="rgb(236,178,37)" fg:x="9108" fg:w="2"/><text x="82.0902%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="81.8402%" y="629" width="0.0180%" height="15" fill="rgb(241,158,50)" fg:x="9108" fg:w="2"/><text x="82.0902%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="81.8402%" y="613" width="0.0180%" height="15" fill="rgb(213,121,41)" fg:x="9108" fg:w="2"/><text x="82.0902%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="81.8402%" y="597" width="0.0180%" height="15" fill="rgb(240,92,3)" fg:x="9108" fg:w="2"/><text x="82.0902%" y="607.50"></text></g><g><title>_int_free (97 samples, 0.87%)</title><rect x="82.0379%" y="709" width="0.8716%" height="15" fill="rgb(205,123,3)" fg:x="9130" fg:w="97"/><text x="82.2879%" y="719.50"></text></g><g><title>free_perturb (8 samples, 0.07%)</title><rect x="82.8376%" y="693" width="0.0719%" height="15" fill="rgb(205,97,47)" fg:x="9219" fg:w="8"/><text x="83.0876%" y="703.50"></text></g><g><title>__GI___libc_free (122 samples, 1.10%)</title><rect x="81.8582%" y="725" width="1.0962%" height="15" fill="rgb(247,152,14)" fg:x="9110" fg:w="122"/><text x="82.1082%" y="735.50"></text></g><g><title>arena_for_chunk (5 samples, 0.04%)</title><rect x="82.9095%" y="709" width="0.0449%" height="15" fill="rgb(248,195,53)" fg:x="9227" fg:w="5"/><text x="83.1595%" y="719.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.05%)</title><rect x="82.9544%" y="725" width="0.0539%" height="15" fill="rgb(226,201,16)" fg:x="9232" fg:w="6"/><text x="83.2044%" y="735.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.05%)</title><rect x="82.9544%" y="709" width="0.0539%" height="15" fill="rgb(205,98,0)" fg:x="9232" fg:w="6"/><text x="83.2044%" y="719.50"></text></g><g><title>__rust_dealloc (8 samples, 0.07%)</title><rect x="83.0084%" y="725" width="0.0719%" height="15" fill="rgb(214,191,48)" fg:x="9238" fg:w="8"/><text x="83.2584%" y="735.50"></text></g><g><title>_int_free (99 samples, 0.89%)</title><rect x="83.6373%" y="613" width="0.8896%" height="15" fill="rgb(237,112,39)" fg:x="9308" fg:w="99"/><text x="83.8873%" y="623.50"></text></g><g><title>free_perturb (5 samples, 0.04%)</title><rect x="84.4820%" y="597" width="0.0449%" height="15" fill="rgb(247,203,27)" fg:x="9402" fg:w="5"/><text x="84.7320%" y="607.50"></text></g><g><title>__GI___libc_free (159 samples, 1.43%)</title><rect x="83.2150%" y="629" width="1.4287%" height="15" fill="rgb(235,124,28)" fg:x="9261" fg:w="159"/><text x="83.4650%" y="639.50"></text></g><g><title>arena_for_chunk (13 samples, 0.12%)</title><rect x="84.5269%" y="613" width="0.1168%" height="15" fill="rgb(208,207,46)" fg:x="9407" fg:w="13"/><text x="84.7769%" y="623.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="84.6437%" y="629" width="0.0270%" height="15" fill="rgb(234,176,4)" fg:x="9420" fg:w="3"/><text x="84.8937%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 0.03%)</title><rect x="84.6437%" y="613" width="0.0270%" height="15" fill="rgb(230,133,28)" fg:x="9420" fg:w="3"/><text x="84.8937%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (185 samples, 1.66%)</title><rect x="83.0802%" y="725" width="1.6623%" height="15" fill="rgb(211,137,40)" fg:x="9246" fg:w="185"/><text x="83.3302%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (185 samples, 1.66%)</title><rect x="83.0802%" y="709" width="1.6623%" height="15" fill="rgb(254,35,13)" fg:x="9246" fg:w="185"/><text x="83.3302%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (185 samples, 1.66%)</title><rect x="83.0802%" y="693" width="1.6623%" height="15" fill="rgb(225,49,51)" fg:x="9246" fg:w="185"/><text x="83.3302%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (185 samples, 1.66%)</title><rect x="83.0802%" y="677" width="1.6623%" height="15" fill="rgb(251,10,15)" fg:x="9246" fg:w="185"/><text x="83.3302%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (178 samples, 1.60%)</title><rect x="83.1431%" y="661" width="1.5994%" height="15" fill="rgb(228,207,15)" fg:x="9253" fg:w="178"/><text x="83.3931%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (178 samples, 1.60%)</title><rect x="83.1431%" y="645" width="1.5994%" height="15" fill="rgb(241,99,19)" fg:x="9253" fg:w="178"/><text x="83.3931%" y="655.50"></text></g><g><title>__rust_dealloc (8 samples, 0.07%)</title><rect x="84.6707%" y="629" width="0.0719%" height="15" fill="rgb(207,104,49)" fg:x="9423" fg:w="8"/><text x="84.9207%" y="639.50"></text></g><g><title>_int_free (188 samples, 1.69%)</title><rect x="85.5153%" y="597" width="1.6893%" height="15" fill="rgb(234,99,18)" fg:x="9517" fg:w="188"/><text x="85.7653%" y="607.50"></text></g><g><title>free_perturb (12 samples, 0.11%)</title><rect x="87.0968%" y="581" width="0.1078%" height="15" fill="rgb(213,191,49)" fg:x="9693" fg:w="12"/><text x="87.3468%" y="591.50"></text></g><g><title>__GI___libc_free (266 samples, 2.39%)</title><rect x="84.9313%" y="613" width="2.3902%" height="15" fill="rgb(210,226,19)" fg:x="9452" fg:w="266"/><text x="85.1813%" y="623.50">__..</text></g><g><title>arena_for_chunk (13 samples, 0.12%)</title><rect x="87.2046%" y="597" width="0.1168%" height="15" fill="rgb(229,97,18)" fg:x="9705" fg:w="13"/><text x="87.4546%" y="607.50"></text></g><g><title>__rdl_dealloc (13 samples, 0.12%)</title><rect x="87.3214%" y="613" width="0.1168%" height="15" fill="rgb(211,167,15)" fg:x="9718" fg:w="13"/><text x="87.5714%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (13 samples, 0.12%)</title><rect x="87.3214%" y="597" width="0.1168%" height="15" fill="rgb(210,169,34)" fg:x="9718" fg:w="13"/><text x="87.5714%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (316 samples, 2.84%)</title><rect x="84.7516%" y="645" width="2.8394%" height="15" fill="rgb(241,121,31)" fg:x="9432" fg:w="316"/><text x="85.0016%" y="655.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (316 samples, 2.84%)</title><rect x="84.7516%" y="629" width="2.8394%" height="15" fill="rgb(232,40,11)" fg:x="9432" fg:w="316"/><text x="85.0016%" y="639.50">al..</text></g><g><title>__rust_dealloc (17 samples, 0.15%)</title><rect x="87.4382%" y="613" width="0.1528%" height="15" fill="rgb(205,86,26)" fg:x="9731" fg:w="17"/><text x="87.6882%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (322 samples, 2.89%)</title><rect x="84.7426%" y="709" width="2.8933%" height="15" fill="rgb(231,126,28)" fg:x="9431" fg:w="322"/><text x="84.9926%" y="719.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (322 samples, 2.89%)</title><rect x="84.7426%" y="693" width="2.8933%" height="15" fill="rgb(219,221,18)" fg:x="9431" fg:w="322"/><text x="84.9926%" y="703.50">co..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (322 samples, 2.89%)</title><rect x="84.7426%" y="677" width="2.8933%" height="15" fill="rgb(211,40,0)" fg:x="9431" fg:w="322"/><text x="84.9926%" y="687.50">co..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (322 samples, 2.89%)</title><rect x="84.7426%" y="661" width="2.8933%" height="15" fill="rgb(239,85,43)" fg:x="9431" fg:w="322"/><text x="84.9926%" y="671.50">&lt;a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.04%)</title><rect x="87.5910%" y="645" width="0.0449%" height="15" fill="rgb(231,55,21)" fg:x="9748" fg:w="5"/><text x="87.8410%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (14 samples, 0.13%)</title><rect x="87.6359%" y="693" width="0.1258%" height="15" fill="rgb(225,184,43)" fg:x="9753" fg:w="14"/><text x="87.8859%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (14 samples, 0.13%)</title><rect x="87.6359%" y="677" width="0.1258%" height="15" fill="rgb(251,158,41)" fg:x="9753" fg:w="14"/><text x="87.8859%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (23 samples, 0.21%)</title><rect x="87.6359%" y="709" width="0.2067%" height="15" fill="rgb(234,159,37)" fg:x="9753" fg:w="23"/><text x="87.8859%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (9 samples, 0.08%)</title><rect x="87.7617%" y="693" width="0.0809%" height="15" fill="rgb(216,204,22)" fg:x="9767" fg:w="9"/><text x="88.0117%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (9 samples, 0.08%)</title><rect x="87.7617%" y="677" width="0.0809%" height="15" fill="rgb(214,17,3)" fg:x="9767" fg:w="9"/><text x="88.0117%" y="687.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (9 samples, 0.08%)</title><rect x="87.7617%" y="661" width="0.0809%" height="15" fill="rgb(212,111,17)" fg:x="9767" fg:w="9"/><text x="88.0117%" y="671.50"></text></g><g><title>_int_free (70 samples, 0.63%)</title><rect x="88.1571%" y="581" width="0.6290%" height="15" fill="rgb(221,157,24)" fg:x="9811" fg:w="70"/><text x="88.4071%" y="591.50"></text></g><g><title>__GI___libc_free (111 samples, 1.00%)</title><rect x="87.8695%" y="597" width="0.9974%" height="15" fill="rgb(252,16,13)" fg:x="9779" fg:w="111"/><text x="88.1195%" y="607.50"></text></g><g><title>arena_for_chunk (9 samples, 0.08%)</title><rect x="88.7861%" y="581" width="0.0809%" height="15" fill="rgb(221,62,2)" fg:x="9881" fg:w="9"/><text x="89.0361%" y="591.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.04%)</title><rect x="88.8669%" y="597" width="0.0359%" height="15" fill="rgb(247,87,22)" fg:x="9890" fg:w="4"/><text x="89.1169%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.04%)</title><rect x="88.8669%" y="581" width="0.0359%" height="15" fill="rgb(215,73,9)" fg:x="9890" fg:w="4"/><text x="89.1169%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (128 samples, 1.15%)</title><rect x="87.8695%" y="629" width="1.1501%" height="15" fill="rgb(207,175,33)" fg:x="9779" fg:w="128"/><text x="88.1195%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (128 samples, 1.15%)</title><rect x="87.8695%" y="613" width="1.1501%" height="15" fill="rgb(243,129,54)" fg:x="9779" fg:w="128"/><text x="88.1195%" y="623.50"></text></g><g><title>__rust_dealloc (13 samples, 0.12%)</title><rect x="88.9029%" y="597" width="0.1168%" height="15" fill="rgb(227,119,45)" fg:x="9894" fg:w="13"/><text x="89.1529%" y="607.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (819 samples, 7.36%)</title><rect x="81.7324%" y="741" width="7.3592%" height="15" fill="rgb(205,109,36)" fg:x="9096" fg:w="819"/><text x="81.9824%" y="751.50">core::mem:..</text></g><g><title>core::ptr::drop_in_place&lt;graph::Edge&gt; (484 samples, 4.35%)</title><rect x="84.7426%" y="725" width="4.3490%" height="15" fill="rgb(205,6,39)" fg:x="9431" fg:w="484"/><text x="84.9926%" y="735.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (139 samples, 1.25%)</title><rect x="87.8426%" y="709" width="1.2490%" height="15" fill="rgb(221,32,16)" fg:x="9776" fg:w="139"/><text x="88.0926%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (136 samples, 1.22%)</title><rect x="87.8695%" y="693" width="1.2220%" height="15" fill="rgb(228,144,50)" fg:x="9779" fg:w="136"/><text x="88.1195%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (136 samples, 1.22%)</title><rect x="87.8695%" y="677" width="1.2220%" height="15" fill="rgb(229,201,53)" fg:x="9779" fg:w="136"/><text x="88.1195%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (136 samples, 1.22%)</title><rect x="87.8695%" y="661" width="1.2220%" height="15" fill="rgb(249,153,27)" fg:x="9779" fg:w="136"/><text x="88.1195%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (136 samples, 1.22%)</title><rect x="87.8695%" y="645" width="1.2220%" height="15" fill="rgb(227,106,25)" fg:x="9779" fg:w="136"/><text x="88.1195%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.07%)</title><rect x="89.0197%" y="629" width="0.0719%" height="15" fill="rgb(230,65,29)" fg:x="9907" fg:w="8"/><text x="89.2697%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,graph::Edge&gt;&gt; (983 samples, 8.83%)</title><rect x="80.3397%" y="837" width="8.8328%" height="15" fill="rgb(221,57,46)" fg:x="8941" fg:w="983"/><text x="80.5897%" y="847.50">core::ptr::d..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (983 samples, 8.83%)</title><rect x="80.3397%" y="821" width="8.8328%" height="15" fill="rgb(229,161,17)" fg:x="8941" fg:w="983"/><text x="80.5897%" y="831.50">&lt;alloc::coll..</text></g><g><title>core::mem::drop (983 samples, 8.83%)</title><rect x="80.3397%" y="805" width="8.8328%" height="15" fill="rgb(222,213,11)" fg:x="8941" fg:w="983"/><text x="80.5897%" y="815.50">core::mem::d..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,graph::Edge&gt;&gt; (983 samples, 8.83%)</title><rect x="80.3397%" y="789" width="8.8328%" height="15" fill="rgb(235,35,13)" fg:x="8941" fg:w="983"/><text x="80.5897%" y="799.50">core::ptr::d..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (983 samples, 8.83%)</title><rect x="80.3397%" y="773" width="8.8328%" height="15" fill="rgb(233,158,34)" fg:x="8941" fg:w="983"/><text x="80.5897%" y="783.50">&lt;alloc::coll..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (832 samples, 7.48%)</title><rect x="81.6965%" y="757" width="7.4760%" height="15" fill="rgb(215,151,48)" fg:x="9092" fg:w="832"/><text x="81.9465%" y="767.50">alloc::col..</text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (9 samples, 0.08%)</title><rect x="89.0916%" y="741" width="0.0809%" height="15" fill="rgb(229,84,14)" fg:x="9915" fg:w="9"/><text x="89.3416%" y="751.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (9 samples, 0.08%)</title><rect x="89.0916%" y="725" width="0.0809%" height="15" fill="rgb(229,68,14)" fg:x="9915" fg:w="9"/><text x="89.3416%" y="735.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.08%)</title><rect x="89.0916%" y="709" width="0.0809%" height="15" fill="rgb(243,106,26)" fg:x="9915" fg:w="9"/><text x="89.3416%" y="719.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.03%)</title><rect x="89.3162%" y="629" width="0.0270%" height="15" fill="rgb(206,45,38)" fg:x="9940" fg:w="3"/><text x="89.5662%" y="639.50"></text></g><g><title>malloc_consolidate (3 samples, 0.03%)</title><rect x="89.3162%" y="613" width="0.0270%" height="15" fill="rgb(226,6,15)" fg:x="9940" fg:w="3"/><text x="89.5662%" y="623.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (5 samples, 0.04%)</title><rect x="89.3162%" y="725" width="0.0449%" height="15" fill="rgb(232,22,54)" fg:x="9940" fg:w="5"/><text x="89.5662%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (5 samples, 0.04%)</title><rect x="89.3162%" y="709" width="0.0449%" height="15" fill="rgb(229,222,32)" fg:x="9940" fg:w="5"/><text x="89.5662%" y="719.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (5 samples, 0.04%)</title><rect x="89.3162%" y="693" width="0.0449%" height="15" fill="rgb(228,62,29)" fg:x="9940" fg:w="5"/><text x="89.5662%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="89.3162%" y="677" width="0.0449%" height="15" fill="rgb(251,103,34)" fg:x="9940" fg:w="5"/><text x="89.5662%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="89.3162%" y="661" width="0.0449%" height="15" fill="rgb(233,12,30)" fg:x="9940" fg:w="5"/><text x="89.5662%" y="671.50"></text></g><g><title>__GI___libc_free (5 samples, 0.04%)</title><rect x="89.3162%" y="645" width="0.0449%" height="15" fill="rgb(238,52,0)" fg:x="9940" fg:w="5"/><text x="89.5662%" y="655.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.02%)</title><rect x="89.3432%" y="629" width="0.0180%" height="15" fill="rgb(223,98,5)" fg:x="9943" fg:w="2"/><text x="89.5932%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (10 samples, 0.09%)</title><rect x="89.4690%" y="645" width="0.0899%" height="15" fill="rgb(228,75,37)" fg:x="9957" fg:w="10"/><text x="89.7190%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (4 samples, 0.04%)</title><rect x="89.5229%" y="629" width="0.0359%" height="15" fill="rgb(205,115,49)" fg:x="9963" fg:w="4"/><text x="89.7729%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (3 samples, 0.03%)</title><rect x="89.5319%" y="613" width="0.0270%" height="15" fill="rgb(250,154,43)" fg:x="9964" fg:w="3"/><text x="89.7819%" y="623.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (3 samples, 0.03%)</title><rect x="89.5319%" y="597" width="0.0270%" height="15" fill="rgb(226,43,29)" fg:x="9964" fg:w="3"/><text x="89.7819%" y="607.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (3 samples, 0.03%)</title><rect x="89.5319%" y="581" width="0.0270%" height="15" fill="rgb(249,228,39)" fg:x="9964" fg:w="3"/><text x="89.7819%" y="591.50"></text></g><g><title>core::ptr::read (3 samples, 0.03%)</title><rect x="89.5319%" y="565" width="0.0270%" height="15" fill="rgb(216,79,43)" fg:x="9964" fg:w="3"/><text x="89.7819%" y="575.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (15 samples, 0.13%)</title><rect x="89.5588%" y="645" width="0.1348%" height="15" fill="rgb(228,95,12)" fg:x="9967" fg:w="15"/><text x="89.8088%" y="655.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (9 samples, 0.08%)</title><rect x="89.6127%" y="629" width="0.0809%" height="15" fill="rgb(249,221,15)" fg:x="9973" fg:w="9"/><text x="89.8627%" y="639.50"></text></g><g><title>_int_free (12 samples, 0.11%)</title><rect x="89.7205%" y="581" width="0.1078%" height="15" fill="rgb(233,34,13)" fg:x="9985" fg:w="12"/><text x="89.9705%" y="591.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.02%)</title><rect x="89.8284%" y="581" width="0.0180%" height="15" fill="rgb(214,103,39)" fg:x="9997" fg:w="2"/><text x="90.0784%" y="591.50"></text></g><g><title>_int_free_merge_chunk (9 samples, 0.08%)</title><rect x="89.8463%" y="581" width="0.0809%" height="15" fill="rgb(251,126,39)" fg:x="9999" fg:w="9"/><text x="90.0963%" y="591.50"></text></g><g><title>_int_free_create_chunk (6 samples, 0.05%)</title><rect x="89.8733%" y="565" width="0.0539%" height="15" fill="rgb(214,216,36)" fg:x="10002" fg:w="6"/><text x="90.1233%" y="575.50"></text></g><g><title>__GI___libc_free (27 samples, 0.24%)</title><rect x="89.6936%" y="597" width="0.2426%" height="15" fill="rgb(220,221,8)" fg:x="9982" fg:w="27"/><text x="89.9436%" y="607.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (65 samples, 0.58%)</title><rect x="89.3611%" y="709" width="0.5841%" height="15" fill="rgb(240,216,3)" fg:x="9945" fg:w="65"/><text x="89.6111%" y="719.50"></text></g><g><title>alloc::collections::btree::mem::replace (65 samples, 0.58%)</title><rect x="89.3611%" y="693" width="0.5841%" height="15" fill="rgb(232,218,17)" fg:x="9945" fg:w="65"/><text x="89.6111%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (55 samples, 0.49%)</title><rect x="89.4510%" y="677" width="0.4942%" height="15" fill="rgb(229,163,45)" fg:x="9955" fg:w="55"/><text x="89.7010%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (55 samples, 0.49%)</title><rect x="89.4510%" y="661" width="0.4942%" height="15" fill="rgb(231,110,42)" fg:x="9955" fg:w="55"/><text x="89.7010%" y="671.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (28 samples, 0.25%)</title><rect x="89.6936%" y="645" width="0.2516%" height="15" fill="rgb(208,170,48)" fg:x="9982" fg:w="28"/><text x="89.9436%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.25%)</title><rect x="89.6936%" y="629" width="0.2516%" height="15" fill="rgb(239,116,25)" fg:x="9982" fg:w="28"/><text x="89.9436%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (28 samples, 0.25%)</title><rect x="89.6936%" y="613" width="0.2516%" height="15" fill="rgb(219,200,50)" fg:x="9982" fg:w="28"/><text x="89.9436%" y="623.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (89 samples, 0.80%)</title><rect x="89.2174%" y="741" width="0.7997%" height="15" fill="rgb(245,200,0)" fg:x="9929" fg:w="89"/><text x="89.4674%" y="751.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (73 samples, 0.66%)</title><rect x="89.3611%" y="725" width="0.6559%" height="15" fill="rgb(245,119,33)" fg:x="9945" fg:w="73"/><text x="89.6111%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (8 samples, 0.07%)</title><rect x="89.9452%" y="709" width="0.0719%" height="15" fill="rgb(231,125,12)" fg:x="10010" fg:w="8"/><text x="90.1952%" y="719.50"></text></g><g><title>[graphwalker] (3 samples, 0.03%)</title><rect x="90.2687%" y="597" width="0.0270%" height="15" fill="rgb(216,96,41)" fg:x="10046" fg:w="3"/><text x="90.5187%" y="607.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="90.2687%" y="581" width="0.0270%" height="15" fill="rgb(248,43,45)" fg:x="10046" fg:w="3"/><text x="90.5187%" y="591.50"></text></g><g><title>_int_free (60 samples, 0.54%)</title><rect x="90.2956%" y="597" width="0.5391%" height="15" fill="rgb(217,222,7)" fg:x="10049" fg:w="60"/><text x="90.5456%" y="607.50"></text></g><g><title>free_perturb (4 samples, 0.04%)</title><rect x="90.7988%" y="581" width="0.0359%" height="15" fill="rgb(233,28,6)" fg:x="10105" fg:w="4"/><text x="91.0488%" y="591.50"></text></g><g><title>__GI___libc_free (89 samples, 0.80%)</title><rect x="90.0530%" y="613" width="0.7997%" height="15" fill="rgb(231,218,15)" fg:x="10022" fg:w="89"/><text x="90.3030%" y="623.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="90.8348%" y="597" width="0.0180%" height="15" fill="rgb(226,171,48)" fg:x="10109" fg:w="2"/><text x="91.0848%" y="607.50"></text></g><g><title>__rdl_dealloc (4 samples, 0.04%)</title><rect x="90.8527%" y="613" width="0.0359%" height="15" fill="rgb(235,201,9)" fg:x="10111" fg:w="4"/><text x="91.1027%" y="623.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (4 samples, 0.04%)</title><rect x="90.8527%" y="597" width="0.0359%" height="15" fill="rgb(217,80,15)" fg:x="10111" fg:w="4"/><text x="91.1027%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (102 samples, 0.92%)</title><rect x="90.0350%" y="645" width="0.9165%" height="15" fill="rgb(219,152,8)" fg:x="10020" fg:w="102"/><text x="90.2850%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (102 samples, 0.92%)</title><rect x="90.0350%" y="629" width="0.9165%" height="15" fill="rgb(243,107,38)" fg:x="10020" fg:w="102"/><text x="90.2850%" y="639.50"></text></g><g><title>__rust_dealloc (7 samples, 0.06%)</title><rect x="90.8887%" y="613" width="0.0629%" height="15" fill="rgb(231,17,5)" fg:x="10115" fg:w="7"/><text x="91.1387%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,u32&gt;&gt; (202 samples, 1.82%)</title><rect x="89.1724%" y="821" width="1.8151%" height="15" fill="rgb(209,25,54)" fg:x="9924" fg:w="202"/><text x="89.4224%" y="831.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (202 samples, 1.82%)</title><rect x="89.1724%" y="805" width="1.8151%" height="15" fill="rgb(219,0,2)" fg:x="9924" fg:w="202"/><text x="89.4224%" y="815.50">&lt;..</text></g><g><title>core::mem::drop (202 samples, 1.82%)</title><rect x="89.1724%" y="789" width="1.8151%" height="15" fill="rgb(246,9,5)" fg:x="9924" fg:w="202"/><text x="89.4224%" y="799.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,u32&gt;&gt; (202 samples, 1.82%)</title><rect x="89.1724%" y="773" width="1.8151%" height="15" fill="rgb(226,159,4)" fg:x="9924" fg:w="202"/><text x="89.4224%" y="783.50">c..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (202 samples, 1.82%)</title><rect x="89.1724%" y="757" width="1.8151%" height="15" fill="rgb(219,175,34)" fg:x="9924" fg:w="202"/><text x="89.4224%" y="767.50">&lt;..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (108 samples, 0.97%)</title><rect x="90.0171%" y="741" width="0.9704%" height="15" fill="rgb(236,10,46)" fg:x="10018" fg:w="108"/><text x="90.2671%" y="751.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (108 samples, 0.97%)</title><rect x="90.0171%" y="725" width="0.9704%" height="15" fill="rgb(240,211,16)" fg:x="10018" fg:w="108"/><text x="90.2671%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (108 samples, 0.97%)</title><rect x="90.0171%" y="709" width="0.9704%" height="15" fill="rgb(205,3,43)" fg:x="10018" fg:w="108"/><text x="90.2671%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (108 samples, 0.97%)</title><rect x="90.0171%" y="693" width="0.9704%" height="15" fill="rgb(245,7,22)" fg:x="10018" fg:w="108"/><text x="90.2671%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (108 samples, 0.97%)</title><rect x="90.0171%" y="677" width="0.9704%" height="15" fill="rgb(239,132,32)" fg:x="10018" fg:w="108"/><text x="90.2671%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (108 samples, 0.97%)</title><rect x="90.0171%" y="661" width="0.9704%" height="15" fill="rgb(228,202,34)" fg:x="10018" fg:w="108"/><text x="90.2671%" y="671.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.04%)</title><rect x="90.9516%" y="645" width="0.0359%" height="15" fill="rgb(254,200,22)" fg:x="10122" fg:w="4"/><text x="91.2016%" y="655.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (23 samples, 0.21%)</title><rect x="91.0684%" y="709" width="0.2067%" height="15" fill="rgb(219,10,39)" fg:x="10135" fg:w="23"/><text x="91.3184%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (23 samples, 0.21%)</title><rect x="91.0684%" y="693" width="0.2067%" height="15" fill="rgb(226,210,39)" fg:x="10135" fg:w="23"/><text x="91.3184%" y="703.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (23 samples, 0.21%)</title><rect x="91.0684%" y="677" width="0.2067%" height="15" fill="rgb(208,219,16)" fg:x="10135" fg:w="23"/><text x="91.3184%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.21%)</title><rect x="91.0684%" y="661" width="0.2067%" height="15" fill="rgb(216,158,51)" fg:x="10135" fg:w="23"/><text x="91.3184%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.21%)</title><rect x="91.0684%" y="645" width="0.2067%" height="15" fill="rgb(233,14,44)" fg:x="10135" fg:w="23"/><text x="91.3184%" y="655.50"></text></g><g><title>__GI___libc_free (23 samples, 0.21%)</title><rect x="91.0684%" y="629" width="0.2067%" height="15" fill="rgb(237,97,39)" fg:x="10135" fg:w="23"/><text x="91.3184%" y="639.50"></text></g><g><title>_int_free_maybe_consolidate (22 samples, 0.20%)</title><rect x="91.0774%" y="613" width="0.1977%" height="15" fill="rgb(218,198,43)" fg:x="10136" fg:w="22"/><text x="91.3274%" y="623.50"></text></g><g><title>malloc_consolidate (22 samples, 0.20%)</title><rect x="91.0774%" y="597" width="0.1977%" height="15" fill="rgb(231,104,20)" fg:x="10136" fg:w="22"/><text x="91.3274%" y="607.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="91.2571%" y="581" width="0.0180%" height="15" fill="rgb(254,36,13)" fg:x="10156" fg:w="2"/><text x="91.5071%" y="591.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (8 samples, 0.07%)</title><rect x="91.3200%" y="629" width="0.0719%" height="15" fill="rgb(248,14,50)" fg:x="10163" fg:w="8"/><text x="91.5700%" y="639.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (8 samples, 0.07%)</title><rect x="91.3919%" y="629" width="0.0719%" height="15" fill="rgb(217,107,29)" fg:x="10171" fg:w="8"/><text x="91.6419%" y="639.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (2 samples, 0.02%)</title><rect x="91.4458%" y="613" width="0.0180%" height="15" fill="rgb(251,169,33)" fg:x="10177" fg:w="2"/><text x="91.6958%" y="623.50"></text></g><g><title>_int_free (4 samples, 0.04%)</title><rect x="91.5087%" y="565" width="0.0359%" height="15" fill="rgb(217,108,32)" fg:x="10184" fg:w="4"/><text x="91.7587%" y="575.50"></text></g><g><title>_int_free_create_chunk (4 samples, 0.04%)</title><rect x="91.6345%" y="549" width="0.0359%" height="15" fill="rgb(219,66,42)" fg:x="10198" fg:w="4"/><text x="91.8845%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (23 samples, 0.21%)</title><rect x="91.4727%" y="613" width="0.2067%" height="15" fill="rgb(206,180,7)" fg:x="10180" fg:w="23"/><text x="91.7227%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (23 samples, 0.21%)</title><rect x="91.4727%" y="597" width="0.2067%" height="15" fill="rgb(208,226,31)" fg:x="10180" fg:w="23"/><text x="91.7227%" y="607.50"></text></g><g><title>__GI___libc_free (23 samples, 0.21%)</title><rect x="91.4727%" y="581" width="0.2067%" height="15" fill="rgb(218,26,49)" fg:x="10180" fg:w="23"/><text x="91.7227%" y="591.50"></text></g><g><title>_int_free_merge_chunk (15 samples, 0.13%)</title><rect x="91.5446%" y="565" width="0.1348%" height="15" fill="rgb(233,197,48)" fg:x="10188" fg:w="15"/><text x="91.7946%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (46 samples, 0.41%)</title><rect x="91.2750%" y="693" width="0.4133%" height="15" fill="rgb(252,181,51)" fg:x="10158" fg:w="46"/><text x="91.5250%" y="703.50"></text></g><g><title>alloc::collections::btree::mem::replace (46 samples, 0.41%)</title><rect x="91.2750%" y="677" width="0.4133%" height="15" fill="rgb(253,90,19)" fg:x="10158" fg:w="46"/><text x="91.5250%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (42 samples, 0.38%)</title><rect x="91.3110%" y="661" width="0.3774%" height="15" fill="rgb(215,171,30)" fg:x="10162" fg:w="42"/><text x="91.5610%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (42 samples, 0.38%)</title><rect x="91.3110%" y="645" width="0.3774%" height="15" fill="rgb(214,222,9)" fg:x="10162" fg:w="42"/><text x="91.5610%" y="655.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (25 samples, 0.22%)</title><rect x="91.4637%" y="629" width="0.2246%" height="15" fill="rgb(223,3,22)" fg:x="10179" fg:w="25"/><text x="91.7137%" y="639.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (81 samples, 0.73%)</title><rect x="90.9965%" y="725" width="0.7278%" height="15" fill="rgb(225,196,46)" fg:x="10127" fg:w="81"/><text x="91.2465%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (50 samples, 0.45%)</title><rect x="91.2750%" y="709" width="0.4493%" height="15" fill="rgb(209,110,37)" fg:x="10158" fg:w="50"/><text x="91.5250%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (4 samples, 0.04%)</title><rect x="91.6884%" y="693" width="0.0359%" height="15" fill="rgb(249,89,12)" fg:x="10204" fg:w="4"/><text x="91.9384%" y="703.50"></text></g><g><title>[graphwalker] (7 samples, 0.06%)</title><rect x="91.7333%" y="693" width="0.0629%" height="15" fill="rgb(226,27,33)" fg:x="10209" fg:w="7"/><text x="91.9833%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph::Edge&gt; (7 samples, 0.06%)</title><rect x="91.7333%" y="677" width="0.0629%" height="15" fill="rgb(213,82,22)" fg:x="10209" fg:w="7"/><text x="91.9833%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.04%)</title><rect x="91.7513%" y="661" width="0.0449%" height="15" fill="rgb(248,140,0)" fg:x="10211" fg:w="5"/><text x="92.0013%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="91.7513%" y="645" width="0.0449%" height="15" fill="rgb(228,106,3)" fg:x="10211" fg:w="5"/><text x="92.0013%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.04%)</title><rect x="91.7513%" y="629" width="0.0449%" height="15" fill="rgb(209,23,37)" fg:x="10211" fg:w="5"/><text x="92.0013%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="91.7513%" y="613" width="0.0449%" height="15" fill="rgb(241,93,50)" fg:x="10211" fg:w="5"/><text x="92.0013%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.04%)</title><rect x="91.7513%" y="597" width="0.0449%" height="15" fill="rgb(253,46,43)" fg:x="10211" fg:w="5"/><text x="92.0013%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.04%)</title><rect x="91.7513%" y="581" width="0.0449%" height="15" fill="rgb(226,206,43)" fg:x="10211" fg:w="5"/><text x="92.0013%" y="591.50"></text></g><g><title>_int_free (51 samples, 0.46%)</title><rect x="91.9310%" y="677" width="0.4583%" height="15" fill="rgb(217,54,7)" fg:x="10231" fg:w="51"/><text x="92.1810%" y="687.50"></text></g><g><title>free_perturb (3 samples, 0.03%)</title><rect x="92.3623%" y="661" width="0.0270%" height="15" fill="rgb(223,5,52)" fg:x="10279" fg:w="3"/><text x="92.6123%" y="671.50"></text></g><g><title>__GI___libc_free (68 samples, 0.61%)</title><rect x="91.7962%" y="693" width="0.6110%" height="15" fill="rgb(206,52,46)" fg:x="10216" fg:w="68"/><text x="92.0462%" y="703.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="92.3893%" y="677" width="0.0180%" height="15" fill="rgb(253,136,11)" fg:x="10282" fg:w="2"/><text x="92.6393%" y="687.50"></text></g><g><title>__rdl_dealloc (6 samples, 0.05%)</title><rect x="92.4072%" y="693" width="0.0539%" height="15" fill="rgb(208,106,33)" fg:x="10284" fg:w="6"/><text x="92.6572%" y="703.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (6 samples, 0.05%)</title><rect x="92.4072%" y="677" width="0.0539%" height="15" fill="rgb(206,54,4)" fg:x="10284" fg:w="6"/><text x="92.6572%" y="687.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="92.4611%" y="693" width="0.0180%" height="15" fill="rgb(213,3,15)" fg:x="10290" fg:w="2"/><text x="92.7111%" y="703.50"></text></g><g><title>_int_free (52 samples, 0.47%)</title><rect x="92.7936%" y="581" width="0.4672%" height="15" fill="rgb(252,211,39)" fg:x="10327" fg:w="52"/><text x="93.0436%" y="591.50"></text></g><g><title>free_perturb (2 samples, 0.02%)</title><rect x="93.2429%" y="565" width="0.0180%" height="15" fill="rgb(223,6,36)" fg:x="10377" fg:w="2"/><text x="93.4929%" y="575.50"></text></g><g><title>__GI___libc_free (82 samples, 0.74%)</title><rect x="92.5510%" y="597" width="0.7368%" height="15" fill="rgb(252,169,45)" fg:x="10300" fg:w="82"/><text x="92.8010%" y="607.50"></text></g><g><title>arena_for_chunk (3 samples, 0.03%)</title><rect x="93.2609%" y="581" width="0.0270%" height="15" fill="rgb(212,48,26)" fg:x="10379" fg:w="3"/><text x="93.5109%" y="591.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.04%)</title><rect x="93.2878%" y="597" width="0.0449%" height="15" fill="rgb(251,102,48)" fg:x="10382" fg:w="5"/><text x="93.5378%" y="607.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.04%)</title><rect x="93.2878%" y="581" width="0.0449%" height="15" fill="rgb(243,208,16)" fg:x="10382" fg:w="5"/><text x="93.5378%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (97 samples, 0.87%)</title><rect x="92.5061%" y="629" width="0.8716%" height="15" fill="rgb(219,96,24)" fg:x="10295" fg:w="97"/><text x="92.7561%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (97 samples, 0.87%)</title><rect x="92.5061%" y="613" width="0.8716%" height="15" fill="rgb(219,33,29)" fg:x="10295" fg:w="97"/><text x="92.7561%" y="623.50"></text></g><g><title>__rust_dealloc (5 samples, 0.04%)</title><rect x="93.3327%" y="597" width="0.0449%" height="15" fill="rgb(223,176,5)" fg:x="10387" fg:w="5"/><text x="93.5827%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (101 samples, 0.91%)</title><rect x="92.4791%" y="693" width="0.9075%" height="15" fill="rgb(228,140,14)" fg:x="10292" fg:w="101"/><text x="92.7291%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (101 samples, 0.91%)</title><rect x="92.4791%" y="677" width="0.9075%" height="15" fill="rgb(217,179,31)" fg:x="10292" fg:w="101"/><text x="92.7291%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (101 samples, 0.91%)</title><rect x="92.4791%" y="661" width="0.9075%" height="15" fill="rgb(230,9,30)" fg:x="10292" fg:w="101"/><text x="92.7291%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (101 samples, 0.91%)</title><rect x="92.4791%" y="645" width="0.9075%" height="15" fill="rgb(230,136,20)" fg:x="10292" fg:w="101"/><text x="92.7291%" y="655.50"></text></g><g><title>_int_free (91 samples, 0.82%)</title><rect x="93.6832%" y="565" width="0.8177%" height="15" fill="rgb(215,210,22)" fg:x="10426" fg:w="91"/><text x="93.9332%" y="575.50"></text></g><g><title>free_perturb (11 samples, 0.10%)</title><rect x="94.4020%" y="549" width="0.0988%" height="15" fill="rgb(218,43,5)" fg:x="10506" fg:w="11"/><text x="94.6520%" y="559.50"></text></g><g><title>__GI___libc_free (115 samples, 1.03%)</title><rect x="93.4765%" y="581" width="1.0333%" height="15" fill="rgb(216,11,5)" fg:x="10403" fg:w="115"/><text x="93.7265%" y="591.50"></text></g><g><title>__rdl_dealloc (5 samples, 0.04%)</title><rect x="94.5098%" y="581" width="0.0449%" height="15" fill="rgb(209,82,29)" fg:x="10518" fg:w="5"/><text x="94.7598%" y="591.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (5 samples, 0.04%)</title><rect x="94.5098%" y="565" width="0.0449%" height="15" fill="rgb(244,115,12)" fg:x="10518" fg:w="5"/><text x="94.7598%" y="575.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (138 samples, 1.24%)</title><rect x="93.4046%" y="613" width="1.2400%" height="15" fill="rgb(222,82,18)" fg:x="10395" fg:w="138"/><text x="93.6546%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (138 samples, 1.24%)</title><rect x="93.4046%" y="597" width="1.2400%" height="15" fill="rgb(249,227,8)" fg:x="10395" fg:w="138"/><text x="93.6546%" y="607.50"></text></g><g><title>__rust_dealloc (10 samples, 0.09%)</title><rect x="94.5548%" y="581" width="0.0899%" height="15" fill="rgb(253,141,45)" fg:x="10523" fg:w="10"/><text x="94.8048%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (144 samples, 1.29%)</title><rect x="93.3866%" y="677" width="1.2939%" height="15" fill="rgb(234,184,4)" fg:x="10393" fg:w="144"/><text x="93.6366%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (144 samples, 1.29%)</title><rect x="93.3866%" y="661" width="1.2939%" height="15" fill="rgb(218,194,23)" fg:x="10393" fg:w="144"/><text x="93.6366%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (144 samples, 1.29%)</title><rect x="93.3866%" y="645" width="1.2939%" height="15" fill="rgb(235,66,41)" fg:x="10393" fg:w="144"/><text x="93.6366%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (144 samples, 1.29%)</title><rect x="93.3866%" y="629" width="1.2939%" height="15" fill="rgb(245,217,1)" fg:x="10393" fg:w="144"/><text x="93.6366%" y="639.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.04%)</title><rect x="94.6446%" y="613" width="0.0359%" height="15" fill="rgb(229,91,1)" fg:x="10533" fg:w="4"/><text x="94.8946%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="94.6806%" y="661" width="0.0719%" height="15" fill="rgb(207,101,30)" fg:x="10537" fg:w="8"/><text x="94.9306%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (8 samples, 0.07%)</title><rect x="94.6806%" y="645" width="0.0719%" height="15" fill="rgb(223,82,49)" fg:x="10537" fg:w="8"/><text x="94.9306%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (16 samples, 0.14%)</title><rect x="94.6806%" y="677" width="0.1438%" height="15" fill="rgb(218,167,17)" fg:x="10537" fg:w="16"/><text x="94.9306%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (8 samples, 0.07%)</title><rect x="94.7524%" y="661" width="0.0719%" height="15" fill="rgb(208,103,14)" fg:x="10545" fg:w="8"/><text x="95.0024%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.07%)</title><rect x="94.7524%" y="645" width="0.0719%" height="15" fill="rgb(238,20,8)" fg:x="10545" fg:w="8"/><text x="95.0024%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (8 samples, 0.07%)</title><rect x="94.7524%" y="629" width="0.0719%" height="15" fill="rgb(218,80,54)" fg:x="10545" fg:w="8"/><text x="95.0024%" y="639.50"></text></g><g><title>_int_free (53 samples, 0.48%)</title><rect x="95.0310%" y="549" width="0.4762%" height="15" fill="rgb(240,144,17)" fg:x="10576" fg:w="53"/><text x="95.2810%" y="559.50"></text></g><g><title>__GI___libc_free (72 samples, 0.65%)</title><rect x="94.8962%" y="565" width="0.6470%" height="15" fill="rgb(245,27,50)" fg:x="10561" fg:w="72"/><text x="95.1462%" y="575.50"></text></g><g><title>arena_for_chunk (4 samples, 0.04%)</title><rect x="95.5072%" y="549" width="0.0359%" height="15" fill="rgb(251,51,7)" fg:x="10629" fg:w="4"/><text x="95.7572%" y="559.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="95.5432%" y="565" width="0.0180%" height="15" fill="rgb(245,217,29)" fg:x="10633" fg:w="2"/><text x="95.7932%" y="575.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="95.5432%" y="549" width="0.0180%" height="15" fill="rgb(221,176,29)" fg:x="10633" fg:w="2"/><text x="95.7932%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (79 samples, 0.71%)</title><rect x="94.8962%" y="597" width="0.7099%" height="15" fill="rgb(212,180,24)" fg:x="10561" fg:w="79"/><text x="95.1462%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (79 samples, 0.71%)</title><rect x="94.8962%" y="581" width="0.7099%" height="15" fill="rgb(254,24,2)" fg:x="10561" fg:w="79"/><text x="95.1462%" y="591.50"></text></g><g><title>__rust_dealloc (5 samples, 0.04%)</title><rect x="95.5611%" y="565" width="0.0449%" height="15" fill="rgb(230,100,2)" fg:x="10635" fg:w="5"/><text x="95.8111%" y="575.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (434 samples, 3.90%)</title><rect x="91.7333%" y="709" width="3.8997%" height="15" fill="rgb(219,142,25)" fg:x="10209" fg:w="434"/><text x="91.9833%" y="719.50">core..</text></g><g><title>core::ptr::drop_in_place&lt;graph::Edge&gt; (250 samples, 2.25%)</title><rect x="93.3866%" y="693" width="2.2464%" height="15" fill="rgb(240,73,43)" fg:x="10393" fg:w="250"/><text x="93.6366%" y="703.50">c..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (90 samples, 0.81%)</title><rect x="94.8243%" y="677" width="0.8087%" height="15" fill="rgb(214,114,15)" fg:x="10553" fg:w="90"/><text x="95.0743%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (82 samples, 0.74%)</title><rect x="94.8962%" y="661" width="0.7368%" height="15" fill="rgb(207,130,4)" fg:x="10561" fg:w="82"/><text x="95.1462%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (82 samples, 0.74%)</title><rect x="94.8962%" y="645" width="0.7368%" height="15" fill="rgb(221,25,40)" fg:x="10561" fg:w="82"/><text x="95.1462%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (82 samples, 0.74%)</title><rect x="94.8962%" y="629" width="0.7368%" height="15" fill="rgb(241,184,7)" fg:x="10561" fg:w="82"/><text x="95.1462%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (82 samples, 0.74%)</title><rect x="94.8962%" y="613" width="0.7368%" height="15" fill="rgb(235,159,4)" fg:x="10561" fg:w="82"/><text x="95.1462%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (3 samples, 0.03%)</title><rect x="95.6061%" y="597" width="0.0270%" height="15" fill="rgb(214,87,48)" fg:x="10640" fg:w="3"/><text x="95.8561%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,graph::Edge&gt;&gt; (517 samples, 4.65%)</title><rect x="90.9965%" y="805" width="4.6455%" height="15" fill="rgb(246,198,24)" fg:x="10127" fg:w="517"/><text x="91.2465%" y="815.50">core:..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (517 samples, 4.65%)</title><rect x="90.9965%" y="789" width="4.6455%" height="15" fill="rgb(209,66,40)" fg:x="10127" fg:w="517"/><text x="91.2465%" y="799.50">&lt;allo..</text></g><g><title>core::mem::drop (517 samples, 4.65%)</title><rect x="90.9965%" y="773" width="4.6455%" height="15" fill="rgb(233,147,39)" fg:x="10127" fg:w="517"/><text x="91.2465%" y="783.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,graph::Edge&gt;&gt; (517 samples, 4.65%)</title><rect x="90.9965%" y="757" width="4.6455%" height="15" fill="rgb(231,145,52)" fg:x="10127" fg:w="517"/><text x="91.2465%" y="767.50">core:..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (517 samples, 4.65%)</title><rect x="90.9965%" y="741" width="4.6455%" height="15" fill="rgb(206,20,26)" fg:x="10127" fg:w="517"/><text x="91.2465%" y="751.50">&lt;allo..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (436 samples, 3.92%)</title><rect x="91.7243%" y="725" width="3.9177%" height="15" fill="rgb(238,220,4)" fg:x="10208" fg:w="436"/><text x="91.9743%" y="735.50">allo..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (8 samples, 0.07%)</title><rect x="95.6869%" y="629" width="0.0719%" height="15" fill="rgb(252,195,42)" fg:x="10649" fg:w="8"/><text x="95.9369%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (4 samples, 0.04%)</title><rect x="95.7229%" y="613" width="0.0359%" height="15" fill="rgb(209,10,6)" fg:x="10653" fg:w="4"/><text x="95.9729%" y="623.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (4 samples, 0.04%)</title><rect x="95.7229%" y="597" width="0.0359%" height="15" fill="rgb(229,3,52)" fg:x="10653" fg:w="4"/><text x="95.9729%" y="607.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (4 samples, 0.04%)</title><rect x="95.7229%" y="581" width="0.0359%" height="15" fill="rgb(253,49,37)" fg:x="10653" fg:w="4"/><text x="95.9729%" y="591.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (4 samples, 0.04%)</title><rect x="95.7229%" y="565" width="0.0359%" height="15" fill="rgb(240,103,49)" fg:x="10653" fg:w="4"/><text x="95.9729%" y="575.50"></text></g><g><title>core::ptr::read (4 samples, 0.04%)</title><rect x="95.7229%" y="549" width="0.0359%" height="15" fill="rgb(250,182,30)" fg:x="10653" fg:w="4"/><text x="95.9729%" y="559.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (2 samples, 0.02%)</title><rect x="95.7588%" y="629" width="0.0180%" height="15" fill="rgb(248,8,30)" fg:x="10657" fg:w="2"/><text x="96.0088%" y="639.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="95.7858%" y="565" width="0.0180%" height="15" fill="rgb(237,120,30)" fg:x="10660" fg:w="2"/><text x="96.0358%" y="575.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.04%)</title><rect x="95.8127%" y="565" width="0.0359%" height="15" fill="rgb(221,146,34)" fg:x="10663" fg:w="4"/><text x="96.0627%" y="575.50"></text></g><g><title>_int_free_create_chunk (2 samples, 0.02%)</title><rect x="95.8307%" y="549" width="0.0180%" height="15" fill="rgb(242,55,13)" fg:x="10665" fg:w="2"/><text x="96.0807%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (23 samples, 0.21%)</title><rect x="95.6600%" y="693" width="0.2067%" height="15" fill="rgb(242,112,31)" fg:x="10646" fg:w="23"/><text x="95.9100%" y="703.50"></text></g><g><title>alloc::collections::btree::mem::replace (23 samples, 0.21%)</title><rect x="95.6600%" y="677" width="0.2067%" height="15" fill="rgb(249,192,27)" fg:x="10646" fg:w="23"/><text x="95.9100%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (20 samples, 0.18%)</title><rect x="95.6869%" y="661" width="0.1797%" height="15" fill="rgb(208,204,44)" fg:x="10649" fg:w="20"/><text x="95.9369%" y="671.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (20 samples, 0.18%)</title><rect x="95.6869%" y="645" width="0.1797%" height="15" fill="rgb(208,93,54)" fg:x="10649" fg:w="20"/><text x="95.9369%" y="655.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (10 samples, 0.09%)</title><rect x="95.7768%" y="629" width="0.0899%" height="15" fill="rgb(242,1,31)" fg:x="10659" fg:w="10"/><text x="96.0268%" y="639.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.09%)</title><rect x="95.7768%" y="613" width="0.0899%" height="15" fill="rgb(241,83,25)" fg:x="10659" fg:w="10"/><text x="96.0268%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.09%)</title><rect x="95.7768%" y="597" width="0.0899%" height="15" fill="rgb(205,169,50)" fg:x="10659" fg:w="10"/><text x="96.0268%" y="607.50"></text></g><g><title>__GI___libc_free (10 samples, 0.09%)</title><rect x="95.7768%" y="581" width="0.0899%" height="15" fill="rgb(239,186,37)" fg:x="10659" fg:w="10"/><text x="96.0268%" y="591.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="95.8487%" y="565" width="0.0180%" height="15" fill="rgb(205,221,10)" fg:x="10667" fg:w="2"/><text x="96.0987%" y="575.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (27 samples, 0.24%)</title><rect x="95.6420%" y="725" width="0.2426%" height="15" fill="rgb(218,196,15)" fg:x="10644" fg:w="27"/><text x="95.8920%" y="735.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (25 samples, 0.22%)</title><rect x="95.6600%" y="709" width="0.2246%" height="15" fill="rgb(218,196,35)" fg:x="10646" fg:w="25"/><text x="95.9100%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (2 samples, 0.02%)</title><rect x="95.8667%" y="693" width="0.0180%" height="15" fill="rgb(233,63,24)" fg:x="10669" fg:w="2"/><text x="96.1167%" y="703.50"></text></g><g><title>[graphwalker] (5 samples, 0.04%)</title><rect x="95.9116%" y="693" width="0.0449%" height="15" fill="rgb(225,8,4)" fg:x="10674" fg:w="5"/><text x="96.1616%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph::Vertex&gt; (5 samples, 0.04%)</title><rect x="95.9116%" y="677" width="0.0449%" height="15" fill="rgb(234,105,35)" fg:x="10674" fg:w="5"/><text x="96.1616%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (3 samples, 0.03%)</title><rect x="95.9296%" y="661" width="0.0270%" height="15" fill="rgb(236,21,32)" fg:x="10676" fg:w="3"/><text x="96.1796%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.03%)</title><rect x="95.9296%" y="645" width="0.0270%" height="15" fill="rgb(228,109,6)" fg:x="10676" fg:w="3"/><text x="96.1796%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="95.9296%" y="629" width="0.0270%" height="15" fill="rgb(229,215,31)" fg:x="10676" fg:w="3"/><text x="96.1796%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="95.9296%" y="613" width="0.0270%" height="15" fill="rgb(221,52,54)" fg:x="10676" fg:w="3"/><text x="96.1796%" y="623.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="95.9296%" y="597" width="0.0270%" height="15" fill="rgb(252,129,43)" fg:x="10676" fg:w="3"/><text x="96.1796%" y="607.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="95.9296%" y="581" width="0.0270%" height="15" fill="rgb(248,183,27)" fg:x="10676" fg:w="3"/><text x="96.1796%" y="591.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="95.9296%" y="565" width="0.0270%" height="15" fill="rgb(250,0,22)" fg:x="10676" fg:w="3"/><text x="96.1796%" y="575.50"></text></g><g><title>_int_free (28 samples, 0.25%)</title><rect x="96.1991%" y="581" width="0.2516%" height="15" fill="rgb(213,166,10)" fg:x="10706" fg:w="28"/><text x="96.4491%" y="591.50"></text></g><g><title>free_perturb (4 samples, 0.04%)</title><rect x="96.4148%" y="565" width="0.0359%" height="15" fill="rgb(207,163,36)" fg:x="10730" fg:w="4"/><text x="96.6648%" y="575.50"></text></g><g><title>__GI___libc_free (50 samples, 0.45%)</title><rect x="96.0104%" y="597" width="0.4493%" height="15" fill="rgb(208,122,22)" fg:x="10685" fg:w="50"/><text x="96.2604%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (59 samples, 0.53%)</title><rect x="95.9565%" y="693" width="0.5301%" height="15" fill="rgb(207,104,49)" fg:x="10679" fg:w="59"/><text x="96.2065%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (59 samples, 0.53%)</title><rect x="95.9565%" y="677" width="0.5301%" height="15" fill="rgb(248,211,50)" fg:x="10679" fg:w="59"/><text x="96.2065%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (59 samples, 0.53%)</title><rect x="95.9565%" y="661" width="0.5301%" height="15" fill="rgb(217,13,45)" fg:x="10679" fg:w="59"/><text x="96.2065%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (59 samples, 0.53%)</title><rect x="95.9565%" y="645" width="0.5301%" height="15" fill="rgb(211,216,49)" fg:x="10679" fg:w="59"/><text x="96.2065%" y="655.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (56 samples, 0.50%)</title><rect x="95.9835%" y="629" width="0.5032%" height="15" fill="rgb(221,58,53)" fg:x="10682" fg:w="56"/><text x="96.2335%" y="639.50"></text></g><g><title>alloc::alloc::dealloc (56 samples, 0.50%)</title><rect x="95.9835%" y="613" width="0.5032%" height="15" fill="rgb(220,112,41)" fg:x="10682" fg:w="56"/><text x="96.2335%" y="623.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="96.4687%" y="597" width="0.0180%" height="15" fill="rgb(236,38,28)" fg:x="10736" fg:w="2"/><text x="96.7187%" y="607.50"></text></g><g><title>_int_free (30 samples, 0.27%)</title><rect x="96.5675%" y="565" width="0.2696%" height="15" fill="rgb(227,195,22)" fg:x="10747" fg:w="30"/><text x="96.8175%" y="575.50"></text></g><g><title>free_perturb (2 samples, 0.02%)</title><rect x="96.8191%" y="549" width="0.0180%" height="15" fill="rgb(214,55,33)" fg:x="10775" fg:w="2"/><text x="97.0691%" y="559.50"></text></g><g><title>__GI___libc_free (39 samples, 0.35%)</title><rect x="96.4956%" y="581" width="0.3504%" height="15" fill="rgb(248,80,13)" fg:x="10739" fg:w="39"/><text x="96.7456%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (44 samples, 0.40%)</title><rect x="96.4956%" y="613" width="0.3954%" height="15" fill="rgb(238,52,6)" fg:x="10739" fg:w="44"/><text x="96.7456%" y="623.50"></text></g><g><title>alloc::alloc::dealloc (44 samples, 0.40%)</title><rect x="96.4956%" y="597" width="0.3954%" height="15" fill="rgb(224,198,47)" fg:x="10739" fg:w="44"/><text x="96.7456%" y="607.50"></text></g><g><title>__rust_dealloc (4 samples, 0.04%)</title><rect x="96.8551%" y="581" width="0.0359%" height="15" fill="rgb(233,171,20)" fg:x="10779" fg:w="4"/><text x="97.1051%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (46 samples, 0.41%)</title><rect x="96.4867%" y="677" width="0.4133%" height="15" fill="rgb(241,30,25)" fg:x="10738" fg:w="46"/><text x="96.7367%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (46 samples, 0.41%)</title><rect x="96.4867%" y="661" width="0.4133%" height="15" fill="rgb(207,171,38)" fg:x="10738" fg:w="46"/><text x="96.7367%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (46 samples, 0.41%)</title><rect x="96.4867%" y="645" width="0.4133%" height="15" fill="rgb(234,70,1)" fg:x="10738" fg:w="46"/><text x="96.7367%" y="655.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (46 samples, 0.41%)</title><rect x="96.4867%" y="629" width="0.4133%" height="15" fill="rgb(232,178,18)" fg:x="10738" fg:w="46"/><text x="96.7367%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="96.9000%" y="661" width="0.0449%" height="15" fill="rgb(241,78,40)" fg:x="10784" fg:w="5"/><text x="97.1500%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (5 samples, 0.04%)</title><rect x="96.9000%" y="645" width="0.0449%" height="15" fill="rgb(222,35,25)" fg:x="10784" fg:w="5"/><text x="97.1500%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (10 samples, 0.09%)</title><rect x="96.9000%" y="677" width="0.0899%" height="15" fill="rgb(207,92,16)" fg:x="10784" fg:w="10"/><text x="97.1500%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;alloc::string::String&gt;&gt; (5 samples, 0.04%)</title><rect x="96.9449%" y="661" width="0.0449%" height="15" fill="rgb(216,59,51)" fg:x="10789" fg:w="5"/><text x="97.1949%" y="671.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.04%)</title><rect x="96.9449%" y="645" width="0.0449%" height="15" fill="rgb(213,80,28)" fg:x="10789" fg:w="5"/><text x="97.1949%" y="655.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (5 samples, 0.04%)</title><rect x="96.9449%" y="629" width="0.0449%" height="15" fill="rgb(220,93,7)" fg:x="10789" fg:w="5"/><text x="97.1949%" y="639.50"></text></g><g><title>_int_free (24 samples, 0.22%)</title><rect x="97.0977%" y="549" width="0.2157%" height="15" fill="rgb(225,24,44)" fg:x="10806" fg:w="24"/><text x="97.3477%" y="559.50"></text></g><g><title>free_perturb (3 samples, 0.03%)</title><rect x="97.2864%" y="533" width="0.0270%" height="15" fill="rgb(243,74,40)" fg:x="10827" fg:w="3"/><text x="97.5364%" y="543.50"></text></g><g><title>__GI___libc_free (35 samples, 0.31%)</title><rect x="97.0078%" y="565" width="0.3145%" height="15" fill="rgb(228,39,7)" fg:x="10796" fg:w="35"/><text x="97.2578%" y="575.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (160 samples, 1.44%)</title><rect x="95.9116%" y="709" width="1.4377%" height="15" fill="rgb(227,79,8)" fg:x="10674" fg:w="160"/><text x="96.1616%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;graph::Vertex&gt; (96 samples, 0.86%)</title><rect x="96.4867%" y="693" width="0.8626%" height="15" fill="rgb(236,58,11)" fg:x="10738" fg:w="96"/><text x="96.7367%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::string::String&gt;&gt; (40 samples, 0.36%)</title><rect x="96.9898%" y="677" width="0.3594%" height="15" fill="rgb(249,63,35)" fg:x="10794" fg:w="40"/><text x="97.2398%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (38 samples, 0.34%)</title><rect x="97.0078%" y="661" width="0.3415%" height="15" fill="rgb(252,114,16)" fg:x="10796" fg:w="38"/><text x="97.2578%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (38 samples, 0.34%)</title><rect x="97.0078%" y="645" width="0.3415%" height="15" fill="rgb(254,151,24)" fg:x="10796" fg:w="38"/><text x="97.2578%" y="655.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (38 samples, 0.34%)</title><rect x="97.0078%" y="629" width="0.3415%" height="15" fill="rgb(253,54,39)" fg:x="10796" fg:w="38"/><text x="97.2578%" y="639.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.34%)</title><rect x="97.0078%" y="613" width="0.3415%" height="15" fill="rgb(243,25,45)" fg:x="10796" fg:w="38"/><text x="97.2578%" y="623.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 0.34%)</title><rect x="97.0078%" y="597" width="0.3415%" height="15" fill="rgb(234,134,9)" fg:x="10796" fg:w="38"/><text x="97.2578%" y="607.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.34%)</title><rect x="97.0078%" y="581" width="0.3415%" height="15" fill="rgb(227,166,31)" fg:x="10796" fg:w="38"/><text x="97.2578%" y="591.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="97.3313%" y="565" width="0.0180%" height="15" fill="rgb(245,143,41)" fg:x="10832" fg:w="2"/><text x="97.5813%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Context&gt; (912 samples, 8.19%)</title><rect x="89.1724%" y="837" width="8.1948%" height="15" fill="rgb(238,181,32)" fg:x="9924" fg:w="912"/><text x="89.4224%" y="847.50">core::ptr::..</text></g><g><title>core::ptr::drop_in_place&lt;graph::Model&gt; (709 samples, 6.37%)</title><rect x="90.9965%" y="821" width="6.3707%" height="15" fill="rgb(224,113,18)" fg:x="10127" fg:w="709"/><text x="91.2465%" y="831.50">core::pt..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,graph::Vertex&gt;&gt; (192 samples, 1.73%)</title><rect x="95.6420%" y="805" width="1.7252%" height="15" fill="rgb(240,229,28)" fg:x="10644" fg:w="192"/><text x="95.8920%" y="815.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (192 samples, 1.73%)</title><rect x="95.6420%" y="789" width="1.7252%" height="15" fill="rgb(250,185,3)" fg:x="10644" fg:w="192"/><text x="95.8920%" y="799.50"></text></g><g><title>core::mem::drop (192 samples, 1.73%)</title><rect x="95.6420%" y="773" width="1.7252%" height="15" fill="rgb(212,59,25)" fg:x="10644" fg:w="192"/><text x="95.8920%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,graph::Vertex&gt;&gt; (192 samples, 1.73%)</title><rect x="95.6420%" y="757" width="1.7252%" height="15" fill="rgb(221,87,20)" fg:x="10644" fg:w="192"/><text x="95.8920%" y="767.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (192 samples, 1.73%)</title><rect x="95.6420%" y="741" width="1.7252%" height="15" fill="rgb(213,74,28)" fg:x="10644" fg:w="192"/><text x="95.8920%" y="751.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (165 samples, 1.48%)</title><rect x="95.8846%" y="725" width="1.4826%" height="15" fill="rgb(224,132,34)" fg:x="10671" fg:w="165"/><text x="96.1346%" y="735.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (2 samples, 0.02%)</title><rect x="97.3493%" y="709" width="0.0180%" height="15" fill="rgb(222,101,24)" fg:x="10834" fg:w="2"/><text x="97.5993%" y="719.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (2 samples, 0.02%)</title><rect x="97.3493%" y="693" width="0.0180%" height="15" fill="rgb(254,142,4)" fg:x="10834" fg:w="2"/><text x="97.5993%" y="703.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.02%)</title><rect x="97.3493%" y="677" width="0.0180%" height="15" fill="rgb(230,229,49)" fg:x="10834" fg:w="2"/><text x="97.5993%" y="687.50"></text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.03%)</title><rect x="97.3852%" y="677" width="0.0270%" height="15" fill="rgb(238,70,47)" fg:x="10838" fg:w="3"/><text x="97.6352%" y="687.50"></text></g><g><title>graph::Model::has_id (5 samples, 0.04%)</title><rect x="97.3762%" y="837" width="0.0449%" height="15" fill="rgb(231,160,17)" fg:x="10837" fg:w="5"/><text x="97.6262%" y="847.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (5 samples, 0.04%)</title><rect x="97.3762%" y="821" width="0.0449%" height="15" fill="rgb(218,68,53)" fg:x="10837" fg:w="5"/><text x="97.6262%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (5 samples, 0.04%)</title><rect x="97.3762%" y="805" width="0.0449%" height="15" fill="rgb(236,111,10)" fg:x="10837" fg:w="5"/><text x="97.6262%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (5 samples, 0.04%)</title><rect x="97.3762%" y="789" width="0.0449%" height="15" fill="rgb(224,34,41)" fg:x="10837" fg:w="5"/><text x="97.6262%" y="799.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (5 samples, 0.04%)</title><rect x="97.3762%" y="773" width="0.0449%" height="15" fill="rgb(241,118,19)" fg:x="10837" fg:w="5"/><text x="97.6262%" y="783.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (5 samples, 0.04%)</title><rect x="97.3762%" y="757" width="0.0449%" height="15" fill="rgb(238,129,25)" fg:x="10837" fg:w="5"/><text x="97.6262%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (4 samples, 0.04%)</title><rect x="97.3852%" y="741" width="0.0359%" height="15" fill="rgb(238,22,31)" fg:x="10838" fg:w="4"/><text x="97.6352%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (4 samples, 0.04%)</title><rect x="97.3852%" y="725" width="0.0359%" height="15" fill="rgb(222,174,48)" fg:x="10838" fg:w="4"/><text x="97.6352%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (4 samples, 0.04%)</title><rect x="97.3852%" y="709" width="0.0359%" height="15" fill="rgb(206,152,40)" fg:x="10838" fg:w="4"/><text x="97.6352%" y="719.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (4 samples, 0.04%)</title><rect x="97.3852%" y="693" width="0.0359%" height="15" fill="rgb(218,99,54)" fg:x="10838" fg:w="4"/><text x="97.6352%" y="703.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (4 samples, 0.04%)</title><rect x="97.4301%" y="821" width="0.0359%" height="15" fill="rgb(220,174,26)" fg:x="10843" fg:w="4"/><text x="97.6801%" y="831.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (4 samples, 0.04%)</title><rect x="97.4301%" y="805" width="0.0359%" height="15" fill="rgb(245,116,9)" fg:x="10843" fg:w="4"/><text x="97.6801%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (4 samples, 0.04%)</title><rect x="97.4301%" y="789" width="0.0359%" height="15" fill="rgb(209,72,35)" fg:x="10843" fg:w="4"/><text x="97.6801%" y="799.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (4 samples, 0.04%)</title><rect x="97.4301%" y="773" width="0.0359%" height="15" fill="rgb(226,126,21)" fg:x="10843" fg:w="4"/><text x="97.6801%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.03%)</title><rect x="97.4661%" y="821" width="0.0270%" height="15" fill="rgb(227,192,1)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 0.03%)</title><rect x="97.4661%" y="805" width="0.0270%" height="15" fill="rgb(237,180,29)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.03%)</title><rect x="97.4661%" y="789" width="0.0270%" height="15" fill="rgb(230,197,35)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="799.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.03%)</title><rect x="97.4661%" y="773" width="0.0270%" height="15" fill="rgb(246,193,31)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (3 samples, 0.03%)</title><rect x="97.4661%" y="757" width="0.0270%" height="15" fill="rgb(241,36,4)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="767.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.03%)</title><rect x="97.4661%" y="741" width="0.0270%" height="15" fill="rgb(241,130,17)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="751.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.03%)</title><rect x="97.4661%" y="725" width="0.0270%" height="15" fill="rgb(206,137,32)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="735.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.03%)</title><rect x="97.4661%" y="709" width="0.0270%" height="15" fill="rgb(237,228,51)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="719.50"></text></g><g><title>_int_realloc (3 samples, 0.03%)</title><rect x="97.4661%" y="693" width="0.0270%" height="15" fill="rgb(243,6,42)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="703.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="97.4661%" y="677" width="0.0270%" height="15" fill="rgb(251,74,28)" fg:x="10847" fg:w="3"/><text x="97.7161%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;machine::Position&gt;&gt; (3 samples, 0.03%)</title><rect x="97.4930%" y="821" width="0.0270%" height="15" fill="rgb(218,20,49)" fg:x="10850" fg:w="3"/><text x="97.7430%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;machine::Position&gt;&gt; (3 samples, 0.03%)</title><rect x="97.4930%" y="805" width="0.0270%" height="15" fill="rgb(238,28,14)" fg:x="10850" fg:w="3"/><text x="97.7430%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="97.4930%" y="789" width="0.0270%" height="15" fill="rgb(229,40,46)" fg:x="10850" fg:w="3"/><text x="97.7430%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="97.4930%" y="773" width="0.0270%" height="15" fill="rgb(244,195,20)" fg:x="10850" fg:w="3"/><text x="97.7430%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="97.4930%" y="757" width="0.0270%" height="15" fill="rgb(253,56,35)" fg:x="10850" fg:w="3"/><text x="97.7430%" y="767.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="97.4930%" y="741" width="0.0270%" height="15" fill="rgb(210,149,44)" fg:x="10850" fg:w="3"/><text x="97.7430%" y="751.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.03%)</title><rect x="97.4930%" y="725" width="0.0270%" height="15" fill="rgb(240,135,12)" fg:x="10850" fg:w="3"/><text x="97.7430%" y="735.50"></text></g><g><title>malloc_consolidate (3 samples, 0.03%)</title><rect x="97.4930%" y="709" width="0.0270%" height="15" fill="rgb(251,24,50)" fg:x="10850" fg:w="3"/><text x="97.7430%" y="719.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (20 samples, 0.18%)</title><rect x="97.6278%" y="693" width="0.1797%" height="15" fill="rgb(243,200,47)" fg:x="10865" fg:w="20"/><text x="97.8778%" y="703.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (12 samples, 0.11%)</title><rect x="97.6997%" y="677" width="0.1078%" height="15" fill="rgb(224,166,26)" fg:x="10873" fg:w="12"/><text x="97.9497%" y="687.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (21 samples, 0.19%)</title><rect x="97.6278%" y="709" width="0.1887%" height="15" fill="rgb(233,0,47)" fg:x="10865" fg:w="21"/><text x="97.8778%" y="719.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.02%)</title><rect x="97.9243%" y="677" width="0.0180%" height="15" fill="rgb(253,80,5)" fg:x="10898" fg:w="2"/><text x="98.1743%" y="687.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (2 samples, 0.02%)</title><rect x="97.9243%" y="661" width="0.0180%" height="15" fill="rgb(214,133,25)" fg:x="10898" fg:w="2"/><text x="98.1743%" y="671.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (2 samples, 0.02%)</title><rect x="97.9243%" y="645" width="0.0180%" height="15" fill="rgb(209,27,14)" fg:x="10898" fg:w="2"/><text x="98.1743%" y="655.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="97.9243%" y="629" width="0.0180%" height="15" fill="rgb(219,102,51)" fg:x="10898" fg:w="2"/><text x="98.1743%" y="639.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (15 samples, 0.13%)</title><rect x="97.8165%" y="709" width="0.1348%" height="15" fill="rgb(237,18,16)" fg:x="10886" fg:w="15"/><text x="98.0665%" y="719.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (12 samples, 0.11%)</title><rect x="97.8435%" y="693" width="0.1078%" height="15" fill="rgb(241,85,17)" fg:x="10889" fg:w="12"/><text x="98.0935%" y="703.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (46 samples, 0.41%)</title><rect x="97.5739%" y="757" width="0.4133%" height="15" fill="rgb(236,90,42)" fg:x="10859" fg:w="46"/><text x="97.8239%" y="767.50"></text></g><g><title>alloc::collections::btree::mem::replace (46 samples, 0.41%)</title><rect x="97.5739%" y="741" width="0.4133%" height="15" fill="rgb(249,57,21)" fg:x="10859" fg:w="46"/><text x="97.8239%" y="751.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (46 samples, 0.41%)</title><rect x="97.5739%" y="725" width="0.4133%" height="15" fill="rgb(243,12,36)" fg:x="10859" fg:w="46"/><text x="97.8239%" y="735.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (4 samples, 0.04%)</title><rect x="97.9513%" y="709" width="0.0359%" height="15" fill="rgb(253,128,47)" fg:x="10901" fg:w="4"/><text x="98.2013%" y="719.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (4 samples, 0.04%)</title><rect x="97.9513%" y="693" width="0.0359%" height="15" fill="rgb(207,33,20)" fg:x="10901" fg:w="4"/><text x="98.2013%" y="703.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (4 samples, 0.04%)</title><rect x="97.9513%" y="677" width="0.0359%" height="15" fill="rgb(233,215,35)" fg:x="10901" fg:w="4"/><text x="98.2013%" y="687.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (4 samples, 0.04%)</title><rect x="97.9513%" y="661" width="0.0359%" height="15" fill="rgb(249,188,52)" fg:x="10901" fg:w="4"/><text x="98.2013%" y="671.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.53%)</title><rect x="97.5380%" y="805" width="0.5301%" height="15" fill="rgb(225,12,32)" fg:x="10855" fg:w="59"/><text x="97.7880%" y="815.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.53%)</title><rect x="97.5380%" y="789" width="0.5301%" height="15" fill="rgb(247,98,14)" fg:x="10855" fg:w="59"/><text x="97.7880%" y="799.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (55 samples, 0.49%)</title><rect x="97.5739%" y="773" width="0.4942%" height="15" fill="rgb(247,219,48)" fg:x="10859" fg:w="55"/><text x="97.8239%" y="783.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (9 samples, 0.08%)</title><rect x="97.9872%" y="757" width="0.0809%" height="15" fill="rgb(253,60,48)" fg:x="10905" fg:w="9"/><text x="98.2372%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (60 samples, 0.54%)</title><rect x="98.0681%" y="805" width="0.5391%" height="15" fill="rgb(245,15,52)" fg:x="10914" fg:w="60"/><text x="98.3181%" y="815.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (60 samples, 0.54%)</title><rect x="98.0681%" y="789" width="0.5391%" height="15" fill="rgb(220,133,28)" fg:x="10914" fg:w="60"/><text x="98.3181%" y="799.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (59 samples, 0.53%)</title><rect x="98.0771%" y="773" width="0.5301%" height="15" fill="rgb(217,180,4)" fg:x="10915" fg:w="59"/><text x="98.3271%" y="783.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (59 samples, 0.53%)</title><rect x="98.0771%" y="757" width="0.5301%" height="15" fill="rgb(251,24,1)" fg:x="10915" fg:w="59"/><text x="98.3271%" y="767.50"></text></g><g><title>__memcmp_avx2_movbe (51 samples, 0.46%)</title><rect x="98.1490%" y="741" width="0.4583%" height="15" fill="rgb(212,185,49)" fg:x="10923" fg:w="51"/><text x="98.3990%" y="751.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="98.6072%" y="789" width="0.0180%" height="15" fill="rgb(215,175,22)" fg:x="10974" fg:w="2"/><text x="98.8572%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="98.6072%" y="773" width="0.0180%" height="15" fill="rgb(250,205,14)" fg:x="10974" fg:w="2"/><text x="98.8572%" y="783.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="98.6072%" y="757" width="0.0180%" height="15" fill="rgb(225,211,22)" fg:x="10974" fg:w="2"/><text x="98.8572%" y="767.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="98.6072%" y="741" width="0.0180%" height="15" fill="rgb(251,179,42)" fg:x="10974" fg:w="2"/><text x="98.8572%" y="751.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="98.6072%" y="725" width="0.0180%" height="15" fill="rgb(208,216,51)" fg:x="10974" fg:w="2"/><text x="98.8572%" y="735.50"></text></g><g><title>&lt;graph::Edge as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="98.6072%" y="805" width="0.0270%" height="15" fill="rgb(235,36,11)" fg:x="10974" fg:w="3"/><text x="98.8572%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.02%)</title><rect x="98.6342%" y="789" width="0.0180%" height="15" fill="rgb(213,189,28)" fg:x="10977" fg:w="2"/><text x="98.8842%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.02%)</title><rect x="98.6342%" y="773" width="0.0180%" height="15" fill="rgb(227,203,42)" fg:x="10977" fg:w="2"/><text x="98.8842%" y="783.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.02%)</title><rect x="98.6342%" y="757" width="0.0180%" height="15" fill="rgb(244,72,36)" fg:x="10977" fg:w="2"/><text x="98.8842%" y="767.50"></text></g><g><title>machine::Machine::get_next_edge (138 samples, 1.24%)</title><rect x="97.4212%" y="837" width="1.2400%" height="15" fill="rgb(213,53,17)" fg:x="10842" fg:w="138"/><text x="97.6712%" y="847.50"></text></g><g><title>graph::Model::out_edges (127 samples, 1.14%)</title><rect x="97.5200%" y="821" width="1.1412%" height="15" fill="rgb(207,167,3)" fg:x="10853" fg:w="127"/><text x="97.7700%" y="831.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (3 samples, 0.03%)</title><rect x="98.6342%" y="805" width="0.0270%" height="15" fill="rgb(216,98,30)" fg:x="10977" fg:w="3"/><text x="98.8842%" y="815.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="98.6612%" y="821" width="0.0180%" height="15" fill="rgb(236,123,15)" fg:x="10980" fg:w="2"/><text x="98.9112%" y="831.50"></text></g><g><title>__memcmp_avx2_movbe (3 samples, 0.03%)</title><rect x="98.7330%" y="677" width="0.0270%" height="15" fill="rgb(248,81,50)" fg:x="10988" fg:w="3"/><text x="98.9830%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (5 samples, 0.04%)</title><rect x="98.7241%" y="741" width="0.0449%" height="15" fill="rgb(214,120,4)" fg:x="10987" fg:w="5"/><text x="98.9741%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (5 samples, 0.04%)</title><rect x="98.7241%" y="725" width="0.0449%" height="15" fill="rgb(208,179,34)" fg:x="10987" fg:w="5"/><text x="98.9741%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (5 samples, 0.04%)</title><rect x="98.7241%" y="709" width="0.0449%" height="15" fill="rgb(227,140,7)" fg:x="10987" fg:w="5"/><text x="98.9741%" y="719.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (5 samples, 0.04%)</title><rect x="98.7241%" y="693" width="0.0449%" height="15" fill="rgb(214,22,6)" fg:x="10987" fg:w="5"/><text x="98.9741%" y="703.50"></text></g><g><title>machine::Machine::log_step (13 samples, 0.12%)</title><rect x="98.6612%" y="837" width="0.1168%" height="15" fill="rgb(207,137,27)" fg:x="10980" fg:w="13"/><text x="98.9112%" y="847.50"></text></g><g><title>graph::Model::get_name_for_id (6 samples, 0.05%)</title><rect x="98.7241%" y="821" width="0.0539%" height="15" fill="rgb(210,8,46)" fg:x="10987" fg:w="6"/><text x="98.9741%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (6 samples, 0.05%)</title><rect x="98.7241%" y="805" width="0.0539%" height="15" fill="rgb(240,16,54)" fg:x="10987" fg:w="6"/><text x="98.9741%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (6 samples, 0.05%)</title><rect x="98.7241%" y="789" width="0.0539%" height="15" fill="rgb(211,209,29)" fg:x="10987" fg:w="6"/><text x="98.9741%" y="799.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (6 samples, 0.05%)</title><rect x="98.7241%" y="773" width="0.0539%" height="15" fill="rgb(226,228,24)" fg:x="10987" fg:w="6"/><text x="98.9741%" y="783.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (6 samples, 0.05%)</title><rect x="98.7241%" y="757" width="0.0539%" height="15" fill="rgb(222,84,9)" fg:x="10987" fg:w="6"/><text x="98.9741%" y="767.50"></text></g><g><title>machine::Machine::step (9,262 samples, 83.22%)</title><rect x="15.5719%" y="853" width="83.2240%" height="15" fill="rgb(234,203,30)" fg:x="1733" fg:w="9262"/><text x="15.8219%" y="863.50">machine::Machine::step</text></g><g><title>machine::Machine::run_action (2 samples, 0.02%)</title><rect x="98.7780%" y="837" width="0.0180%" height="15" fill="rgb(238,109,14)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="847.50"></text></g><g><title>machine::Machine::get_actions (2 samples, 0.02%)</title><rect x="98.7780%" y="821" width="0.0180%" height="15" fill="rgb(233,206,34)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (2 samples, 0.02%)</title><rect x="98.7780%" y="805" width="0.0180%" height="15" fill="rgb(220,167,47)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.02%)</title><rect x="98.7780%" y="789" width="0.0180%" height="15" fill="rgb(238,105,10)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="799.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.02%)</title><rect x="98.7780%" y="773" width="0.0180%" height="15" fill="rgb(213,227,17)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="783.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.02%)</title><rect x="98.7780%" y="757" width="0.0180%" height="15" fill="rgb(217,132,38)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="98.7780%" y="741" width="0.0180%" height="15" fill="rgb(242,146,4)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (2 samples, 0.02%)</title><rect x="98.7780%" y="725" width="0.0180%" height="15" fill="rgb(212,61,9)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (2 samples, 0.02%)</title><rect x="98.7780%" y="709" width="0.0180%" height="15" fill="rgb(247,126,22)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="719.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.02%)</title><rect x="98.7780%" y="693" width="0.0180%" height="15" fill="rgb(220,196,2)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="703.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.02%)</title><rect x="98.7780%" y="677" width="0.0180%" height="15" fill="rgb(208,46,4)" fg:x="10993" fg:w="2"/><text x="99.0280%" y="687.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (46 samples, 0.41%)</title><rect x="98.8049%" y="693" width="0.4133%" height="15" fill="rgb(252,104,46)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="703.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (46 samples, 0.41%)</title><rect x="98.8049%" y="677" width="0.4133%" height="15" fill="rgb(237,152,48)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="687.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (46 samples, 0.41%)</title><rect x="98.8049%" y="661" width="0.4133%" height="15" fill="rgb(221,59,37)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="671.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (46 samples, 0.41%)</title><rect x="98.8049%" y="645" width="0.4133%" height="15" fill="rgb(209,202,51)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="655.50"></text></g><g><title>serde_json::ser::format_escaped_str (46 samples, 0.41%)</title><rect x="98.8049%" y="629" width="0.4133%" height="15" fill="rgb(228,81,30)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="639.50"></text></g><g><title>serde_json::ser::Formatter::end_string (46 samples, 0.41%)</title><rect x="98.8049%" y="613" width="0.4133%" height="15" fill="rgb(227,42,39)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="623.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (46 samples, 0.41%)</title><rect x="98.8049%" y="597" width="0.4133%" height="15" fill="rgb(221,26,2)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="607.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (46 samples, 0.41%)</title><rect x="98.8049%" y="581" width="0.4133%" height="15" fill="rgb(254,61,31)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (46 samples, 0.41%)</title><rect x="98.8049%" y="565" width="0.4133%" height="15" fill="rgb(222,173,38)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (46 samples, 0.41%)</title><rect x="98.8049%" y="549" width="0.4133%" height="15" fill="rgb(218,50,12)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (46 samples, 0.41%)</title><rect x="98.8049%" y="533" width="0.4133%" height="15" fill="rgb(223,88,40)" fg:x="10996" fg:w="46"/><text x="99.0549%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (45 samples, 0.40%)</title><rect x="98.8139%" y="517" width="0.4043%" height="15" fill="rgb(237,54,19)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (45 samples, 0.40%)</title><rect x="98.8139%" y="501" width="0.4043%" height="15" fill="rgb(251,129,25)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (45 samples, 0.40%)</title><rect x="98.8139%" y="485" width="0.4043%" height="15" fill="rgb(238,97,19)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (45 samples, 0.40%)</title><rect x="98.8139%" y="469" width="0.4043%" height="15" fill="rgb(240,169,18)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (45 samples, 0.40%)</title><rect x="98.8139%" y="453" width="0.4043%" height="15" fill="rgb(230,187,49)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (45 samples, 0.40%)</title><rect x="98.8139%" y="437" width="0.4043%" height="15" fill="rgb(209,44,26)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="447.50"></text></g><g><title>alloc::alloc::Global::grow_impl (45 samples, 0.40%)</title><rect x="98.8139%" y="421" width="0.4043%" height="15" fill="rgb(244,0,6)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="431.50"></text></g><g><title>alloc::alloc::realloc (45 samples, 0.40%)</title><rect x="98.8139%" y="405" width="0.4043%" height="15" fill="rgb(248,18,21)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="415.50"></text></g><g><title>__GI___libc_realloc (45 samples, 0.40%)</title><rect x="98.8139%" y="389" width="0.4043%" height="15" fill="rgb(245,180,19)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="399.50"></text></g><g><title>_int_realloc (45 samples, 0.40%)</title><rect x="98.8139%" y="373" width="0.4043%" height="15" fill="rgb(252,118,36)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="383.50"></text></g><g><title>_int_malloc (45 samples, 0.40%)</title><rect x="98.8139%" y="357" width="0.4043%" height="15" fill="rgb(210,224,19)" fg:x="10997" fg:w="45"/><text x="99.0639%" y="367.50"></text></g><g><title>machine::_::&lt;impl serde::ser::Serialize for machine::Position&gt;::serialize (87 samples, 0.78%)</title><rect x="98.8049%" y="741" width="0.7817%" height="15" fill="rgb(218,30,24)" fg:x="10996" fg:w="87"/><text x="99.0549%" y="751.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (87 samples, 0.78%)</title><rect x="98.8049%" y="725" width="0.7817%" height="15" fill="rgb(219,75,50)" fg:x="10996" fg:w="87"/><text x="99.0549%" y="735.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (87 samples, 0.78%)</title><rect x="98.8049%" y="709" width="0.7817%" height="15" fill="rgb(234,72,50)" fg:x="10996" fg:w="87"/><text x="99.0549%" y="719.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (41 samples, 0.37%)</title><rect x="99.2183%" y="693" width="0.3684%" height="15" fill="rgb(219,100,48)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="703.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (41 samples, 0.37%)</title><rect x="99.2183%" y="677" width="0.3684%" height="15" fill="rgb(253,5,41)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="687.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (41 samples, 0.37%)</title><rect x="99.2183%" y="661" width="0.3684%" height="15" fill="rgb(247,181,11)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="671.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (41 samples, 0.37%)</title><rect x="99.2183%" y="645" width="0.3684%" height="15" fill="rgb(222,223,25)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (41 samples, 0.37%)</title><rect x="99.2183%" y="629" width="0.3684%" height="15" fill="rgb(214,198,28)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (41 samples, 0.37%)</title><rect x="99.2183%" y="613" width="0.3684%" height="15" fill="rgb(230,46,43)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (41 samples, 0.37%)</title><rect x="99.2183%" y="597" width="0.3684%" height="15" fill="rgb(233,65,53)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (41 samples, 0.37%)</title><rect x="99.2183%" y="581" width="0.3684%" height="15" fill="rgb(221,121,27)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (41 samples, 0.37%)</title><rect x="99.2183%" y="565" width="0.3684%" height="15" fill="rgb(247,70,47)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (41 samples, 0.37%)</title><rect x="99.2183%" y="549" width="0.3684%" height="15" fill="rgb(228,85,35)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (41 samples, 0.37%)</title><rect x="99.2183%" y="533" width="0.3684%" height="15" fill="rgb(209,50,18)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (41 samples, 0.37%)</title><rect x="99.2183%" y="517" width="0.3684%" height="15" fill="rgb(250,19,35)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (41 samples, 0.37%)</title><rect x="99.2183%" y="501" width="0.3684%" height="15" fill="rgb(253,107,29)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (41 samples, 0.37%)</title><rect x="99.2183%" y="485" width="0.3684%" height="15" fill="rgb(252,179,29)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="495.50"></text></g><g><title>alloc::alloc::realloc (41 samples, 0.37%)</title><rect x="99.2183%" y="469" width="0.3684%" height="15" fill="rgb(238,194,6)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="479.50"></text></g><g><title>__GI___libc_realloc (41 samples, 0.37%)</title><rect x="99.2183%" y="453" width="0.3684%" height="15" fill="rgb(238,164,29)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="463.50"></text></g><g><title>_int_realloc (41 samples, 0.37%)</title><rect x="99.2183%" y="437" width="0.3684%" height="15" fill="rgb(224,25,9)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="447.50"></text></g><g><title>_int_malloc (41 samples, 0.37%)</title><rect x="99.2183%" y="421" width="0.3684%" height="15" fill="rgb(244,153,23)" fg:x="11042" fg:w="41"/><text x="99.4683%" y="431.50"></text></g><g><title>serde_json::ser::to_string (89 samples, 0.80%)</title><rect x="98.7959%" y="853" width="0.7997%" height="15" fill="rgb(212,203,14)" fg:x="10995" fg:w="89"/><text x="99.0459%" y="863.50"></text></g><g><title>serde_json::ser::to_vec (89 samples, 0.80%)</title><rect x="98.7959%" y="837" width="0.7997%" height="15" fill="rgb(220,164,20)" fg:x="10995" fg:w="89"/><text x="99.0459%" y="847.50"></text></g><g><title>serde_json::ser::to_writer (88 samples, 0.79%)</title><rect x="98.8049%" y="821" width="0.7907%" height="15" fill="rgb(222,203,48)" fg:x="10996" fg:w="88"/><text x="99.0549%" y="831.50"></text></g><g><title>machine::_::&lt;impl serde::ser::Serialize for machine::Step&gt;::serialize (88 samples, 0.79%)</title><rect x="98.8049%" y="805" width="0.7907%" height="15" fill="rgb(215,159,22)" fg:x="10996" fg:w="88"/><text x="99.0549%" y="815.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (88 samples, 0.79%)</title><rect x="98.8049%" y="789" width="0.7907%" height="15" fill="rgb(216,183,47)" fg:x="10996" fg:w="88"/><text x="99.0549%" y="799.50"></text></g><g><title>serde::ser::SerializeMap::serialize_entry (88 samples, 0.79%)</title><rect x="98.8049%" y="773" width="0.7907%" height="15" fill="rgb(229,195,25)" fg:x="10996" fg:w="88"/><text x="99.0549%" y="783.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (88 samples, 0.79%)</title><rect x="98.8049%" y="757" width="0.7907%" height="15" fill="rgb(224,132,51)" fg:x="10996" fg:w="88"/><text x="99.0549%" y="767.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (32 samples, 0.29%)</title><rect x="99.5957%" y="757" width="0.2875%" height="15" fill="rgb(240,63,7)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="767.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (32 samples, 0.29%)</title><rect x="99.5957%" y="741" width="0.2875%" height="15" fill="rgb(249,182,41)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="751.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (32 samples, 0.29%)</title><rect x="99.5957%" y="725" width="0.2875%" height="15" fill="rgb(243,47,26)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="735.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (32 samples, 0.29%)</title><rect x="99.5957%" y="709" width="0.2875%" height="15" fill="rgb(233,48,2)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="719.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (32 samples, 0.29%)</title><rect x="99.5957%" y="693" width="0.2875%" height="15" fill="rgb(244,165,34)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="703.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (32 samples, 0.29%)</title><rect x="99.5957%" y="677" width="0.2875%" height="15" fill="rgb(207,89,7)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="687.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (32 samples, 0.29%)</title><rect x="99.5957%" y="661" width="0.2875%" height="15" fill="rgb(244,117,36)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="671.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (32 samples, 0.29%)</title><rect x="99.5957%" y="645" width="0.2875%" height="15" fill="rgb(226,144,34)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="655.50"></text></g><g><title>__GI___libc_write (32 samples, 0.29%)</title><rect x="99.5957%" y="629" width="0.2875%" height="15" fill="rgb(213,23,19)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="639.50"></text></g><g><title>[unknown] (32 samples, 0.29%)</title><rect x="99.5957%" y="613" width="0.2875%" height="15" fill="rgb(217,75,12)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="623.50"></text></g><g><title>[unknown] (32 samples, 0.29%)</title><rect x="99.5957%" y="597" width="0.2875%" height="15" fill="rgb(224,159,17)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="607.50"></text></g><g><title>[unknown] (32 samples, 0.29%)</title><rect x="99.5957%" y="581" width="0.2875%" height="15" fill="rgb(217,118,1)" fg:x="11084" fg:w="32"/><text x="99.8457%" y="591.50"></text></g><g><title>[unknown] (31 samples, 0.28%)</title><rect x="99.6046%" y="565" width="0.2786%" height="15" fill="rgb(232,180,48)" fg:x="11085" fg:w="31"/><text x="99.8546%" y="575.50"></text></g><g><title>[unknown] (31 samples, 0.28%)</title><rect x="99.6046%" y="549" width="0.2786%" height="15" fill="rgb(230,27,33)" fg:x="11085" fg:w="31"/><text x="99.8546%" y="559.50"></text></g><g><title>[unknown] (28 samples, 0.25%)</title><rect x="99.6316%" y="533" width="0.2516%" height="15" fill="rgb(205,31,21)" fg:x="11088" fg:w="28"/><text x="99.8816%" y="543.50"></text></g><g><title>[unknown] (27 samples, 0.24%)</title><rect x="99.6406%" y="517" width="0.2426%" height="15" fill="rgb(253,59,4)" fg:x="11089" fg:w="27"/><text x="99.8906%" y="527.50"></text></g><g><title>[unknown] (27 samples, 0.24%)</title><rect x="99.6406%" y="501" width="0.2426%" height="15" fill="rgb(224,201,9)" fg:x="11089" fg:w="27"/><text x="99.8906%" y="511.50"></text></g><g><title>[unknown] (26 samples, 0.23%)</title><rect x="99.6496%" y="485" width="0.2336%" height="15" fill="rgb(229,206,30)" fg:x="11090" fg:w="26"/><text x="99.8996%" y="495.50"></text></g><g><title>[unknown] (24 samples, 0.22%)</title><rect x="99.6675%" y="469" width="0.2157%" height="15" fill="rgb(212,67,47)" fg:x="11092" fg:w="24"/><text x="99.9175%" y="479.50"></text></g><g><title>[unknown] (18 samples, 0.16%)</title><rect x="99.7214%" y="453" width="0.1617%" height="15" fill="rgb(211,96,50)" fg:x="11098" fg:w="18"/><text x="99.9714%" y="463.50"></text></g><g><title>[unknown] (18 samples, 0.16%)</title><rect x="99.7214%" y="437" width="0.1617%" height="15" fill="rgb(252,114,18)" fg:x="11098" fg:w="18"/><text x="99.9714%" y="447.50"></text></g><g><title>[unknown] (16 samples, 0.14%)</title><rect x="99.7394%" y="421" width="0.1438%" height="15" fill="rgb(223,58,37)" fg:x="11100" fg:w="16"/><text x="99.9894%" y="431.50"></text></g><g><title>[unknown] (15 samples, 0.13%)</title><rect x="99.7484%" y="405" width="0.1348%" height="15" fill="rgb(237,70,4)" fg:x="11101" fg:w="15"/><text x="99.9984%" y="415.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="99.8023%" y="389" width="0.0809%" height="15" fill="rgb(244,85,46)" fg:x="11107" fg:w="9"/><text x="100.0523%" y="399.50"></text></g><g><title>[unknown] (9 samples, 0.08%)</title><rect x="99.8023%" y="373" width="0.0809%" height="15" fill="rgb(223,39,52)" fg:x="11107" fg:w="9"/><text x="100.0523%" y="383.50"></text></g><g><title>[unknown] (6 samples, 0.05%)</title><rect x="99.8293%" y="357" width="0.0539%" height="15" fill="rgb(218,200,14)" fg:x="11110" fg:w="6"/><text x="100.0793%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8652%" y="341" width="0.0180%" height="15" fill="rgb(208,171,16)" fg:x="11114" fg:w="2"/><text x="100.1152%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8652%" y="325" width="0.0180%" height="15" fill="rgb(234,200,18)" fg:x="11114" fg:w="2"/><text x="100.1152%" y="335.50"></text></g><g><title>_start (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1141" width="85.2997%" height="15" fill="rgb(228,45,11)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1151.50">_start</text></g><g><title>__libc_start_main_impl (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1125" width="85.2997%" height="15" fill="rgb(237,182,11)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1135.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1109" width="85.2997%" height="15" fill="rgb(241,175,49)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1119.50">__libc_start_call_main</text></g><g><title>main (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1093" width="85.2997%" height="15" fill="rgb(247,38,35)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1103.50">main</text></g><g><title>std::rt::lang_start_internal (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1077" width="85.2997%" height="15" fill="rgb(228,39,49)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1087.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1061" width="85.2997%" height="15" fill="rgb(226,101,26)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1071.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1045" width="85.2997%" height="15" fill="rgb(206,141,19)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1055.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1029" width="85.2997%" height="15" fill="rgb(211,200,13)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1039.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (9,493 samples, 85.30%)</title><rect x="14.5925%" y="1013" width="85.2997%" height="15" fill="rgb(241,121,6)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1023.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (9,493 samples, 85.30%)</title><rect x="14.5925%" y="997" width="85.2997%" height="15" fill="rgb(234,221,29)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="1007.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (9,493 samples, 85.30%)</title><rect x="14.5925%" y="981" width="85.2997%" height="15" fill="rgb(229,136,5)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="991.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (9,493 samples, 85.30%)</title><rect x="14.5925%" y="965" width="85.2997%" height="15" fill="rgb(238,36,11)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="975.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (9,493 samples, 85.30%)</title><rect x="14.5925%" y="949" width="85.2997%" height="15" fill="rgb(251,55,41)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="959.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (9,493 samples, 85.30%)</title><rect x="14.5925%" y="933" width="85.2997%" height="15" fill="rgb(242,34,40)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="943.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9,493 samples, 85.30%)</title><rect x="14.5925%" y="917" width="85.2997%" height="15" fill="rgb(215,42,17)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="927.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (9,493 samples, 85.30%)</title><rect x="14.5925%" y="901" width="85.2997%" height="15" fill="rgb(207,44,46)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="911.50">core::ops::function::FnOnce::call_once</text></g><g><title>graphwalker::main (9,493 samples, 85.30%)</title><rect x="14.5925%" y="885" width="85.2997%" height="15" fill="rgb(211,206,28)" fg:x="1624" fg:w="9493"/><text x="14.8425%" y="895.50">graphwalker::main</text></g><g><title>machine::Machine::walk (9,486 samples, 85.24%)</title><rect x="14.6554%" y="869" width="85.2368%" height="15" fill="rgb(237,167,16)" fg:x="1631" fg:w="9486"/><text x="14.9054%" y="879.50">machine::Machine::walk</text></g><g><title>std::io::stdio::_print (33 samples, 0.30%)</title><rect x="99.5957%" y="853" width="0.2965%" height="15" fill="rgb(233,66,6)" fg:x="11084" fg:w="33"/><text x="99.8457%" y="863.50"></text></g><g><title>std::io::stdio::print_to (33 samples, 0.30%)</title><rect x="99.5957%" y="837" width="0.2965%" height="15" fill="rgb(246,123,29)" fg:x="11084" fg:w="33"/><text x="99.8457%" y="847.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (33 samples, 0.30%)</title><rect x="99.5957%" y="821" width="0.2965%" height="15" fill="rgb(209,62,40)" fg:x="11084" fg:w="33"/><text x="99.8457%" y="831.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (33 samples, 0.30%)</title><rect x="99.5957%" y="805" width="0.2965%" height="15" fill="rgb(218,4,25)" fg:x="11084" fg:w="33"/><text x="99.8457%" y="815.50"></text></g><g><title>std::io::Write::write_fmt (33 samples, 0.30%)</title><rect x="99.5957%" y="789" width="0.2965%" height="15" fill="rgb(253,91,49)" fg:x="11084" fg:w="33"/><text x="99.8457%" y="799.50"></text></g><g><title>core::fmt::write (33 samples, 0.30%)</title><rect x="99.5957%" y="773" width="0.2965%" height="15" fill="rgb(228,155,29)" fg:x="11084" fg:w="33"/><text x="99.8457%" y="783.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (6 samples, 0.05%)</title><rect x="99.8922%" y="1141" width="0.0539%" height="15" fill="rgb(243,57,37)" fg:x="11117" fg:w="6"/><text x="100.1422%" y="1151.50"></text></g><g><title>graphwalker (11,124 samples, 99.96%)</title><rect x="0.0000%" y="1157" width="99.9551%" height="15" fill="rgb(244,167,17)" fg:x="0" fg:w="11124"/><text x="0.2500%" y="1167.50">graphwalker</text></g><g><title>all (11,129 samples, 100%)</title><rect x="0.0000%" y="1173" width="100.0000%" height="15" fill="rgb(207,181,38)" fg:x="0" fg:w="11129"/><text x="0.2500%" y="1183.50"></text></g><g><title>perf-exec (5 samples, 0.04%)</title><rect x="99.9551%" y="1157" width="0.0449%" height="15" fill="rgb(211,8,23)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1141" width="0.0449%" height="15" fill="rgb(235,11,44)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1125" width="0.0449%" height="15" fill="rgb(248,18,52)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1109" width="0.0449%" height="15" fill="rgb(208,4,7)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1093" width="0.0449%" height="15" fill="rgb(240,17,39)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1077" width="0.0449%" height="15" fill="rgb(207,170,3)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1061" width="0.0449%" height="15" fill="rgb(236,100,52)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1045" width="0.0449%" height="15" fill="rgb(246,78,51)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1029" width="0.0449%" height="15" fill="rgb(211,17,15)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="1013" width="0.0449%" height="15" fill="rgb(209,59,46)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="997" width="0.0449%" height="15" fill="rgb(210,92,25)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="981" width="0.0449%" height="15" fill="rgb(238,174,52)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="991.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="965" width="0.0449%" height="15" fill="rgb(230,73,7)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="975.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="949" width="0.0449%" height="15" fill="rgb(243,124,40)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="959.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="933" width="0.0449%" height="15" fill="rgb(244,170,11)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="943.50"></text></g><g><title>[unknown] (5 samples, 0.04%)</title><rect x="99.9551%" y="917" width="0.0449%" height="15" fill="rgb(207,114,54)" fg:x="11124" fg:w="5"/><text x="100.2051%" y="927.50"></text></g></svg></svg>