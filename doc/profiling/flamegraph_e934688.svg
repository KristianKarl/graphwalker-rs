<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="966" onload="init(evt)" viewBox="0 0 1200 966" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="966" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="949.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="949.00"> </text><svg id="frames" x="10" width="1180" total_samples="10096"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.07%)</title><rect x="0.0099%" y="805" width="0.0693%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="7"/><text x="0.2599%" y="815.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.07%)</title><rect x="0.0099%" y="789" width="0.0693%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="7"/><text x="0.2599%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.07%)</title><rect x="0.0099%" y="773" width="0.0693%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="7"/><text x="0.2599%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 0.07%)</title><rect x="0.0099%" y="757" width="0.0693%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="7"/><text x="0.2599%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 0.07%)</title><rect x="0.0099%" y="741" width="0.0693%" height="15" fill="rgb(208,68,35)" fg:x="1" fg:w="7"/><text x="0.2599%" y="751.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 0.07%)</title><rect x="0.0099%" y="725" width="0.0693%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="7"/><text x="0.2599%" y="735.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.11%)</title><rect x="0.0000%" y="885" width="0.1090%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="11"/><text x="0.2500%" y="895.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.10%)</title><rect x="0.0099%" y="869" width="0.0990%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="10"/><text x="0.2599%" y="879.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.10%)</title><rect x="0.0099%" y="853" width="0.0990%" height="15" fill="rgb(218,30,26)" fg:x="1" fg:w="10"/><text x="0.2599%" y="863.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.10%)</title><rect x="0.0099%" y="837" width="0.0990%" height="15" fill="rgb(220,122,19)" fg:x="1" fg:w="10"/><text x="0.2599%" y="847.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.10%)</title><rect x="0.0099%" y="821" width="0.0990%" height="15" fill="rgb(250,228,42)" fg:x="1" fg:w="10"/><text x="0.2599%" y="831.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="0.0792%" y="805" width="0.0297%" height="15" fill="rgb(240,193,28)" fg:x="8" fg:w="3"/><text x="0.3292%" y="815.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="0.0792%" y="789" width="0.0297%" height="15" fill="rgb(216,20,37)" fg:x="8" fg:w="3"/><text x="0.3292%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (31 samples, 0.31%)</title><rect x="0.1090%" y="869" width="0.3071%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="31"/><text x="0.3590%" y="879.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.34%)</title><rect x="0.4160%" y="869" width="0.3368%" height="15" fill="rgb(217,207,13)" fg:x="42" fg:w="34"/><text x="0.6660%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (50 samples, 0.50%)</title><rect x="1.4758%" y="789" width="0.4952%" height="15" fill="rgb(231,73,38)" fg:x="149" fg:w="50"/><text x="1.7258%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (50 samples, 0.50%)</title><rect x="1.4758%" y="773" width="0.4952%" height="15" fill="rgb(225,20,46)" fg:x="149" fg:w="50"/><text x="1.7258%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (50 samples, 0.50%)</title><rect x="1.4758%" y="757" width="0.4952%" height="15" fill="rgb(210,31,41)" fg:x="149" fg:w="50"/><text x="1.7258%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (50 samples, 0.50%)</title><rect x="1.4758%" y="741" width="0.4952%" height="15" fill="rgb(221,200,47)" fg:x="149" fg:w="50"/><text x="1.7258%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (50 samples, 0.50%)</title><rect x="1.4758%" y="725" width="0.4952%" height="15" fill="rgb(226,26,5)" fg:x="149" fg:w="50"/><text x="1.7258%" y="735.50"></text></g><g><title>alloc::alloc::alloc (50 samples, 0.50%)</title><rect x="1.4758%" y="709" width="0.4952%" height="15" fill="rgb(249,33,26)" fg:x="149" fg:w="50"/><text x="1.7258%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (231 samples, 2.29%)</title><rect x="0.7528%" y="869" width="2.2880%" height="15" fill="rgb(235,183,28)" fg:x="76" fg:w="231"/><text x="1.0028%" y="879.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (158 samples, 1.56%)</title><rect x="1.4758%" y="853" width="1.5650%" height="15" fill="rgb(221,5,38)" fg:x="149" fg:w="158"/><text x="1.7258%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (158 samples, 1.56%)</title><rect x="1.4758%" y="837" width="1.5650%" height="15" fill="rgb(247,18,42)" fg:x="149" fg:w="158"/><text x="1.7258%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (158 samples, 1.56%)</title><rect x="1.4758%" y="821" width="1.5650%" height="15" fill="rgb(241,131,45)" fg:x="149" fg:w="158"/><text x="1.7258%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (158 samples, 1.56%)</title><rect x="1.4758%" y="805" width="1.5650%" height="15" fill="rgb(249,31,29)" fg:x="149" fg:w="158"/><text x="1.7258%" y="815.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (108 samples, 1.07%)</title><rect x="1.9711%" y="789" width="1.0697%" height="15" fill="rgb(225,111,53)" fg:x="199" fg:w="108"/><text x="2.2211%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (108 samples, 1.07%)</title><rect x="1.9711%" y="773" width="1.0697%" height="15" fill="rgb(238,160,17)" fg:x="199" fg:w="108"/><text x="2.2211%" y="783.50"></text></g><g><title>[graphwalker] (42 samples, 0.42%)</title><rect x="3.0507%" y="869" width="0.4160%" height="15" fill="rgb(214,148,48)" fg:x="308" fg:w="42"/><text x="3.3007%" y="879.50"></text></g><g><title>_int_free (42 samples, 0.42%)</title><rect x="3.0507%" y="853" width="0.4160%" height="15" fill="rgb(232,36,49)" fg:x="308" fg:w="42"/><text x="3.3007%" y="863.50"></text></g><g><title>__GI___libc_malloc (87 samples, 0.86%)</title><rect x="3.4667%" y="869" width="0.8617%" height="15" fill="rgb(209,103,24)" fg:x="350" fg:w="87"/><text x="3.7167%" y="879.50"></text></g><g><title>__memcmp_avx2_movbe (9 samples, 0.09%)</title><rect x="4.3384%" y="869" width="0.0891%" height="15" fill="rgb(229,88,8)" fg:x="438" fg:w="9"/><text x="4.5884%" y="879.50"></text></g><g><title>_int_free (13 samples, 0.13%)</title><rect x="4.4275%" y="869" width="0.1288%" height="15" fill="rgb(213,181,19)" fg:x="447" fg:w="13"/><text x="4.6775%" y="879.50"></text></g><g><title>_int_malloc (6 samples, 0.06%)</title><rect x="4.5563%" y="869" width="0.0594%" height="15" fill="rgb(254,191,54)" fg:x="460" fg:w="6"/><text x="4.8063%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Context&gt; (104 samples, 1.03%)</title><rect x="4.6256%" y="869" width="1.0301%" height="15" fill="rgb(241,83,37)" fg:x="467" fg:w="104"/><text x="4.8756%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,u32&gt;&gt; (104 samples, 1.03%)</title><rect x="4.6256%" y="853" width="1.0301%" height="15" fill="rgb(233,36,39)" fg:x="467" fg:w="104"/><text x="4.8756%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 1.03%)</title><rect x="4.6256%" y="837" width="1.0301%" height="15" fill="rgb(226,3,54)" fg:x="467" fg:w="104"/><text x="4.8756%" y="847.50"></text></g><g><title>core::mem::drop (104 samples, 1.03%)</title><rect x="4.6256%" y="821" width="1.0301%" height="15" fill="rgb(245,192,40)" fg:x="467" fg:w="104"/><text x="4.8756%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,u32&gt;&gt; (104 samples, 1.03%)</title><rect x="4.6256%" y="805" width="1.0301%" height="15" fill="rgb(238,167,29)" fg:x="467" fg:w="104"/><text x="4.8756%" y="815.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (104 samples, 1.03%)</title><rect x="4.6256%" y="789" width="1.0301%" height="15" fill="rgb(232,182,51)" fg:x="467" fg:w="104"/><text x="4.8756%" y="799.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (65 samples, 0.64%)</title><rect x="5.0119%" y="773" width="0.6438%" height="15" fill="rgb(231,60,39)" fg:x="506" fg:w="65"/><text x="5.2619%" y="783.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (65 samples, 0.64%)</title><rect x="5.0119%" y="757" width="0.6438%" height="15" fill="rgb(208,69,12)" fg:x="506" fg:w="65"/><text x="5.2619%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (65 samples, 0.64%)</title><rect x="5.0119%" y="741" width="0.6438%" height="15" fill="rgb(235,93,37)" fg:x="506" fg:w="65"/><text x="5.2619%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (65 samples, 0.64%)</title><rect x="5.0119%" y="725" width="0.6438%" height="15" fill="rgb(213,116,39)" fg:x="506" fg:w="65"/><text x="5.2619%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (65 samples, 0.64%)</title><rect x="5.0119%" y="709" width="0.6438%" height="15" fill="rgb(222,207,29)" fg:x="506" fg:w="65"/><text x="5.2619%" y="719.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (65 samples, 0.64%)</title><rect x="5.0119%" y="693" width="0.6438%" height="15" fill="rgb(206,96,30)" fg:x="506" fg:w="65"/><text x="5.2619%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (65 samples, 0.64%)</title><rect x="5.0119%" y="677" width="0.6438%" height="15" fill="rgb(218,138,4)" fg:x="506" fg:w="65"/><text x="5.2619%" y="687.50"></text></g><g><title>alloc::alloc::dealloc (65 samples, 0.64%)</title><rect x="5.0119%" y="661" width="0.6438%" height="15" fill="rgb(250,191,14)" fg:x="506" fg:w="65"/><text x="5.2619%" y="671.50"></text></g><g><title>graph::Model::has_id (2 samples, 0.02%)</title><rect x="5.6656%" y="869" width="0.0198%" height="15" fill="rgb(239,60,40)" fg:x="572" fg:w="2"/><text x="5.9156%" y="879.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (2 samples, 0.02%)</title><rect x="5.6656%" y="853" width="0.0198%" height="15" fill="rgb(206,27,48)" fg:x="572" fg:w="2"/><text x="5.9156%" y="863.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (2 samples, 0.02%)</title><rect x="5.6656%" y="837" width="0.0198%" height="15" fill="rgb(225,35,8)" fg:x="572" fg:w="2"/><text x="5.9156%" y="847.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.02%)</title><rect x="5.6656%" y="821" width="0.0198%" height="15" fill="rgb(250,213,24)" fg:x="572" fg:w="2"/><text x="5.9156%" y="831.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.02%)</title><rect x="5.6656%" y="805" width="0.0198%" height="15" fill="rgb(247,123,22)" fg:x="572" fg:w="2"/><text x="5.9156%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.02%)</title><rect x="5.6656%" y="789" width="0.0198%" height="15" fill="rgb(231,138,38)" fg:x="572" fg:w="2"/><text x="5.9156%" y="799.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (2 samples, 0.02%)</title><rect x="5.6656%" y="773" width="0.0198%" height="15" fill="rgb(231,145,46)" fg:x="572" fg:w="2"/><text x="5.9156%" y="783.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (2 samples, 0.02%)</title><rect x="5.6656%" y="757" width="0.0198%" height="15" fill="rgb(251,118,11)" fg:x="572" fg:w="2"/><text x="5.9156%" y="767.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (2 samples, 0.02%)</title><rect x="5.6656%" y="741" width="0.0198%" height="15" fill="rgb(217,147,25)" fg:x="572" fg:w="2"/><text x="5.9156%" y="751.50"></text></g><g><title>[[heap]] (565 samples, 5.60%)</title><rect x="0.1090%" y="885" width="5.5963%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="565"/><text x="0.3590%" y="895.50">[[heap]]</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="5.7052%" y="869" width="0.0198%" height="15" fill="rgb(209,12,38)" fg:x="576" fg:w="2"/><text x="5.9552%" y="879.50"></text></g><g><title>__GI___libc_free (46 samples, 0.46%)</title><rect x="5.7349%" y="869" width="0.4556%" height="15" fill="rgb(227,1,9)" fg:x="579" fg:w="46"/><text x="5.9849%" y="879.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="6.1906%" y="869" width="0.0198%" height="15" fill="rgb(248,47,43)" fg:x="625" fg:w="2"/><text x="6.4406%" y="879.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (61 samples, 0.60%)</title><rect x="6.2104%" y="869" width="0.6042%" height="15" fill="rgb(221,10,30)" fg:x="627" fg:w="61"/><text x="6.4604%" y="879.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (3 samples, 0.03%)</title><rect x="6.7849%" y="853" width="0.0297%" height="15" fill="rgb(210,229,1)" fg:x="685" fg:w="3"/><text x="7.0349%" y="863.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (3 samples, 0.03%)</title><rect x="6.7849%" y="837" width="0.0297%" height="15" fill="rgb(222,148,37)" fg:x="685" fg:w="3"/><text x="7.0349%" y="847.50"></text></g><g><title>alloc::collections::btree::mem::replace (3 samples, 0.03%)</title><rect x="6.7849%" y="821" width="0.0297%" height="15" fill="rgb(234,67,33)" fg:x="685" fg:w="3"/><text x="7.0349%" y="831.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (3 samples, 0.03%)</title><rect x="6.7849%" y="805" width="0.0297%" height="15" fill="rgb(247,98,35)" fg:x="685" fg:w="3"/><text x="7.0349%" y="815.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (3 samples, 0.03%)</title><rect x="6.7849%" y="789" width="0.0297%" height="15" fill="rgb(247,138,52)" fg:x="685" fg:w="3"/><text x="7.0349%" y="799.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (3 samples, 0.03%)</title><rect x="6.7849%" y="773" width="0.0297%" height="15" fill="rgb(213,79,30)" fg:x="685" fg:w="3"/><text x="7.0349%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="6.7849%" y="757" width="0.0297%" height="15" fill="rgb(246,177,23)" fg:x="685" fg:w="3"/><text x="7.0349%" y="767.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="6.7849%" y="741" width="0.0297%" height="15" fill="rgb(230,62,27)" fg:x="685" fg:w="3"/><text x="7.0349%" y="751.50"></text></g><g><title>machine::Machine::log_step (2 samples, 0.02%)</title><rect x="6.8344%" y="853" width="0.0198%" height="15" fill="rgb(216,154,8)" fg:x="690" fg:w="2"/><text x="7.0844%" y="863.50"></text></g><g><title>machine::Machine::step (4 samples, 0.04%)</title><rect x="6.8245%" y="869" width="0.0396%" height="15" fill="rgb(244,35,45)" fg:x="689" fg:w="4"/><text x="7.0745%" y="879.50"></text></g><g><title>[[stack]] (122 samples, 1.21%)</title><rect x="5.7052%" y="885" width="1.2084%" height="15" fill="rgb(251,115,12)" fg:x="576" fg:w="122"/><text x="5.9552%" y="895.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.04%)</title><rect x="6.8740%" y="869" width="0.0396%" height="15" fill="rgb(240,54,50)" fg:x="694" fg:w="4"/><text x="7.1240%" y="879.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (3 samples, 0.03%)</title><rect x="6.8839%" y="853" width="0.0297%" height="15" fill="rgb(233,84,52)" fg:x="695" fg:w="3"/><text x="7.1339%" y="863.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (3 samples, 0.03%)</title><rect x="6.8839%" y="837" width="0.0297%" height="15" fill="rgb(207,117,47)" fg:x="695" fg:w="3"/><text x="7.1339%" y="847.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.03%)</title><rect x="6.8839%" y="821" width="0.0297%" height="15" fill="rgb(249,43,39)" fg:x="695" fg:w="3"/><text x="7.1339%" y="831.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.03%)</title><rect x="6.8839%" y="805" width="0.0297%" height="15" fill="rgb(209,38,44)" fg:x="695" fg:w="3"/><text x="7.1339%" y="815.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.03%)</title><rect x="6.8839%" y="789" width="0.0297%" height="15" fill="rgb(236,212,23)" fg:x="695" fg:w="3"/><text x="7.1339%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.03%)</title><rect x="6.8839%" y="773" width="0.0297%" height="15" fill="rgb(242,79,21)" fg:x="695" fg:w="3"/><text x="7.1339%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.03%)</title><rect x="6.8839%" y="757" width="0.0297%" height="15" fill="rgb(211,96,35)" fg:x="695" fg:w="3"/><text x="7.1339%" y="767.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="6.8839%" y="741" width="0.0297%" height="15" fill="rgb(253,215,40)" fg:x="695" fg:w="3"/><text x="7.1339%" y="751.50"></text></g><g><title>[graphwalker] (99 samples, 0.98%)</title><rect x="6.9136%" y="885" width="0.9806%" height="15" fill="rgb(211,81,21)" fg:x="698" fg:w="99"/><text x="7.1636%" y="895.50"></text></g><g><title>_int_free (97 samples, 0.96%)</title><rect x="6.9334%" y="869" width="0.9608%" height="15" fill="rgb(208,190,38)" fg:x="700" fg:w="97"/><text x="7.1834%" y="879.50"></text></g><g><title>[libc.so.6] (5 samples, 0.05%)</title><rect x="7.8942%" y="885" width="0.0495%" height="15" fill="rgb(235,213,38)" fg:x="797" fg:w="5"/><text x="8.1442%" y="895.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 0.05%)</title><rect x="7.8942%" y="869" width="0.0495%" height="15" fill="rgb(237,122,38)" fg:x="797" fg:w="5"/><text x="8.1442%" y="879.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (11 samples, 0.11%)</title><rect x="8.6866%" y="853" width="0.1090%" height="15" fill="rgb(244,218,35)" fg:x="877" fg:w="11"/><text x="8.9366%" y="863.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (11 samples, 0.11%)</title><rect x="8.6866%" y="837" width="0.1090%" height="15" fill="rgb(240,68,47)" fg:x="877" fg:w="11"/><text x="8.9366%" y="847.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (11 samples, 0.11%)</title><rect x="8.6866%" y="821" width="0.1090%" height="15" fill="rgb(210,16,53)" fg:x="877" fg:w="11"/><text x="8.9366%" y="831.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (11 samples, 0.11%)</title><rect x="8.6866%" y="805" width="0.1090%" height="15" fill="rgb(235,124,12)" fg:x="877" fg:w="11"/><text x="8.9366%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (11 samples, 0.11%)</title><rect x="8.6866%" y="789" width="0.1090%" height="15" fill="rgb(224,169,11)" fg:x="877" fg:w="11"/><text x="8.9366%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (11 samples, 0.11%)</title><rect x="8.6866%" y="773" width="0.1090%" height="15" fill="rgb(250,166,2)" fg:x="877" fg:w="11"/><text x="8.9366%" y="783.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (11 samples, 0.11%)</title><rect x="8.6866%" y="757" width="0.1090%" height="15" fill="rgb(242,216,29)" fg:x="877" fg:w="11"/><text x="8.9366%" y="767.50"></text></g><g><title>alloc::alloc::alloc (11 samples, 0.11%)</title><rect x="8.6866%" y="741" width="0.1090%" height="15" fill="rgb(230,116,27)" fg:x="877" fg:w="11"/><text x="8.9366%" y="751.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (86 samples, 0.85%)</title><rect x="8.0032%" y="869" width="0.8518%" height="15" fill="rgb(228,99,48)" fg:x="808" fg:w="86"/><text x="8.2532%" y="879.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (6 samples, 0.06%)</title><rect x="8.7956%" y="853" width="0.0594%" height="15" fill="rgb(253,11,6)" fg:x="888" fg:w="6"/><text x="9.0456%" y="863.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (6 samples, 0.06%)</title><rect x="8.7956%" y="837" width="0.0594%" height="15" fill="rgb(247,143,39)" fg:x="888" fg:w="6"/><text x="9.0456%" y="847.50"></text></g><g><title>alloc::collections::btree::mem::replace (6 samples, 0.06%)</title><rect x="8.7956%" y="821" width="0.0594%" height="15" fill="rgb(236,97,10)" fg:x="888" fg:w="6"/><text x="9.0456%" y="831.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (6 samples, 0.06%)</title><rect x="8.7956%" y="805" width="0.0594%" height="15" fill="rgb(233,208,19)" fg:x="888" fg:w="6"/><text x="9.0456%" y="815.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (6 samples, 0.06%)</title><rect x="8.7956%" y="789" width="0.0594%" height="15" fill="rgb(216,164,2)" fg:x="888" fg:w="6"/><text x="9.0456%" y="799.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (6 samples, 0.06%)</title><rect x="8.7956%" y="773" width="0.0594%" height="15" fill="rgb(220,129,5)" fg:x="888" fg:w="6"/><text x="9.0456%" y="783.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (6 samples, 0.06%)</title><rect x="8.7956%" y="757" width="0.0594%" height="15" fill="rgb(242,17,10)" fg:x="888" fg:w="6"/><text x="9.0456%" y="767.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (6 samples, 0.06%)</title><rect x="8.7956%" y="741" width="0.0594%" height="15" fill="rgb(242,107,0)" fg:x="888" fg:w="6"/><text x="9.0456%" y="751.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (6 samples, 0.06%)</title><rect x="8.7956%" y="725" width="0.0594%" height="15" fill="rgb(251,28,31)" fg:x="888" fg:w="6"/><text x="9.0456%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.06%)</title><rect x="8.7956%" y="709" width="0.0594%" height="15" fill="rgb(233,223,10)" fg:x="888" fg:w="6"/><text x="9.0456%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.06%)</title><rect x="8.7956%" y="693" width="0.0594%" height="15" fill="rgb(215,21,27)" fg:x="888" fg:w="6"/><text x="9.0456%" y="703.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.06%)</title><rect x="8.7956%" y="677" width="0.0594%" height="15" fill="rgb(232,23,21)" fg:x="888" fg:w="6"/><text x="9.0456%" y="687.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (61 samples, 0.60%)</title><rect x="8.8550%" y="869" width="0.6042%" height="15" fill="rgb(244,5,23)" fg:x="894" fg:w="61"/><text x="9.1050%" y="879.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.05%)</title><rect x="10.3903%" y="789" width="0.0495%" height="15" fill="rgb(226,81,46)" fg:x="1049" fg:w="5"/><text x="10.6403%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.05%)</title><rect x="10.3903%" y="773" width="0.0495%" height="15" fill="rgb(247,70,30)" fg:x="1049" fg:w="5"/><text x="10.6403%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.05%)</title><rect x="10.3903%" y="757" width="0.0495%" height="15" fill="rgb(212,68,19)" fg:x="1049" fg:w="5"/><text x="10.6403%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.05%)</title><rect x="10.3903%" y="741" width="0.0495%" height="15" fill="rgb(240,187,13)" fg:x="1049" fg:w="5"/><text x="10.6403%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.05%)</title><rect x="10.3903%" y="725" width="0.0495%" height="15" fill="rgb(223,113,26)" fg:x="1049" fg:w="5"/><text x="10.6403%" y="735.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.05%)</title><rect x="10.3903%" y="709" width="0.0495%" height="15" fill="rgb(206,192,2)" fg:x="1049" fg:w="5"/><text x="10.6403%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (110 samples, 1.09%)</title><rect x="9.4592%" y="869" width="1.0895%" height="15" fill="rgb(241,108,4)" fg:x="955" fg:w="110"/><text x="9.7092%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.16%)</title><rect x="10.3903%" y="853" width="0.1585%" height="15" fill="rgb(247,173,49)" fg:x="1049" fg:w="16"/><text x="10.6403%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.16%)</title><rect x="10.3903%" y="837" width="0.1585%" height="15" fill="rgb(224,114,35)" fg:x="1049" fg:w="16"/><text x="10.6403%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.16%)</title><rect x="10.3903%" y="821" width="0.1585%" height="15" fill="rgb(245,159,27)" fg:x="1049" fg:w="16"/><text x="10.6403%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.16%)</title><rect x="10.3903%" y="805" width="0.1585%" height="15" fill="rgb(245,172,44)" fg:x="1049" fg:w="16"/><text x="10.6403%" y="815.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (11 samples, 0.11%)</title><rect x="10.4398%" y="789" width="0.1090%" height="15" fill="rgb(236,23,11)" fg:x="1054" fg:w="11"/><text x="10.6898%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.11%)</title><rect x="10.4398%" y="773" width="0.1090%" height="15" fill="rgb(205,117,38)" fg:x="1054" fg:w="11"/><text x="10.6898%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="10.5487%" y="869" width="0.0198%" height="15" fill="rgb(237,72,25)" fg:x="1065" fg:w="2"/><text x="10.7987%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="869" width="0.0198%" height="15" fill="rgb(244,70,9)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="853" width="0.0198%" height="15" fill="rgb(217,125,39)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="837" width="0.0198%" height="15" fill="rgb(235,36,10)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="821" width="0.0198%" height="15" fill="rgb(251,123,47)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="805" width="0.0198%" height="15" fill="rgb(221,13,13)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="789" width="0.0198%" height="15" fill="rgb(238,131,9)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="773" width="0.0198%" height="15" fill="rgb(211,50,8)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="757" width="0.0198%" height="15" fill="rgb(245,182,24)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="741" width="0.0198%" height="15" fill="rgb(242,14,37)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="725" width="0.0198%" height="15" fill="rgb(246,228,12)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="709" width="0.0198%" height="15" fill="rgb(213,55,15)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="693" width="0.0198%" height="15" fill="rgb(209,9,3)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="677" width="0.0198%" height="15" fill="rgb(230,59,30)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="661" width="0.0198%" height="15" fill="rgb(209,121,21)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="645" width="0.0198%" height="15" fill="rgb(220,109,13)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="629" width="0.0198%" height="15" fill="rgb(232,18,1)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="10.5884%" y="613" width="0.0198%" height="15" fill="rgb(215,41,42)" fg:x="1069" fg:w="2"/><text x="10.8384%" y="623.50"></text></g><g><title>__GI___libc_free (137 samples, 1.36%)</title><rect x="10.6082%" y="869" width="1.3570%" height="15" fill="rgb(224,123,36)" fg:x="1071" fg:w="137"/><text x="10.8582%" y="879.50"></text></g><g><title>__GI___libc_malloc (139 samples, 1.38%)</title><rect x="11.9651%" y="869" width="1.3768%" height="15" fill="rgb(240,125,3)" fg:x="1208" fg:w="139"/><text x="12.2151%" y="879.50"></text></g><g><title>__memcmp_avx2_movbe (39 samples, 0.39%)</title><rect x="13.3419%" y="869" width="0.3863%" height="15" fill="rgb(205,98,50)" fg:x="1347" fg:w="39"/><text x="13.5919%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (45 samples, 0.45%)</title><rect x="13.7282%" y="869" width="0.4457%" height="15" fill="rgb(205,185,37)" fg:x="1386" fg:w="45"/><text x="13.9782%" y="879.50"></text></g><g><title>_int_free (7 samples, 0.07%)</title><rect x="14.1739%" y="869" width="0.0693%" height="15" fill="rgb(238,207,15)" fg:x="1431" fg:w="7"/><text x="14.4239%" y="879.50"></text></g><g><title>_int_free_maybe_consolidate (26 samples, 0.26%)</title><rect x="14.2433%" y="869" width="0.2575%" height="15" fill="rgb(213,199,42)" fg:x="1438" fg:w="26"/><text x="14.4933%" y="879.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.04%)</title><rect x="14.5008%" y="869" width="0.0396%" height="15" fill="rgb(235,201,11)" fg:x="1464" fg:w="4"/><text x="14.7508%" y="879.50"></text></g><g><title>_int_malloc (32 samples, 0.32%)</title><rect x="14.5404%" y="869" width="0.3170%" height="15" fill="rgb(207,46,11)" fg:x="1468" fg:w="32"/><text x="14.7904%" y="879.50"></text></g><g><title>_int_realloc (2 samples, 0.02%)</title><rect x="14.8574%" y="869" width="0.0198%" height="15" fill="rgb(241,35,35)" fg:x="1500" fg:w="2"/><text x="15.1074%" y="879.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (113 samples, 1.12%)</title><rect x="14.8871%" y="869" width="1.1193%" height="15" fill="rgb(243,32,47)" fg:x="1503" fg:w="113"/><text x="15.1371%" y="879.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (59 samples, 0.58%)</title><rect x="16.0460%" y="853" width="0.5844%" height="15" fill="rgb(247,202,23)" fg:x="1620" fg:w="59"/><text x="16.2960%" y="863.50"></text></g><g><title>[unknown] (908 samples, 8.99%)</title><rect x="7.9437%" y="885" width="8.9937%" height="15" fill="rgb(219,102,11)" fg:x="802" fg:w="908"/><text x="8.1937%" y="895.50">[unknown]</text></g><g><title>graph::Model::out_edges (90 samples, 0.89%)</title><rect x="16.0460%" y="869" width="0.8914%" height="15" fill="rgb(243,110,44)" fg:x="1620" fg:w="90"/><text x="16.2960%" y="879.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (31 samples, 0.31%)</title><rect x="16.6303%" y="853" width="0.3071%" height="15" fill="rgb(222,74,54)" fg:x="1679" fg:w="31"/><text x="16.8803%" y="863.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (31 samples, 0.31%)</title><rect x="16.6303%" y="837" width="0.3071%" height="15" fill="rgb(216,99,12)" fg:x="1679" fg:w="31"/><text x="16.8803%" y="847.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (31 samples, 0.31%)</title><rect x="16.6303%" y="821" width="0.3071%" height="15" fill="rgb(226,22,26)" fg:x="1679" fg:w="31"/><text x="16.8803%" y="831.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (31 samples, 0.31%)</title><rect x="16.6303%" y="805" width="0.3071%" height="15" fill="rgb(217,163,10)" fg:x="1679" fg:w="31"/><text x="16.8803%" y="815.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (31 samples, 0.31%)</title><rect x="16.6303%" y="789" width="0.3071%" height="15" fill="rgb(213,25,53)" fg:x="1679" fg:w="31"/><text x="16.8803%" y="799.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.15%)</title><rect x="16.9473%" y="885" width="0.1486%" height="15" fill="rgb(252,105,26)" fg:x="1711" fg:w="15"/><text x="17.1973%" y="895.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.05%)</title><rect x="17.0959%" y="885" width="0.0495%" height="15" fill="rgb(220,39,43)" fg:x="1726" fg:w="5"/><text x="17.3459%" y="895.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 0.06%)</title><rect x="17.1949%" y="597" width="0.0594%" height="15" fill="rgb(229,68,48)" fg:x="1736" fg:w="6"/><text x="17.4449%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 0.06%)</title><rect x="17.1949%" y="581" width="0.0594%" height="15" fill="rgb(252,8,32)" fg:x="1736" fg:w="6"/><text x="17.4449%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 0.06%)</title><rect x="17.1949%" y="565" width="0.0594%" height="15" fill="rgb(223,20,43)" fg:x="1736" fg:w="6"/><text x="17.4449%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 0.06%)</title><rect x="17.1949%" y="549" width="0.0594%" height="15" fill="rgb(229,81,49)" fg:x="1736" fg:w="6"/><text x="17.4449%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.05%)</title><rect x="17.2048%" y="533" width="0.0495%" height="15" fill="rgb(236,28,36)" fg:x="1737" fg:w="5"/><text x="17.4548%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.05%)</title><rect x="17.2048%" y="517" width="0.0495%" height="15" fill="rgb(249,185,26)" fg:x="1737" fg:w="5"/><text x="17.4548%" y="527.50"></text></g><g><title>__GI___libc_free (5 samples, 0.05%)</title><rect x="17.2048%" y="501" width="0.0495%" height="15" fill="rgb(249,174,33)" fg:x="1737" fg:w="5"/><text x="17.4548%" y="511.50"></text></g><g><title>_int_free_merge_chunk (2 samples, 0.02%)</title><rect x="17.2345%" y="485" width="0.0198%" height="15" fill="rgb(233,201,37)" fg:x="1740" fg:w="2"/><text x="17.4845%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.03%)</title><rect x="17.2544%" y="581" width="0.0297%" height="15" fill="rgb(221,78,26)" fg:x="1742" fg:w="3"/><text x="17.5044%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="17.2544%" y="565" width="0.0297%" height="15" fill="rgb(250,127,30)" fg:x="1742" fg:w="3"/><text x="17.5044%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="17.2544%" y="549" width="0.0297%" height="15" fill="rgb(230,49,44)" fg:x="1742" fg:w="3"/><text x="17.5044%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="17.2544%" y="533" width="0.0297%" height="15" fill="rgb(229,67,23)" fg:x="1742" fg:w="3"/><text x="17.5044%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="17.2544%" y="517" width="0.0297%" height="15" fill="rgb(249,83,47)" fg:x="1742" fg:w="3"/><text x="17.5044%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="17.2544%" y="501" width="0.0297%" height="15" fill="rgb(215,43,3)" fg:x="1742" fg:w="3"/><text x="17.5044%" y="511.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="17.2643%" y="485" width="0.0198%" height="15" fill="rgb(238,154,13)" fg:x="1743" fg:w="2"/><text x="17.5143%" y="495.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="17.2643%" y="469" width="0.0198%" height="15" fill="rgb(219,56,2)" fg:x="1743" fg:w="2"/><text x="17.5143%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Step&gt; (6 samples, 0.06%)</title><rect x="17.2544%" y="597" width="0.0594%" height="15" fill="rgb(233,0,4)" fg:x="1742" fg:w="6"/><text x="17.5044%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Position&gt; (3 samples, 0.03%)</title><rect x="17.2841%" y="581" width="0.0297%" height="15" fill="rgb(235,30,7)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.03%)</title><rect x="17.2841%" y="565" width="0.0297%" height="15" fill="rgb(250,79,13)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="17.2841%" y="549" width="0.0297%" height="15" fill="rgb(211,146,34)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="17.2841%" y="533" width="0.0297%" height="15" fill="rgb(228,22,38)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="17.2841%" y="517" width="0.0297%" height="15" fill="rgb(235,168,5)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="17.2841%" y="501" width="0.0297%" height="15" fill="rgb(221,155,16)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="17.2841%" y="485" width="0.0297%" height="15" fill="rgb(215,215,53)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="495.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="17.2841%" y="469" width="0.0297%" height="15" fill="rgb(223,4,10)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="479.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="17.2841%" y="453" width="0.0297%" height="15" fill="rgb(234,103,6)" fg:x="1745" fg:w="3"/><text x="17.5341%" y="463.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="17.3138%" y="581" width="0.0198%" height="15" fill="rgb(227,97,0)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="591.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="17.3138%" y="565" width="0.0198%" height="15" fill="rgb(234,150,53)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="575.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (2 samples, 0.02%)</title><rect x="17.3138%" y="549" width="0.0198%" height="15" fill="rgb(228,201,54)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="559.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (2 samples, 0.02%)</title><rect x="17.3138%" y="533" width="0.0198%" height="15" fill="rgb(222,22,37)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="543.50"></text></g><g><title>alloc::collections::btree::mem::replace (2 samples, 0.02%)</title><rect x="17.3138%" y="517" width="0.0198%" height="15" fill="rgb(237,53,32)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (2 samples, 0.02%)</title><rect x="17.3138%" y="501" width="0.0198%" height="15" fill="rgb(233,25,53)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (2 samples, 0.02%)</title><rect x="17.3138%" y="485" width="0.0198%" height="15" fill="rgb(210,40,34)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="495.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="17.3138%" y="469" width="0.0198%" height="15" fill="rgb(241,220,44)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="479.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (2 samples, 0.02%)</title><rect x="17.3138%" y="453" width="0.0198%" height="15" fill="rgb(235,28,35)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.02%)</title><rect x="17.3138%" y="437" width="0.0198%" height="15" fill="rgb(210,56,17)" fg:x="1748" fg:w="2"/><text x="17.5638%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (208 samples, 2.06%)</title><rect x="19.2552%" y="373" width="2.0602%" height="15" fill="rgb(224,130,29)" fg:x="1944" fg:w="208"/><text x="19.5052%" y="383.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (124 samples, 1.23%)</title><rect x="20.0872%" y="357" width="1.2282%" height="15" fill="rgb(235,212,8)" fg:x="2028" fg:w="124"/><text x="20.3372%" y="367.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (234 samples, 2.32%)</title><rect x="19.2552%" y="389" width="2.3177%" height="15" fill="rgb(223,33,50)" fg:x="1944" fg:w="234"/><text x="19.5052%" y="399.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (26 samples, 0.26%)</title><rect x="21.3154%" y="373" width="0.2575%" height="15" fill="rgb(219,149,13)" fg:x="2152" fg:w="26"/><text x="21.5654%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.07%)</title><rect x="21.5036%" y="357" width="0.0693%" height="15" fill="rgb(250,156,29)" fg:x="2171" fg:w="7"/><text x="21.7536%" y="367.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend::_{{closure}} (7 samples, 0.07%)</title><rect x="21.5036%" y="341" width="0.0693%" height="15" fill="rgb(216,193,19)" fg:x="2171" fg:w="7"/><text x="21.7536%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (9 samples, 0.09%)</title><rect x="22.8605%" y="357" width="0.0891%" height="15" fill="rgb(216,135,14)" fg:x="2308" fg:w="9"/><text x="23.1105%" y="367.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (9 samples, 0.09%)</title><rect x="22.8605%" y="341" width="0.0891%" height="15" fill="rgb(241,47,5)" fg:x="2308" fg:w="9"/><text x="23.1105%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (9 samples, 0.09%)</title><rect x="22.8605%" y="325" width="0.0891%" height="15" fill="rgb(233,42,35)" fg:x="2308" fg:w="9"/><text x="23.1105%" y="335.50"></text></g><g><title>core::ptr::read (9 samples, 0.09%)</title><rect x="22.8605%" y="309" width="0.0891%" height="15" fill="rgb(231,13,6)" fg:x="2308" fg:w="9"/><text x="23.1105%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (41 samples, 0.41%)</title><rect x="22.6823%" y="373" width="0.4061%" height="15" fill="rgb(207,181,40)" fg:x="2290" fg:w="41"/><text x="22.9323%" y="383.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (14 samples, 0.14%)</title><rect x="22.9497%" y="357" width="0.1387%" height="15" fill="rgb(254,173,49)" fg:x="2317" fg:w="14"/><text x="23.1997%" y="367.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (398 samples, 3.94%)</title><rect x="19.1660%" y="437" width="3.9422%" height="15" fill="rgb(221,1,38)" fg:x="1935" fg:w="398"/><text x="19.4160%" y="447.50">allo..</text></g><g><title>alloc::collections::btree::mem::replace (398 samples, 3.94%)</title><rect x="19.1660%" y="421" width="3.9422%" height="15" fill="rgb(206,124,46)" fg:x="1935" fg:w="398"/><text x="19.4160%" y="431.50">allo..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (398 samples, 3.94%)</title><rect x="19.1660%" y="405" width="3.9422%" height="15" fill="rgb(249,21,11)" fg:x="1935" fg:w="398"/><text x="19.4160%" y="415.50">allo..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (155 samples, 1.54%)</title><rect x="21.5729%" y="389" width="1.5353%" height="15" fill="rgb(222,201,40)" fg:x="2178" fg:w="155"/><text x="21.8229%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.02%)</title><rect x="23.0884%" y="373" width="0.0198%" height="15" fill="rgb(235,61,29)" fg:x="2331" fg:w="2"/><text x="23.3384%" y="383.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (2 samples, 0.02%)</title><rect x="23.0884%" y="357" width="0.0198%" height="15" fill="rgb(219,207,3)" fg:x="2331" fg:w="2"/><text x="23.3384%" y="367.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (2 samples, 0.02%)</title><rect x="23.0884%" y="341" width="0.0198%" height="15" fill="rgb(222,56,46)" fg:x="2331" fg:w="2"/><text x="23.3384%" y="351.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="23.0884%" y="325" width="0.0198%" height="15" fill="rgb(239,76,54)" fg:x="2331" fg:w="2"/><text x="23.3384%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (677 samples, 6.71%)</title><rect x="17.3435%" y="469" width="6.7056%" height="15" fill="rgb(231,124,27)" fg:x="1751" fg:w="677"/><text x="17.5935%" y="479.50">&lt;alloc::c..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (573 samples, 5.68%)</title><rect x="18.3736%" y="453" width="5.6755%" height="15" fill="rgb(249,195,6)" fg:x="1855" fg:w="573"/><text x="18.6236%" y="463.50">alloc::..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (95 samples, 0.94%)</title><rect x="23.1082%" y="437" width="0.9410%" height="15" fill="rgb(237,174,47)" fg:x="2333" fg:w="95"/><text x="23.3582%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.02%)</title><rect x="24.0293%" y="421" width="0.0198%" height="15" fill="rgb(206,201,31)" fg:x="2426" fg:w="2"/><text x="24.2793%" y="431.50"></text></g><g><title>machine::Machine::is_all_fullfilled (789 samples, 7.81%)</title><rect x="17.3138%" y="597" width="7.8150%" height="15" fill="rgb(231,57,52)" fg:x="1748" fg:w="789"/><text x="17.5638%" y="607.50">machine::Ma..</text></g><g><title>machine::Context::is_fullfilled (786 samples, 7.79%)</title><rect x="17.3435%" y="581" width="7.7853%" height="15" fill="rgb(248,177,22)" fg:x="1751" fg:w="786"/><text x="17.5935%" y="591.50">machine::Co..</text></g><g><title>machine::Context::get_fullfilment (786 samples, 7.79%)</title><rect x="17.3435%" y="565" width="7.7853%" height="15" fill="rgb(215,211,37)" fg:x="1751" fg:w="786"/><text x="17.5935%" y="575.50">machine::Co..</text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (786 samples, 7.79%)</title><rect x="17.3435%" y="549" width="7.7853%" height="15" fill="rgb(241,128,51)" fg:x="1751" fg:w="786"/><text x="17.5935%" y="559.50">&lt;core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (786 samples, 7.79%)</title><rect x="17.3435%" y="533" width="7.7853%" height="15" fill="rgb(227,165,31)" fg:x="1751" fg:w="786"/><text x="17.5935%" y="543.50">core::iter:..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (786 samples, 7.79%)</title><rect x="17.3435%" y="517" width="7.7853%" height="15" fill="rgb(228,167,24)" fg:x="1751" fg:w="786"/><text x="17.5935%" y="527.50">&lt;usize as c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (786 samples, 7.79%)</title><rect x="17.3435%" y="501" width="7.7853%" height="15" fill="rgb(228,143,12)" fg:x="1751" fg:w="786"/><text x="17.5935%" y="511.50">&lt;core::iter..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (786 samples, 7.79%)</title><rect x="17.3435%" y="485" width="7.7853%" height="15" fill="rgb(249,149,8)" fg:x="1751" fg:w="786"/><text x="17.5935%" y="495.50">core::iter:..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (109 samples, 1.08%)</title><rect x="24.0491%" y="469" width="1.0796%" height="15" fill="rgb(243,35,44)" fg:x="2428" fg:w="109"/><text x="24.2991%" y="479.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (109 samples, 1.08%)</title><rect x="24.0491%" y="453" width="1.0796%" height="15" fill="rgb(246,89,9)" fg:x="2428" fg:w="109"/><text x="24.2991%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="25.1288%" y="581" width="0.0495%" height="15" fill="rgb(233,213,13)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="25.1288%" y="565" width="0.0495%" height="15" fill="rgb(233,141,41)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="575.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.05%)</title><rect x="25.1288%" y="549" width="0.0495%" height="15" fill="rgb(239,167,4)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="559.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.05%)</title><rect x="25.1288%" y="533" width="0.0495%" height="15" fill="rgb(209,217,16)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="543.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.05%)</title><rect x="25.1288%" y="517" width="0.0495%" height="15" fill="rgb(219,88,35)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.05%)</title><rect x="25.1288%" y="501" width="0.0495%" height="15" fill="rgb(220,193,23)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.05%)</title><rect x="25.1288%" y="485" width="0.0495%" height="15" fill="rgb(230,90,52)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.05%)</title><rect x="25.1288%" y="469" width="0.0495%" height="15" fill="rgb(252,106,19)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.05%)</title><rect x="25.1288%" y="453" width="0.0495%" height="15" fill="rgb(206,74,20)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.05%)</title><rect x="25.1288%" y="437" width="0.0495%" height="15" fill="rgb(230,138,44)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="447.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.05%)</title><rect x="25.1288%" y="421" width="0.0495%" height="15" fill="rgb(235,182,43)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="431.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.05%)</title><rect x="25.1288%" y="405" width="0.0495%" height="15" fill="rgb(242,16,51)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="415.50"></text></g><g><title>_int_malloc (5 samples, 0.05%)</title><rect x="25.1288%" y="389" width="0.0495%" height="15" fill="rgb(248,9,4)" fg:x="2537" fg:w="5"/><text x="25.3788%" y="399.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="25.1585%" y="373" width="0.0198%" height="15" fill="rgb(210,31,22)" fg:x="2540" fg:w="2"/><text x="25.4085%" y="383.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (15 samples, 0.15%)</title><rect x="25.1882%" y="581" width="0.1486%" height="15" fill="rgb(239,54,39)" fg:x="2543" fg:w="15"/><text x="25.4382%" y="591.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (14 samples, 0.14%)</title><rect x="25.1981%" y="565" width="0.1387%" height="15" fill="rgb(230,99,41)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (14 samples, 0.14%)</title><rect x="25.1981%" y="549" width="0.1387%" height="15" fill="rgb(253,106,12)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (14 samples, 0.14%)</title><rect x="25.1981%" y="533" width="0.1387%" height="15" fill="rgb(213,46,41)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (14 samples, 0.14%)</title><rect x="25.1981%" y="517" width="0.1387%" height="15" fill="rgb(215,133,35)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (14 samples, 0.14%)</title><rect x="25.1981%" y="501" width="0.1387%" height="15" fill="rgb(213,28,5)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (14 samples, 0.14%)</title><rect x="25.1981%" y="485" width="0.1387%" height="15" fill="rgb(215,77,49)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (14 samples, 0.14%)</title><rect x="25.1981%" y="469" width="0.1387%" height="15" fill="rgb(248,100,22)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (14 samples, 0.14%)</title><rect x="25.1981%" y="453" width="0.1387%" height="15" fill="rgb(208,67,9)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.14%)</title><rect x="25.1981%" y="437" width="0.1387%" height="15" fill="rgb(219,133,21)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.14%)</title><rect x="25.1981%" y="421" width="0.1387%" height="15" fill="rgb(246,46,29)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="431.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.14%)</title><rect x="25.1981%" y="405" width="0.1387%" height="15" fill="rgb(246,185,52)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="415.50"></text></g><g><title>__GI___libc_malloc (14 samples, 0.14%)</title><rect x="25.1981%" y="389" width="0.1387%" height="15" fill="rgb(252,136,11)" fg:x="2544" fg:w="14"/><text x="25.4481%" y="399.50"></text></g><g><title>tcache_get (4 samples, 0.04%)</title><rect x="25.2971%" y="373" width="0.0396%" height="15" fill="rgb(219,138,53)" fg:x="2554" fg:w="4"/><text x="25.5471%" y="383.50"></text></g><g><title>tcache_get_n (4 samples, 0.04%)</title><rect x="25.2971%" y="357" width="0.0396%" height="15" fill="rgb(211,51,23)" fg:x="2554" fg:w="4"/><text x="25.5471%" y="367.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="25.3368%" y="581" width="0.0297%" height="15" fill="rgb(247,221,28)" fg:x="2558" fg:w="3"/><text x="25.5868%" y="591.50"></text></g><g><title>_int_free (3 samples, 0.03%)</title><rect x="25.3368%" y="565" width="0.0297%" height="15" fill="rgb(251,222,45)" fg:x="2558" fg:w="3"/><text x="25.5868%" y="575.50"></text></g><g><title>__memcmp_avx2_movbe (13 samples, 0.13%)</title><rect x="25.4259%" y="453" width="0.1288%" height="15" fill="rgb(217,162,53)" fg:x="2567" fg:w="13"/><text x="25.6759%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (23 samples, 0.23%)</title><rect x="25.3665%" y="581" width="0.2278%" height="15" fill="rgb(229,93,14)" fg:x="2561" fg:w="23"/><text x="25.6165%" y="591.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (23 samples, 0.23%)</title><rect x="25.3665%" y="565" width="0.2278%" height="15" fill="rgb(209,67,49)" fg:x="2561" fg:w="23"/><text x="25.6165%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (23 samples, 0.23%)</title><rect x="25.3665%" y="549" width="0.2278%" height="15" fill="rgb(213,87,29)" fg:x="2561" fg:w="23"/><text x="25.6165%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (23 samples, 0.23%)</title><rect x="25.3665%" y="533" width="0.2278%" height="15" fill="rgb(205,151,52)" fg:x="2561" fg:w="23"/><text x="25.6165%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (20 samples, 0.20%)</title><rect x="25.3962%" y="517" width="0.1981%" height="15" fill="rgb(253,215,39)" fg:x="2564" fg:w="20"/><text x="25.6462%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (20 samples, 0.20%)</title><rect x="25.3962%" y="501" width="0.1981%" height="15" fill="rgb(221,220,41)" fg:x="2564" fg:w="20"/><text x="25.6462%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (20 samples, 0.20%)</title><rect x="25.3962%" y="485" width="0.1981%" height="15" fill="rgb(218,133,21)" fg:x="2564" fg:w="20"/><text x="25.6462%" y="495.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (20 samples, 0.20%)</title><rect x="25.3962%" y="469" width="0.1981%" height="15" fill="rgb(221,193,43)" fg:x="2564" fg:w="20"/><text x="25.6462%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (4 samples, 0.04%)</title><rect x="25.5547%" y="453" width="0.0396%" height="15" fill="rgb(240,128,52)" fg:x="2580" fg:w="4"/><text x="25.8047%" y="463.50"></text></g><g><title>checked_request2size (14 samples, 0.14%)</title><rect x="36.6284%" y="261" width="0.1387%" height="15" fill="rgb(253,114,12)" fg:x="3698" fg:w="14"/><text x="36.8784%" y="271.50"></text></g><g><title>_int_malloc (608 samples, 6.02%)</title><rect x="31.7750%" y="277" width="6.0222%" height="15" fill="rgb(215,223,47)" fg:x="3208" fg:w="608"/><text x="32.0250%" y="287.50">_int_mal..</text></g><g><title>tcache_put (104 samples, 1.03%)</title><rect x="36.7670%" y="261" width="1.0301%" height="15" fill="rgb(248,225,23)" fg:x="3712" fg:w="104"/><text x="37.0170%" y="271.50"></text></g><g><title>arena_for_chunk (7 samples, 0.07%)</title><rect x="37.7971%" y="277" width="0.0693%" height="15" fill="rgb(250,108,0)" fg:x="3816" fg:w="7"/><text x="38.0471%" y="287.50"></text></g><g><title>checked_request2size (106 samples, 1.05%)</title><rect x="37.8665%" y="277" width="1.0499%" height="15" fill="rgb(228,208,7)" fg:x="3823" fg:w="106"/><text x="38.1165%" y="287.50"></text></g><g><title>__GI___libc_malloc (1,026 samples, 10.16%)</title><rect x="30.0119%" y="293" width="10.1624%" height="15" fill="rgb(244,45,10)" fg:x="3030" fg:w="1026"/><text x="30.2619%" y="303.50">__GI___libc_mal..</text></g><g><title>tcache_get (127 samples, 1.26%)</title><rect x="38.9164%" y="277" width="1.2579%" height="15" fill="rgb(207,125,25)" fg:x="3929" fg:w="127"/><text x="39.1664%" y="287.50"></text></g><g><title>tcache_get_n (127 samples, 1.26%)</title><rect x="38.9164%" y="261" width="1.2579%" height="15" fill="rgb(210,195,18)" fg:x="3929" fg:w="127"/><text x="39.1664%" y="271.50"></text></g><g><title>__rdl_alloc (102 samples, 1.01%)</title><rect x="40.1743%" y="293" width="1.0103%" height="15" fill="rgb(249,80,12)" fg:x="4056" fg:w="102"/><text x="40.4243%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (102 samples, 1.01%)</title><rect x="40.1743%" y="277" width="1.0103%" height="15" fill="rgb(221,65,9)" fg:x="4056" fg:w="102"/><text x="40.4243%" y="287.50"></text></g><g><title>__rust_alloc (50 samples, 0.50%)</title><rect x="41.1846%" y="293" width="0.4952%" height="15" fill="rgb(235,49,36)" fg:x="4158" fg:w="50"/><text x="41.4346%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,351 samples, 13.38%)</title><rect x="28.3181%" y="389" width="13.3815%" height="15" fill="rgb(225,32,20)" fg:x="2859" fg:w="1351"/><text x="28.5681%" y="399.50">alloc::vec::Vec&lt;T,A&gt;..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,351 samples, 13.38%)</title><rect x="28.3181%" y="373" width="13.3815%" height="15" fill="rgb(215,141,46)" fg:x="2859" fg:w="1351"/><text x="28.5681%" y="383.50">alloc::raw_vec::RawV..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,351 samples, 13.38%)</title><rect x="28.3181%" y="357" width="13.3815%" height="15" fill="rgb(250,160,47)" fg:x="2859" fg:w="1351"/><text x="28.5681%" y="367.50">alloc::raw_vec::RawV..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1,236 samples, 12.24%)</title><rect x="29.4572%" y="341" width="12.2425%" height="15" fill="rgb(216,222,40)" fg:x="2974" fg:w="1236"/><text x="29.7072%" y="351.50">&lt;alloc::alloc::Glo..</text></g><g><title>alloc::alloc::Global::alloc_impl (1,236 samples, 12.24%)</title><rect x="29.4572%" y="325" width="12.2425%" height="15" fill="rgb(234,217,39)" fg:x="2974" fg:w="1236"/><text x="29.7072%" y="335.50">alloc::alloc::Glob..</text></g><g><title>alloc::alloc::alloc (1,236 samples, 12.24%)</title><rect x="29.4572%" y="309" width="12.2425%" height="15" fill="rgb(207,178,40)" fg:x="2974" fg:w="1236"/><text x="29.7072%" y="319.50">alloc::alloc::alloc</text></g><g><title>core::ptr::read_volatile (2 samples, 0.02%)</title><rect x="41.6799%" y="293" width="0.0198%" height="15" fill="rgb(221,136,13)" fg:x="4208" fg:w="2"/><text x="41.9299%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,506 samples, 14.92%)</title><rect x="28.3181%" y="453" width="14.9168%" height="15" fill="rgb(249,199,10)" fg:x="2859" fg:w="1506"/><text x="28.5681%" y="463.50">&lt;alloc::vec::Vec&lt;T,A&gt; a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,506 samples, 14.92%)</title><rect x="28.3181%" y="437" width="14.9168%" height="15" fill="rgb(249,222,13)" fg:x="2859" fg:w="1506"/><text x="28.5681%" y="447.50">alloc::slice::&lt;impl [T]..</text></g><g><title>alloc::slice::hack::to_vec (1,506 samples, 14.92%)</title><rect x="28.3181%" y="421" width="14.9168%" height="15" fill="rgb(244,185,38)" fg:x="2859" fg:w="1506"/><text x="28.5681%" y="431.50">alloc::slice::hack::to_..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,506 samples, 14.92%)</title><rect x="28.3181%" y="405" width="14.9168%" height="15" fill="rgb(236,202,9)" fg:x="2859" fg:w="1506"/><text x="28.5681%" y="415.50">&lt;T as alloc::slice::hac..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (155 samples, 1.54%)</title><rect x="41.6997%" y="389" width="1.5353%" height="15" fill="rgb(250,229,37)" fg:x="4210" fg:w="155"/><text x="41.9497%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (155 samples, 1.54%)</title><rect x="41.6997%" y="373" width="1.5353%" height="15" fill="rgb(206,174,23)" fg:x="4210" fg:w="155"/><text x="41.9497%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (155 samples, 1.54%)</title><rect x="41.6997%" y="357" width="1.5353%" height="15" fill="rgb(211,33,43)" fg:x="4210" fg:w="155"/><text x="41.9497%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,613 samples, 15.98%)</title><rect x="27.2682%" y="469" width="15.9766%" height="15" fill="rgb(245,58,50)" fg:x="2753" fg:w="1613"/><text x="27.5182%" y="479.50">&lt;alloc::string::String as..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (55 samples, 0.54%)</title><rect x="43.2448%" y="469" width="0.5448%" height="15" fill="rgb(244,68,36)" fg:x="4366" fg:w="55"/><text x="43.4948%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (10 samples, 0.10%)</title><rect x="43.7896%" y="469" width="0.0990%" height="15" fill="rgb(232,229,15)" fg:x="4421" fg:w="10"/><text x="44.0396%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::key_area_mut (36 samples, 0.36%)</title><rect x="43.9085%" y="453" width="0.3566%" height="15" fill="rgb(254,30,23)" fg:x="4433" fg:w="36"/><text x="44.1585%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (36 samples, 0.36%)</title><rect x="43.9085%" y="437" width="0.3566%" height="15" fill="rgb(235,160,14)" fg:x="4433" fg:w="36"/><text x="44.1585%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (36 samples, 0.36%)</title><rect x="43.9085%" y="421" width="0.3566%" height="15" fill="rgb(212,155,44)" fg:x="4433" fg:w="36"/><text x="44.1585%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (36 samples, 0.36%)</title><rect x="43.9085%" y="405" width="0.3566%" height="15" fill="rgb(226,2,50)" fg:x="4433" fg:w="36"/><text x="44.1585%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (711 samples, 7.04%)</title><rect x="43.8887%" y="469" width="7.0424%" height="15" fill="rgb(234,177,6)" fg:x="4431" fg:w="711"/><text x="44.1387%" y="479.50">alloc::co..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (673 samples, 6.67%)</title><rect x="44.2651%" y="453" width="6.6660%" height="15" fill="rgb(217,24,9)" fg:x="4469" fg:w="673"/><text x="44.5151%" y="463.50">core::mem..</text></g><g><title>checked_request2size (3 samples, 0.03%)</title><rect x="52.4168%" y="309" width="0.0297%" height="15" fill="rgb(220,13,46)" fg:x="5292" fg:w="3"/><text x="52.6668%" y="319.50"></text></g><g><title>_int_malloc (129 samples, 1.28%)</title><rect x="51.4362%" y="325" width="1.2777%" height="15" fill="rgb(239,221,27)" fg:x="5193" fg:w="129"/><text x="51.6862%" y="335.50"></text></g><g><title>tcache_put (27 samples, 0.27%)</title><rect x="52.4465%" y="309" width="0.2674%" height="15" fill="rgb(222,198,25)" fg:x="5295" fg:w="27"/><text x="52.6965%" y="319.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="52.7139%" y="325" width="0.0198%" height="15" fill="rgb(211,99,13)" fg:x="5322" fg:w="2"/><text x="52.9639%" y="335.50"></text></g><g><title>checked_request2size (11 samples, 0.11%)</title><rect x="52.7338%" y="325" width="0.1090%" height="15" fill="rgb(232,111,31)" fg:x="5324" fg:w="11"/><text x="52.9838%" y="335.50"></text></g><g><title>__GI___libc_malloc (214 samples, 2.12%)</title><rect x="51.0202%" y="341" width="2.1197%" height="15" fill="rgb(245,82,37)" fg:x="5151" fg:w="214"/><text x="51.2702%" y="351.50">_..</text></g><g><title>tcache_get (30 samples, 0.30%)</title><rect x="52.8427%" y="325" width="0.2971%" height="15" fill="rgb(227,149,46)" fg:x="5335" fg:w="30"/><text x="53.0927%" y="335.50"></text></g><g><title>tcache_get_n (30 samples, 0.30%)</title><rect x="52.8427%" y="309" width="0.2971%" height="15" fill="rgb(218,36,50)" fg:x="5335" fg:w="30"/><text x="53.0927%" y="319.50"></text></g><g><title>__rdl_alloc (14 samples, 0.14%)</title><rect x="53.1399%" y="341" width="0.1387%" height="15" fill="rgb(226,80,48)" fg:x="5365" fg:w="14"/><text x="53.3899%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (14 samples, 0.14%)</title><rect x="53.1399%" y="325" width="0.1387%" height="15" fill="rgb(238,224,15)" fg:x="5365" fg:w="14"/><text x="53.3899%" y="335.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (239 samples, 2.37%)</title><rect x="50.9311%" y="421" width="2.3673%" height="15" fill="rgb(241,136,10)" fg:x="5142" fg:w="239"/><text x="51.1811%" y="431.50">al..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (239 samples, 2.37%)</title><rect x="50.9311%" y="405" width="2.3673%" height="15" fill="rgb(208,32,45)" fg:x="5142" fg:w="239"/><text x="51.1811%" y="415.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (239 samples, 2.37%)</title><rect x="50.9311%" y="389" width="2.3673%" height="15" fill="rgb(207,135,9)" fg:x="5142" fg:w="239"/><text x="51.1811%" y="399.50">&lt;a..</text></g><g><title>alloc::alloc::Global::alloc_impl (239 samples, 2.37%)</title><rect x="50.9311%" y="373" width="2.3673%" height="15" fill="rgb(206,86,44)" fg:x="5142" fg:w="239"/><text x="51.1811%" y="383.50">al..</text></g><g><title>alloc::alloc::alloc (239 samples, 2.37%)</title><rect x="50.9311%" y="357" width="2.3673%" height="15" fill="rgb(245,177,15)" fg:x="5142" fg:w="239"/><text x="51.1811%" y="367.50">al..</text></g><g><title>__rust_alloc (2 samples, 0.02%)</title><rect x="53.2785%" y="341" width="0.0198%" height="15" fill="rgb(206,64,50)" fg:x="5379" fg:w="2"/><text x="53.5285%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,748 samples, 27.22%)</title><rect x="26.1985%" y="485" width="27.2187%" height="15" fill="rgb(234,36,40)" fg:x="2645" fg:w="2748"/><text x="26.4485%" y="495.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (251 samples, 2.49%)</title><rect x="50.9311%" y="469" width="2.4861%" height="15" fill="rgb(213,64,8)" fg:x="5142" fg:w="251"/><text x="51.1811%" y="479.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (251 samples, 2.49%)</title><rect x="50.9311%" y="453" width="2.4861%" height="15" fill="rgb(210,75,36)" fg:x="5142" fg:w="251"/><text x="51.1811%" y="463.50">al..</text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (251 samples, 2.49%)</title><rect x="50.9311%" y="437" width="2.4861%" height="15" fill="rgb(229,88,21)" fg:x="5142" fg:w="251"/><text x="51.1811%" y="447.50">al..</text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::init (12 samples, 0.12%)</title><rect x="53.2983%" y="421" width="0.1189%" height="15" fill="rgb(252,204,47)" fg:x="5381" fg:w="12"/><text x="53.5483%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (12 samples, 0.12%)</title><rect x="53.2983%" y="405" width="0.1189%" height="15" fill="rgb(208,77,27)" fg:x="5381" fg:w="12"/><text x="53.5483%" y="415.50"></text></g><g><title>core::ptr::write (12 samples, 0.12%)</title><rect x="53.2983%" y="389" width="0.1189%" height="15" fill="rgb(221,76,26)" fg:x="5381" fg:w="12"/><text x="53.5483%" y="399.50"></text></g><g><title>checked_request2size (6 samples, 0.06%)</title><rect x="54.6454%" y="277" width="0.0594%" height="15" fill="rgb(225,139,18)" fg:x="5517" fg:w="6"/><text x="54.8954%" y="287.50"></text></g><g><title>_int_malloc (82 samples, 0.81%)</title><rect x="54.0412%" y="293" width="0.8122%" height="15" fill="rgb(230,137,11)" fg:x="5456" fg:w="82"/><text x="54.2912%" y="303.50"></text></g><g><title>tcache_put (15 samples, 0.15%)</title><rect x="54.7048%" y="277" width="0.1486%" height="15" fill="rgb(212,28,1)" fg:x="5523" fg:w="15"/><text x="54.9548%" y="287.50"></text></g><g><title>checked_request2size (12 samples, 0.12%)</title><rect x="54.8633%" y="293" width="0.1189%" height="15" fill="rgb(248,164,17)" fg:x="5539" fg:w="12"/><text x="55.1133%" y="303.50"></text></g><g><title>__GI___libc_malloc (137 samples, 1.36%)</title><rect x="53.8431%" y="309" width="1.3570%" height="15" fill="rgb(222,171,42)" fg:x="5436" fg:w="137"/><text x="54.0931%" y="319.50"></text></g><g><title>tcache_get (22 samples, 0.22%)</title><rect x="54.9822%" y="293" width="0.2179%" height="15" fill="rgb(243,84,45)" fg:x="5551" fg:w="22"/><text x="55.2322%" y="303.50"></text></g><g><title>tcache_get_n (22 samples, 0.22%)</title><rect x="54.9822%" y="277" width="0.2179%" height="15" fill="rgb(252,49,23)" fg:x="5551" fg:w="22"/><text x="55.2322%" y="287.50"></text></g><g><title>__rdl_alloc (8 samples, 0.08%)</title><rect x="55.2001%" y="309" width="0.0792%" height="15" fill="rgb(215,19,7)" fg:x="5573" fg:w="8"/><text x="55.4501%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.08%)</title><rect x="55.2001%" y="293" width="0.0792%" height="15" fill="rgb(238,81,41)" fg:x="5573" fg:w="8"/><text x="55.4501%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (183 samples, 1.81%)</title><rect x="53.5757%" y="405" width="1.8126%" height="15" fill="rgb(210,199,37)" fg:x="5409" fg:w="183"/><text x="53.8257%" y="415.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (183 samples, 1.81%)</title><rect x="53.5757%" y="389" width="1.8126%" height="15" fill="rgb(244,192,49)" fg:x="5409" fg:w="183"/><text x="53.8257%" y="399.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (183 samples, 1.81%)</title><rect x="53.5757%" y="373" width="1.8126%" height="15" fill="rgb(226,211,11)" fg:x="5409" fg:w="183"/><text x="53.8257%" y="383.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (165 samples, 1.63%)</title><rect x="53.7540%" y="357" width="1.6343%" height="15" fill="rgb(236,162,54)" fg:x="5427" fg:w="165"/><text x="54.0040%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (165 samples, 1.63%)</title><rect x="53.7540%" y="341" width="1.6343%" height="15" fill="rgb(220,229,9)" fg:x="5427" fg:w="165"/><text x="54.0040%" y="351.50"></text></g><g><title>alloc::alloc::alloc (165 samples, 1.63%)</title><rect x="53.7540%" y="325" width="1.6343%" height="15" fill="rgb(250,87,22)" fg:x="5427" fg:w="165"/><text x="54.0040%" y="335.50"></text></g><g><title>__rust_alloc (11 samples, 0.11%)</title><rect x="55.2793%" y="309" width="0.1090%" height="15" fill="rgb(239,43,17)" fg:x="5581" fg:w="11"/><text x="55.5293%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (218 samples, 2.16%)</title><rect x="53.4172%" y="485" width="2.1593%" height="15" fill="rgb(231,177,25)" fg:x="5393" fg:w="218"/><text x="53.6672%" y="495.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (202 samples, 2.00%)</title><rect x="53.5757%" y="469" width="2.0008%" height="15" fill="rgb(219,179,1)" fg:x="5409" fg:w="202"/><text x="53.8257%" y="479.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (202 samples, 2.00%)</title><rect x="53.5757%" y="453" width="2.0008%" height="15" fill="rgb(238,219,53)" fg:x="5409" fg:w="202"/><text x="53.8257%" y="463.50">a..</text></g><g><title>alloc::slice::hack::to_vec (202 samples, 2.00%)</title><rect x="53.5757%" y="437" width="2.0008%" height="15" fill="rgb(232,167,36)" fg:x="5409" fg:w="202"/><text x="53.8257%" y="447.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (202 samples, 2.00%)</title><rect x="53.5757%" y="421" width="2.0008%" height="15" fill="rgb(244,19,51)" fg:x="5409" fg:w="202"/><text x="53.8257%" y="431.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (19 samples, 0.19%)</title><rect x="55.3883%" y="405" width="0.1882%" height="15" fill="rgb(224,6,22)" fg:x="5592" fg:w="19"/><text x="55.6383%" y="415.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (19 samples, 0.19%)</title><rect x="55.3883%" y="389" width="0.1882%" height="15" fill="rgb(224,145,5)" fg:x="5592" fg:w="19"/><text x="55.6383%" y="399.50"></text></g><g><title>__memcpy_avx_unaligned_erms (19 samples, 0.19%)</title><rect x="55.3883%" y="373" width="0.1882%" height="15" fill="rgb(234,130,49)" fg:x="5592" fg:w="19"/><text x="55.6383%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (22 samples, 0.22%)</title><rect x="55.5765%" y="485" width="0.2179%" height="15" fill="rgb(254,6,2)" fg:x="5611" fg:w="22"/><text x="55.8265%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (10 samples, 0.10%)</title><rect x="55.6953%" y="469" width="0.0990%" height="15" fill="rgb(208,96,46)" fg:x="5623" fg:w="10"/><text x="55.9453%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (3 samples, 0.03%)</title><rect x="55.8043%" y="485" width="0.0297%" height="15" fill="rgb(239,3,39)" fg:x="5634" fg:w="3"/><text x="56.0543%" y="495.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (7 samples, 0.07%)</title><rect x="55.9231%" y="469" width="0.0693%" height="15" fill="rgb(233,210,1)" fg:x="5646" fg:w="7"/><text x="56.1731%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::set_parent_link (7 samples, 0.07%)</title><rect x="55.9231%" y="453" width="0.0693%" height="15" fill="rgb(244,137,37)" fg:x="5646" fg:w="7"/><text x="56.1731%" y="463.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (7 samples, 0.07%)</title><rect x="55.9231%" y="437" width="0.0693%" height="15" fill="rgb(240,136,2)" fg:x="5646" fg:w="7"/><text x="56.1731%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (29 samples, 0.29%)</title><rect x="55.8340%" y="485" width="0.2872%" height="15" fill="rgb(239,18,37)" fg:x="5637" fg:w="29"/><text x="56.0840%" y="495.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (13 samples, 0.13%)</title><rect x="55.9925%" y="469" width="0.1288%" height="15" fill="rgb(218,185,22)" fg:x="5653" fg:w="13"/><text x="56.2425%" y="479.50"></text></g><g><title>_int_malloc (15 samples, 0.15%)</title><rect x="56.2005%" y="277" width="0.1486%" height="15" fill="rgb(225,218,4)" fg:x="5674" fg:w="15"/><text x="56.4505%" y="287.50"></text></g><g><title>tcache_put (6 samples, 0.06%)</title><rect x="56.2896%" y="261" width="0.0594%" height="15" fill="rgb(230,182,32)" fg:x="5683" fg:w="6"/><text x="56.5396%" y="271.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.26%)</title><rect x="56.1212%" y="293" width="0.2575%" height="15" fill="rgb(242,56,43)" fg:x="5666" fg:w="26"/><text x="56.3712%" y="303.50"></text></g><g><title>tcache_get (3 samples, 0.03%)</title><rect x="56.3490%" y="277" width="0.0297%" height="15" fill="rgb(233,99,24)" fg:x="5689" fg:w="3"/><text x="56.5990%" y="287.50"></text></g><g><title>tcache_get_n (3 samples, 0.03%)</title><rect x="56.3490%" y="261" width="0.0297%" height="15" fill="rgb(234,209,42)" fg:x="5689" fg:w="3"/><text x="56.5990%" y="271.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="56.3788%" y="293" width="0.0198%" height="15" fill="rgb(227,7,12)" fg:x="5692" fg:w="2"/><text x="56.6288%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="56.3788%" y="277" width="0.0198%" height="15" fill="rgb(245,203,43)" fg:x="5692" fg:w="2"/><text x="56.6288%" y="287.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (29 samples, 0.29%)</title><rect x="56.1212%" y="389" width="0.2872%" height="15" fill="rgb(238,205,33)" fg:x="5666" fg:w="29"/><text x="56.3712%" y="399.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (29 samples, 0.29%)</title><rect x="56.1212%" y="373" width="0.2872%" height="15" fill="rgb(231,56,7)" fg:x="5666" fg:w="29"/><text x="56.3712%" y="383.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (29 samples, 0.29%)</title><rect x="56.1212%" y="357" width="0.2872%" height="15" fill="rgb(244,186,29)" fg:x="5666" fg:w="29"/><text x="56.3712%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (29 samples, 0.29%)</title><rect x="56.1212%" y="341" width="0.2872%" height="15" fill="rgb(234,111,31)" fg:x="5666" fg:w="29"/><text x="56.3712%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (29 samples, 0.29%)</title><rect x="56.1212%" y="325" width="0.2872%" height="15" fill="rgb(241,149,10)" fg:x="5666" fg:w="29"/><text x="56.3712%" y="335.50"></text></g><g><title>alloc::alloc::alloc (29 samples, 0.29%)</title><rect x="56.1212%" y="309" width="0.2872%" height="15" fill="rgb(249,206,44)" fg:x="5666" fg:w="29"/><text x="56.3712%" y="319.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (30 samples, 0.30%)</title><rect x="56.1212%" y="485" width="0.2971%" height="15" fill="rgb(251,153,30)" fg:x="5666" fg:w="30"/><text x="56.3712%" y="495.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (30 samples, 0.30%)</title><rect x="56.1212%" y="469" width="0.2971%" height="15" fill="rgb(239,152,38)" fg:x="5666" fg:w="30"/><text x="56.3712%" y="479.50"></text></g><g><title>alloc::collections::btree::mem::replace (30 samples, 0.30%)</title><rect x="56.1212%" y="453" width="0.2971%" height="15" fill="rgb(249,139,47)" fg:x="5666" fg:w="30"/><text x="56.3712%" y="463.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (30 samples, 0.30%)</title><rect x="56.1212%" y="437" width="0.2971%" height="15" fill="rgb(244,64,35)" fg:x="5666" fg:w="30"/><text x="56.3712%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (30 samples, 0.30%)</title><rect x="56.1212%" y="421" width="0.2971%" height="15" fill="rgb(216,46,15)" fg:x="5666" fg:w="30"/><text x="56.3712%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (30 samples, 0.30%)</title><rect x="56.1212%" y="405" width="0.2971%" height="15" fill="rgb(250,74,19)" fg:x="5666" fg:w="30"/><text x="56.3712%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3,108 samples, 30.78%)</title><rect x="25.7132%" y="501" width="30.7845%" height="15" fill="rgb(249,42,33)" fg:x="2596" fg:w="3108"/><text x="25.9632%" y="511.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; a..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (7 samples, 0.07%)</title><rect x="56.4283%" y="485" width="0.0693%" height="15" fill="rgb(242,149,17)" fg:x="5697" fg:w="7"/><text x="56.6783%" y="495.50"></text></g><g><title>_int_malloc (17 samples, 0.17%)</title><rect x="56.5471%" y="309" width="0.1684%" height="15" fill="rgb(244,29,21)" fg:x="5709" fg:w="17"/><text x="56.7971%" y="319.50"></text></g><g><title>tcache_put (3 samples, 0.03%)</title><rect x="56.6858%" y="293" width="0.0297%" height="15" fill="rgb(220,130,37)" fg:x="5723" fg:w="3"/><text x="56.9358%" y="303.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="56.7155%" y="309" width="0.0198%" height="15" fill="rgb(211,67,2)" fg:x="5726" fg:w="2"/><text x="56.9655%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (22 samples, 0.22%)</title><rect x="56.5372%" y="421" width="0.2179%" height="15" fill="rgb(235,68,52)" fg:x="5708" fg:w="22"/><text x="56.7872%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (22 samples, 0.22%)</title><rect x="56.5372%" y="405" width="0.2179%" height="15" fill="rgb(246,142,3)" fg:x="5708" fg:w="22"/><text x="56.7872%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (22 samples, 0.22%)</title><rect x="56.5372%" y="389" width="0.2179%" height="15" fill="rgb(241,25,7)" fg:x="5708" fg:w="22"/><text x="56.7872%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (22 samples, 0.22%)</title><rect x="56.5372%" y="373" width="0.2179%" height="15" fill="rgb(242,119,39)" fg:x="5708" fg:w="22"/><text x="56.7872%" y="383.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (22 samples, 0.22%)</title><rect x="56.5372%" y="357" width="0.2179%" height="15" fill="rgb(241,98,45)" fg:x="5708" fg:w="22"/><text x="56.7872%" y="367.50"></text></g><g><title>alloc::alloc::alloc (22 samples, 0.22%)</title><rect x="56.5372%" y="341" width="0.2179%" height="15" fill="rgb(254,28,30)" fg:x="5708" fg:w="22"/><text x="56.7872%" y="351.50"></text></g><g><title>__GI___libc_malloc (21 samples, 0.21%)</title><rect x="56.5471%" y="325" width="0.2080%" height="15" fill="rgb(241,142,54)" fg:x="5709" fg:w="21"/><text x="56.7971%" y="335.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="56.7353%" y="309" width="0.0198%" height="15" fill="rgb(222,85,15)" fg:x="5728" fg:w="2"/><text x="56.9853%" y="319.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="56.7353%" y="293" width="0.0198%" height="15" fill="rgb(210,85,47)" fg:x="5728" fg:w="2"/><text x="56.9853%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (31 samples, 0.31%)</title><rect x="56.4976%" y="501" width="0.3071%" height="15" fill="rgb(224,206,25)" fg:x="5704" fg:w="31"/><text x="56.7476%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (27 samples, 0.27%)</title><rect x="56.5372%" y="485" width="0.2674%" height="15" fill="rgb(243,201,19)" fg:x="5708" fg:w="27"/><text x="56.7872%" y="495.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (27 samples, 0.27%)</title><rect x="56.5372%" y="469" width="0.2674%" height="15" fill="rgb(236,59,4)" fg:x="5708" fg:w="27"/><text x="56.7872%" y="479.50"></text></g><g><title>alloc::slice::hack::to_vec (27 samples, 0.27%)</title><rect x="56.5372%" y="453" width="0.2674%" height="15" fill="rgb(254,179,45)" fg:x="5708" fg:w="27"/><text x="56.7872%" y="463.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (27 samples, 0.27%)</title><rect x="56.5372%" y="437" width="0.2674%" height="15" fill="rgb(226,14,10)" fg:x="5708" fg:w="27"/><text x="56.7872%" y="447.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.05%)</title><rect x="56.7552%" y="421" width="0.0495%" height="15" fill="rgb(244,27,41)" fg:x="5730" fg:w="5"/><text x="57.0052%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.05%)</title><rect x="56.7552%" y="405" width="0.0495%" height="15" fill="rgb(235,35,32)" fg:x="5730" fg:w="5"/><text x="57.0052%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (5 samples, 0.05%)</title><rect x="56.7552%" y="389" width="0.0495%" height="15" fill="rgb(218,68,31)" fg:x="5730" fg:w="5"/><text x="57.0052%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (5 samples, 0.05%)</title><rect x="56.8047%" y="501" width="0.0495%" height="15" fill="rgb(207,120,37)" fg:x="5735" fg:w="5"/><text x="57.0547%" y="511.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (5 samples, 0.05%)</title><rect x="56.8542%" y="501" width="0.0495%" height="15" fill="rgb(227,98,0)" fg:x="5740" fg:w="5"/><text x="57.1042%" y="511.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (3 samples, 0.03%)</title><rect x="56.8740%" y="485" width="0.0297%" height="15" fill="rgb(207,7,3)" fg:x="5742" fg:w="3"/><text x="57.1240%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3,157 samples, 31.27%)</title><rect x="25.6438%" y="517" width="31.2698%" height="15" fill="rgb(206,98,19)" fg:x="2589" fg:w="3157"/><text x="25.8938%" y="527.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; a..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 0.06%)</title><rect x="56.9136%" y="517" width="0.0594%" height="15" fill="rgb(217,5,26)" fg:x="5746" fg:w="6"/><text x="57.1636%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="56.9334%" y="501" width="0.0396%" height="15" fill="rgb(235,190,38)" fg:x="5748" fg:w="4"/><text x="57.1834%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.04%)</title><rect x="56.9334%" y="485" width="0.0396%" height="15" fill="rgb(247,86,24)" fg:x="5748" fg:w="4"/><text x="57.1834%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.04%)</title><rect x="56.9334%" y="469" width="0.0396%" height="15" fill="rgb(205,101,16)" fg:x="5748" fg:w="4"/><text x="57.1834%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.04%)</title><rect x="56.9334%" y="453" width="0.0396%" height="15" fill="rgb(246,168,33)" fg:x="5748" fg:w="4"/><text x="57.1834%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="56.9334%" y="437" width="0.0396%" height="15" fill="rgb(231,114,1)" fg:x="5748" fg:w="4"/><text x="57.1834%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="56.9334%" y="421" width="0.0396%" height="15" fill="rgb(207,184,53)" fg:x="5748" fg:w="4"/><text x="57.1834%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="56.9334%" y="405" width="0.0396%" height="15" fill="rgb(224,95,51)" fg:x="5748" fg:w="4"/><text x="57.1834%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.03%)</title><rect x="56.9433%" y="389" width="0.0297%" height="15" fill="rgb(212,188,45)" fg:x="5749" fg:w="3"/><text x="57.1933%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.03%)</title><rect x="56.9433%" y="373" width="0.0297%" height="15" fill="rgb(223,154,38)" fg:x="5749" fg:w="3"/><text x="57.1933%" y="383.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.03%)</title><rect x="56.9433%" y="357" width="0.0297%" height="15" fill="rgb(251,22,52)" fg:x="5749" fg:w="3"/><text x="57.1933%" y="367.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="56.9433%" y="341" width="0.0297%" height="15" fill="rgb(229,209,22)" fg:x="5749" fg:w="3"/><text x="57.1933%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (3,166 samples, 31.36%)</title><rect x="25.6339%" y="549" width="31.3590%" height="15" fill="rgb(234,138,34)" fg:x="2588" fg:w="3166"/><text x="25.8839%" y="559.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (3,166 samples, 31.36%)</title><rect x="25.6339%" y="533" width="31.3590%" height="15" fill="rgb(212,95,11)" fg:x="2588" fg:w="3166"/><text x="25.8839%" y="543.50">&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (2 samples, 0.02%)</title><rect x="56.9731%" y="517" width="0.0198%" height="15" fill="rgb(240,179,47)" fg:x="5752" fg:w="2"/><text x="57.2231%" y="527.50"></text></g><g><title>core::option::Option&lt;&amp;mut T&gt;::cloned (3,173 samples, 31.43%)</title><rect x="25.6042%" y="581" width="31.4283%" height="15" fill="rgb(240,163,11)" fg:x="2585" fg:w="3173"/><text x="25.8542%" y="591.50">core::option::Option&lt;&amp;mut T&gt;::cloned</text></g><g><title>&lt;machine::Context as core::clone::Clone&gt;::clone (3,172 samples, 31.42%)</title><rect x="25.6141%" y="565" width="31.4184%" height="15" fill="rgb(236,37,12)" fg:x="2586" fg:w="3172"/><text x="25.8641%" y="575.50">&lt;machine::Context as core::clone::Clone&gt;::clone</text></g><g><title>&lt;evalexpr::context::HashMapContext as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="57.0127%" y="549" width="0.0198%" height="15" fill="rgb(232,164,16)" fg:x="5756" fg:w="2"/><text x="57.2627%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="57.0127%" y="533" width="0.0198%" height="15" fill="rgb(244,205,15)" fg:x="5756" fg:w="2"/><text x="57.2627%" y="543.50"></text></g><g><title>&lt;hashbrown::map::HashMap&lt;K,V,S,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="57.0127%" y="517" width="0.0198%" height="15" fill="rgb(223,117,47)" fg:x="5756" fg:w="2"/><text x="57.2627%" y="527.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (6 samples, 0.06%)</title><rect x="58.7262%" y="469" width="0.0594%" height="15" fill="rgb(244,107,35)" fg:x="5929" fg:w="6"/><text x="58.9762%" y="479.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (6 samples, 0.06%)</title><rect x="58.7262%" y="453" width="0.0594%" height="15" fill="rgb(205,140,8)" fg:x="5929" fg:w="6"/><text x="58.9762%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (6 samples, 0.06%)</title><rect x="58.7262%" y="437" width="0.0594%" height="15" fill="rgb(228,84,46)" fg:x="5929" fg:w="6"/><text x="58.9762%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.05%)</title><rect x="58.7361%" y="421" width="0.0495%" height="15" fill="rgb(254,188,9)" fg:x="5930" fg:w="5"/><text x="58.9861%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.05%)</title><rect x="58.7361%" y="405" width="0.0495%" height="15" fill="rgb(206,112,54)" fg:x="5930" fg:w="5"/><text x="58.9861%" y="415.50"></text></g><g><title>__GI___libc_free (5 samples, 0.05%)</title><rect x="58.7361%" y="389" width="0.0495%" height="15" fill="rgb(216,84,49)" fg:x="5930" fg:w="5"/><text x="58.9861%" y="399.50"></text></g><g><title>_int_free_maybe_consolidate (3 samples, 0.03%)</title><rect x="58.7559%" y="373" width="0.0297%" height="15" fill="rgb(214,194,35)" fg:x="5932" fg:w="3"/><text x="59.0059%" y="383.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="58.7658%" y="357" width="0.0198%" height="15" fill="rgb(249,28,3)" fg:x="5933" fg:w="2"/><text x="59.0158%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="421" width="0.0495%" height="15" fill="rgb(222,56,52)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="405" width="0.0495%" height="15" fill="rgb(245,217,50)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="389" width="0.0495%" height="15" fill="rgb(213,201,24)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="373" width="0.0495%" height="15" fill="rgb(248,116,28)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="383.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="357" width="0.0495%" height="15" fill="rgb(219,72,43)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="367.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="341" width="0.0495%" height="15" fill="rgb(209,138,14)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="325" width="0.0495%" height="15" fill="rgb(222,18,33)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="309" width="0.0495%" height="15" fill="rgb(213,199,7)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="59.7266%" y="293" width="0.0495%" height="15" fill="rgb(250,110,10)" fg:x="6030" fg:w="5"/><text x="59.9766%" y="303.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="59.7365%" y="277" width="0.0396%" height="15" fill="rgb(248,123,6)" fg:x="6031" fg:w="4"/><text x="59.9865%" y="287.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="59.7365%" y="261" width="0.0396%" height="15" fill="rgb(206,91,31)" fg:x="6031" fg:w="4"/><text x="59.9865%" y="271.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (19 samples, 0.19%)</title><rect x="60.9053%" y="373" width="0.1882%" height="15" fill="rgb(211,154,13)" fg:x="6149" fg:w="19"/><text x="61.1553%" y="383.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (10 samples, 0.10%)</title><rect x="60.9945%" y="357" width="0.0990%" height="15" fill="rgb(225,148,7)" fg:x="6158" fg:w="10"/><text x="61.2445%" y="367.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (10 samples, 0.10%)</title><rect x="60.9945%" y="341" width="0.0990%" height="15" fill="rgb(220,160,43)" fg:x="6158" fg:w="10"/><text x="61.2445%" y="351.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (10 samples, 0.10%)</title><rect x="60.9945%" y="325" width="0.0990%" height="15" fill="rgb(213,52,39)" fg:x="6158" fg:w="10"/><text x="61.2445%" y="335.50"></text></g><g><title>core::ptr::read (10 samples, 0.10%)</title><rect x="60.9945%" y="309" width="0.0990%" height="15" fill="rgb(243,137,7)" fg:x="6158" fg:w="10"/><text x="61.2445%" y="319.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (120 samples, 1.19%)</title><rect x="59.9148%" y="389" width="1.1886%" height="15" fill="rgb(230,79,13)" fg:x="6049" fg:w="120"/><text x="60.1648%" y="399.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (90 samples, 0.89%)</title><rect x="61.1034%" y="389" width="0.8914%" height="15" fill="rgb(247,105,23)" fg:x="6169" fg:w="90"/><text x="61.3534%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (47 samples, 0.47%)</title><rect x="61.5293%" y="373" width="0.4655%" height="15" fill="rgb(223,179,41)" fg:x="6212" fg:w="47"/><text x="61.7793%" y="383.50"></text></g><g><title>_int_free (80 samples, 0.79%)</title><rect x="62.4802%" y="325" width="0.7924%" height="15" fill="rgb(218,9,34)" fg:x="6308" fg:w="80"/><text x="62.7302%" y="335.50"></text></g><g><title>tcache_put (6 samples, 0.06%)</title><rect x="63.2132%" y="309" width="0.0594%" height="15" fill="rgb(222,106,8)" fg:x="6382" fg:w="6"/><text x="63.4632%" y="319.50"></text></g><g><title>_int_free_maybe_consolidate (7 samples, 0.07%)</title><rect x="63.2726%" y="325" width="0.0693%" height="15" fill="rgb(211,220,0)" fg:x="6388" fg:w="7"/><text x="63.5226%" y="335.50"></text></g><g><title>_int_free_create_chunk (44 samples, 0.44%)</title><rect x="63.9164%" y="309" width="0.4358%" height="15" fill="rgb(229,52,16)" fg:x="6453" fg:w="44"/><text x="64.1664%" y="319.50"></text></g><g><title>_int_free_merge_chunk (109 samples, 1.08%)</title><rect x="63.3419%" y="325" width="1.0796%" height="15" fill="rgb(212,155,18)" fg:x="6395" fg:w="109"/><text x="63.5919%" y="335.50"></text></g><g><title>free_perturb (7 samples, 0.07%)</title><rect x="64.3522%" y="309" width="0.0693%" height="15" fill="rgb(242,21,14)" fg:x="6497" fg:w="7"/><text x="64.6022%" y="319.50"></text></g><g><title>__GI___libc_free (238 samples, 2.36%)</title><rect x="62.1236%" y="341" width="2.3574%" height="15" fill="rgb(222,19,48)" fg:x="6272" fg:w="238"/><text x="62.3736%" y="351.50">_..</text></g><g><title>arena_for_chunk (6 samples, 0.06%)</title><rect x="64.4216%" y="325" width="0.0594%" height="15" fill="rgb(232,45,27)" fg:x="6504" fg:w="6"/><text x="64.6716%" y="335.50"></text></g><g><title>__rdl_dealloc (16 samples, 0.16%)</title><rect x="64.4810%" y="341" width="0.1585%" height="15" fill="rgb(249,103,42)" fg:x="6510" fg:w="16"/><text x="64.7310%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (16 samples, 0.16%)</title><rect x="64.4810%" y="325" width="0.1585%" height="15" fill="rgb(246,81,33)" fg:x="6510" fg:w="16"/><text x="64.7310%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (259 samples, 2.57%)</title><rect x="62.1236%" y="373" width="2.5654%" height="15" fill="rgb(252,33,42)" fg:x="6272" fg:w="259"/><text x="62.3736%" y="383.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (259 samples, 2.57%)</title><rect x="62.1236%" y="357" width="2.5654%" height="15" fill="rgb(209,212,41)" fg:x="6272" fg:w="259"/><text x="62.3736%" y="367.50">al..</text></g><g><title>__rust_dealloc (5 samples, 0.05%)</title><rect x="64.6395%" y="341" width="0.0495%" height="15" fill="rgb(207,154,6)" fg:x="6526" fg:w="5"/><text x="64.8895%" y="351.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="64.7088%" y="357" width="0.0198%" height="15" fill="rgb(223,64,47)" fg:x="6533" fg:w="2"/><text x="64.9588%" y="367.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (604 samples, 5.98%)</title><rect x="58.7857%" y="453" width="5.9826%" height="15" fill="rgb(211,161,38)" fg:x="5935" fg:w="604"/><text x="59.0357%" y="463.50">alloc::c..</text></g><g><title>alloc::collections::btree::mem::replace (604 samples, 5.98%)</title><rect x="58.7857%" y="437" width="5.9826%" height="15" fill="rgb(219,138,40)" fg:x="5935" fg:w="604"/><text x="59.0357%" y="447.50">alloc::c..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (504 samples, 4.99%)</title><rect x="59.7761%" y="421" width="4.9921%" height="15" fill="rgb(241,228,46)" fg:x="6035" fg:w="504"/><text x="60.0261%" y="431.50">alloc:..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (504 samples, 4.99%)</title><rect x="59.7761%" y="405" width="4.9921%" height="15" fill="rgb(223,209,38)" fg:x="6035" fg:w="504"/><text x="60.0261%" y="415.50">alloc:..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (280 samples, 2.77%)</title><rect x="61.9948%" y="389" width="2.7734%" height="15" fill="rgb(236,164,45)" fg:x="6259" fg:w="280"/><text x="62.2448%" y="399.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (7 samples, 0.07%)</title><rect x="64.6989%" y="373" width="0.0693%" height="15" fill="rgb(231,15,5)" fg:x="6532" fg:w="7"/><text x="64.9489%" y="383.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.04%)</title><rect x="64.7286%" y="357" width="0.0396%" height="15" fill="rgb(252,35,15)" fg:x="6535" fg:w="4"/><text x="64.9786%" y="367.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (819 samples, 8.11%)</title><rect x="57.7258%" y="485" width="8.1121%" height="15" fill="rgb(248,181,18)" fg:x="5828" fg:w="819"/><text x="57.9758%" y="495.50">alloc::coll..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (712 samples, 7.05%)</title><rect x="58.7857%" y="469" width="7.0523%" height="15" fill="rgb(233,39,42)" fg:x="5935" fg:w="712"/><text x="59.0357%" y="479.50">alloc::co..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (108 samples, 1.07%)</title><rect x="64.7682%" y="453" width="1.0697%" height="15" fill="rgb(238,110,33)" fg:x="6539" fg:w="108"/><text x="65.0182%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.02%)</title><rect x="65.8181%" y="437" width="0.0198%" height="15" fill="rgb(233,195,10)" fg:x="6645" fg:w="2"/><text x="66.0681%" y="447.50"></text></g><g><title>[graphwalker] (25 samples, 0.25%)</title><rect x="68.7302%" y="341" width="0.2476%" height="15" fill="rgb(254,105,3)" fg:x="6939" fg:w="25"/><text x="68.9802%" y="351.50"></text></g><g><title>_int_free (25 samples, 0.25%)</title><rect x="68.7302%" y="325" width="0.2476%" height="15" fill="rgb(221,225,9)" fg:x="6939" fg:w="25"/><text x="68.9802%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="75.7726%" y="325" width="0.0594%" height="15" fill="rgb(224,227,45)" fg:x="7650" fg:w="6"/><text x="76.0226%" y="335.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="75.7726%" y="309" width="0.0594%" height="15" fill="rgb(229,198,43)" fg:x="7650" fg:w="6"/><text x="76.0226%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="75.7726%" y="293" width="0.0594%" height="15" fill="rgb(206,209,35)" fg:x="7650" fg:w="6"/><text x="76.0226%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="75.7726%" y="277" width="0.0594%" height="15" fill="rgb(245,195,53)" fg:x="7650" fg:w="6"/><text x="76.0226%" y="287.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="75.7726%" y="261" width="0.0594%" height="15" fill="rgb(240,92,26)" fg:x="7650" fg:w="6"/><text x="76.0226%" y="271.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="75.7726%" y="245" width="0.0594%" height="15" fill="rgb(207,40,23)" fg:x="7650" fg:w="6"/><text x="76.0226%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="75.7825%" y="229" width="0.0495%" height="15" fill="rgb(223,111,35)" fg:x="7651" fg:w="5"/><text x="76.0325%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="75.7825%" y="213" width="0.0495%" height="15" fill="rgb(229,147,28)" fg:x="7651" fg:w="5"/><text x="76.0325%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="75.7825%" y="197" width="0.0495%" height="15" fill="rgb(211,29,28)" fg:x="7651" fg:w="5"/><text x="76.0325%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="75.7825%" y="181" width="0.0495%" height="15" fill="rgb(228,72,33)" fg:x="7651" fg:w="5"/><text x="76.0325%" y="191.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="75.7825%" y="165" width="0.0495%" height="15" fill="rgb(205,214,31)" fg:x="7651" fg:w="5"/><text x="76.0325%" y="175.50"></text></g><g><title>_int_free (744 samples, 7.37%)</title><rect x="68.9877%" y="341" width="7.3693%" height="15" fill="rgb(224,111,15)" fg:x="6965" fg:w="744"/><text x="69.2377%" y="351.50">_int_free</text></g><g><title>free_perturb (53 samples, 0.52%)</title><rect x="75.8320%" y="325" width="0.5250%" height="15" fill="rgb(253,21,26)" fg:x="7656" fg:w="53"/><text x="76.0820%" y="335.50"></text></g><g><title>__GI___libc_free (1,081 samples, 10.71%)</title><rect x="66.4719%" y="357" width="10.7072%" height="15" fill="rgb(245,139,43)" fg:x="6711" fg:w="1081"/><text x="66.7219%" y="367.50">__GI___libc_free</text></g><g><title>arena_for_chunk (83 samples, 0.82%)</title><rect x="76.3570%" y="341" width="0.8221%" height="15" fill="rgb(252,170,7)" fg:x="7709" fg:w="83"/><text x="76.6070%" y="351.50"></text></g><g><title>__rdl_dealloc (67 samples, 0.66%)</title><rect x="77.1791%" y="357" width="0.6636%" height="15" fill="rgb(231,118,14)" fg:x="7792" fg:w="67"/><text x="77.4291%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (67 samples, 0.66%)</title><rect x="77.1791%" y="341" width="0.6636%" height="15" fill="rgb(238,83,0)" fg:x="7792" fg:w="67"/><text x="77.4291%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1,249 samples, 12.37%)</title><rect x="65.9073%" y="389" width="12.3712%" height="15" fill="rgb(221,39,39)" fg:x="6654" fg:w="1249"/><text x="66.1573%" y="399.50">&lt;alloc::alloc::Glo..</text></g><g><title>alloc::alloc::dealloc (1,249 samples, 12.37%)</title><rect x="65.9073%" y="373" width="12.3712%" height="15" fill="rgb(222,119,46)" fg:x="6654" fg:w="1249"/><text x="66.1573%" y="383.50">alloc::alloc::deal..</text></g><g><title>__rust_dealloc (44 samples, 0.44%)</title><rect x="77.8427%" y="357" width="0.4358%" height="15" fill="rgb(222,165,49)" fg:x="7859" fg:w="44"/><text x="78.0927%" y="367.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (1,301 samples, 12.89%)</title><rect x="65.8380%" y="469" width="12.8863%" height="15" fill="rgb(219,113,52)" fg:x="6647" fg:w="1301"/><text x="66.0880%" y="479.50">core::mem::maybe_un..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1,301 samples, 12.89%)</title><rect x="65.8380%" y="453" width="12.8863%" height="15" fill="rgb(214,7,15)" fg:x="6647" fg:w="1301"/><text x="66.0880%" y="463.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1,301 samples, 12.89%)</title><rect x="65.8380%" y="437" width="12.8863%" height="15" fill="rgb(235,32,4)" fg:x="6647" fg:w="1301"/><text x="66.0880%" y="447.50">core::ptr::drop_in_..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1,301 samples, 12.89%)</title><rect x="65.8380%" y="421" width="12.8863%" height="15" fill="rgb(238,90,54)" fg:x="6647" fg:w="1301"/><text x="66.0880%" y="431.50">core::ptr::drop_in_..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1,301 samples, 12.89%)</title><rect x="65.8380%" y="405" width="12.8863%" height="15" fill="rgb(213,208,19)" fg:x="6647" fg:w="1301"/><text x="66.0880%" y="415.50">&lt;alloc::raw_vec::Ra..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (45 samples, 0.45%)</title><rect x="78.2785%" y="389" width="0.4457%" height="15" fill="rgb(233,156,4)" fg:x="7903" fg:w="45"/><text x="78.5285%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,u32&gt;&gt; (2,191 samples, 21.70%)</title><rect x="57.0325%" y="565" width="21.7017%" height="15" fill="rgb(207,194,5)" fg:x="5758" fg:w="2191"/><text x="57.2825%" y="575.50">core::ptr::drop_in_place&lt;alloc::co..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,191 samples, 21.70%)</title><rect x="57.0325%" y="549" width="21.7017%" height="15" fill="rgb(206,111,30)" fg:x="5758" fg:w="2191"/><text x="57.2825%" y="559.50">&lt;alloc::collections::btree::map::B..</text></g><g><title>core::mem::drop (2,190 samples, 21.69%)</title><rect x="57.0424%" y="533" width="21.6918%" height="15" fill="rgb(243,70,54)" fg:x="5759" fg:w="2190"/><text x="57.2924%" y="543.50">core::mem::drop</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,u32&gt;&gt; (2,190 samples, 21.69%)</title><rect x="57.0424%" y="517" width="21.6918%" height="15" fill="rgb(242,28,8)" fg:x="5759" fg:w="2190"/><text x="57.2924%" y="527.50">core::ptr::drop_in_place&lt;alloc::co..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (2,190 samples, 21.69%)</title><rect x="57.0424%" y="501" width="21.6918%" height="15" fill="rgb(219,106,18)" fg:x="5759" fg:w="2190"/><text x="57.2924%" y="511.50">&lt;alloc::collections::btree::map::I..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (1,302 samples, 12.90%)</title><rect x="65.8380%" y="485" width="12.8962%" height="15" fill="rgb(244,222,10)" fg:x="6647" fg:w="1302"/><text x="66.0880%" y="495.50">alloc::collections:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="78.7342%" y="565" width="0.0198%" height="15" fill="rgb(236,179,52)" fg:x="7949" fg:w="2"/><text x="78.9842%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="78.7342%" y="549" width="0.0198%" height="15" fill="rgb(213,23,39)" fg:x="7949" fg:w="2"/><text x="78.9842%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="78.7342%" y="533" width="0.0198%" height="15" fill="rgb(238,48,10)" fg:x="7949" fg:w="2"/><text x="78.9842%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="78.7342%" y="517" width="0.0198%" height="15" fill="rgb(251,196,23)" fg:x="7949" fg:w="2"/><text x="78.9842%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="78.7342%" y="501" width="0.0198%" height="15" fill="rgb(250,152,24)" fg:x="7949" fg:w="2"/><text x="78.9842%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="78.7342%" y="485" width="0.0198%" height="15" fill="rgb(209,150,17)" fg:x="7949" fg:w="2"/><text x="78.9842%" y="495.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="78.7342%" y="469" width="0.0198%" height="15" fill="rgb(234,202,34)" fg:x="7949" fg:w="2"/><text x="78.9842%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Context&gt; (2,194 samples, 21.73%)</title><rect x="57.0325%" y="581" width="21.7314%" height="15" fill="rgb(253,148,53)" fg:x="5758" fg:w="2194"/><text x="57.2825%" y="591.50">core::ptr::drop_in_place&lt;machine::..</text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="78.7738%" y="453" width="0.0198%" height="15" fill="rgb(218,129,16)" fg:x="7953" fg:w="2"/><text x="79.0238%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Position&gt; (5 samples, 0.05%)</title><rect x="78.7639%" y="581" width="0.0495%" height="15" fill="rgb(216,85,19)" fg:x="7952" fg:w="5"/><text x="79.0139%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.05%)</title><rect x="78.7639%" y="565" width="0.0495%" height="15" fill="rgb(235,228,7)" fg:x="7952" fg:w="5"/><text x="79.0139%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.05%)</title><rect x="78.7639%" y="549" width="0.0495%" height="15" fill="rgb(245,175,0)" fg:x="7952" fg:w="5"/><text x="79.0139%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.05%)</title><rect x="78.7639%" y="533" width="0.0495%" height="15" fill="rgb(208,168,36)" fg:x="7952" fg:w="5"/><text x="79.0139%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.05%)</title><rect x="78.7639%" y="517" width="0.0495%" height="15" fill="rgb(246,171,24)" fg:x="7952" fg:w="5"/><text x="79.0139%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.05%)</title><rect x="78.7639%" y="501" width="0.0495%" height="15" fill="rgb(215,142,24)" fg:x="7952" fg:w="5"/><text x="79.0139%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.05%)</title><rect x="78.7639%" y="485" width="0.0495%" height="15" fill="rgb(250,187,7)" fg:x="7952" fg:w="5"/><text x="79.0139%" y="495.50"></text></g><g><title>__GI___libc_free (5 samples, 0.05%)</title><rect x="78.7639%" y="469" width="0.0495%" height="15" fill="rgb(228,66,33)" fg:x="7952" fg:w="5"/><text x="79.0139%" y="479.50"></text></g><g><title>arena_for_chunk (2 samples, 0.02%)</title><rect x="78.7936%" y="453" width="0.0198%" height="15" fill="rgb(234,215,21)" fg:x="7955" fg:w="2"/><text x="79.0436%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,alloc::sync::Arc&lt;graph::Edge&gt;&gt;&gt;&gt; (3 samples, 0.03%)</title><rect x="78.8134%" y="581" width="0.0297%" height="15" fill="rgb(222,191,20)" fg:x="7957" fg:w="3"/><text x="79.0634%" y="591.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="78.8134%" y="565" width="0.0297%" height="15" fill="rgb(245,79,54)" fg:x="7957" fg:w="3"/><text x="79.0634%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (3 samples, 0.03%)</title><rect x="78.8134%" y="549" width="0.0297%" height="15" fill="rgb(240,10,37)" fg:x="7957" fg:w="3"/><text x="79.0634%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (3 samples, 0.03%)</title><rect x="78.8134%" y="533" width="0.0297%" height="15" fill="rgb(214,192,32)" fg:x="7957" fg:w="3"/><text x="79.0634%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (3 samples, 0.03%)</title><rect x="78.8134%" y="517" width="0.0297%" height="15" fill="rgb(209,36,54)" fg:x="7957" fg:w="3"/><text x="79.0634%" y="527.50"></text></g><g><title>__memcmp_avx2_movbe (20 samples, 0.20%)</title><rect x="79.0511%" y="437" width="0.1981%" height="15" fill="rgb(220,10,11)" fg:x="7981" fg:w="20"/><text x="79.3011%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (47 samples, 0.47%)</title><rect x="78.8431%" y="565" width="0.4655%" height="15" fill="rgb(221,106,17)" fg:x="7960" fg:w="47"/><text x="79.0931%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (47 samples, 0.47%)</title><rect x="78.8431%" y="549" width="0.4655%" height="15" fill="rgb(251,142,44)" fg:x="7960" fg:w="47"/><text x="79.0931%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (47 samples, 0.47%)</title><rect x="78.8431%" y="533" width="0.4655%" height="15" fill="rgb(238,13,15)" fg:x="7960" fg:w="47"/><text x="79.0931%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (43 samples, 0.43%)</title><rect x="78.8827%" y="517" width="0.4259%" height="15" fill="rgb(208,107,27)" fg:x="7964" fg:w="43"/><text x="79.1327%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (43 samples, 0.43%)</title><rect x="78.8827%" y="501" width="0.4259%" height="15" fill="rgb(205,136,37)" fg:x="7964" fg:w="43"/><text x="79.1327%" y="511.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (32 samples, 0.32%)</title><rect x="78.9917%" y="485" width="0.3170%" height="15" fill="rgb(250,205,27)" fg:x="7975" fg:w="32"/><text x="79.2417%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (32 samples, 0.32%)</title><rect x="78.9917%" y="469" width="0.3170%" height="15" fill="rgb(210,80,43)" fg:x="7975" fg:w="32"/><text x="79.2417%" y="479.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (32 samples, 0.32%)</title><rect x="78.9917%" y="453" width="0.3170%" height="15" fill="rgb(247,160,36)" fg:x="7975" fg:w="32"/><text x="79.2417%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (6 samples, 0.06%)</title><rect x="79.2492%" y="437" width="0.0594%" height="15" fill="rgb(234,13,49)" fg:x="8001" fg:w="6"/><text x="79.4992%" y="447.50"></text></g><g><title>graph::Model::has_id (50 samples, 0.50%)</title><rect x="78.8431%" y="581" width="0.4952%" height="15" fill="rgb(234,122,0)" fg:x="7960" fg:w="50"/><text x="79.0931%" y="591.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (2 samples, 0.02%)</title><rect x="79.3185%" y="565" width="0.0198%" height="15" fill="rgb(207,146,38)" fg:x="8008" fg:w="2"/><text x="79.5685%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (2 samples, 0.02%)</title><rect x="79.3185%" y="549" width="0.0198%" height="15" fill="rgb(207,177,25)" fg:x="8008" fg:w="2"/><text x="79.5685%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (2 samples, 0.02%)</title><rect x="79.3185%" y="533" width="0.0198%" height="15" fill="rgb(211,178,42)" fg:x="8008" fg:w="2"/><text x="79.5685%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="79.3185%" y="517" width="0.0198%" height="15" fill="rgb(230,69,54)" fg:x="8008" fg:w="2"/><text x="79.5685%" y="527.50"></text></g><g><title>_int_malloc (11 samples, 0.11%)</title><rect x="79.4275%" y="373" width="0.1090%" height="15" fill="rgb(214,135,41)" fg:x="8019" fg:w="11"/><text x="79.6775%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.14%)</title><rect x="79.4176%" y="437" width="0.1387%" height="15" fill="rgb(237,67,25)" fg:x="8018" fg:w="14"/><text x="79.6676%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.14%)</title><rect x="79.4176%" y="421" width="0.1387%" height="15" fill="rgb(222,189,50)" fg:x="8018" fg:w="14"/><text x="79.6676%" y="431.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.14%)</title><rect x="79.4176%" y="405" width="0.1387%" height="15" fill="rgb(245,148,34)" fg:x="8018" fg:w="14"/><text x="79.6676%" y="415.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.13%)</title><rect x="79.4275%" y="389" width="0.1288%" height="15" fill="rgb(222,29,6)" fg:x="8019" fg:w="13"/><text x="79.6775%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (15 samples, 0.15%)</title><rect x="79.4176%" y="485" width="0.1486%" height="15" fill="rgb(221,189,43)" fg:x="8018" fg:w="15"/><text x="79.6676%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (15 samples, 0.15%)</title><rect x="79.4176%" y="469" width="0.1486%" height="15" fill="rgb(207,36,27)" fg:x="8018" fg:w="15"/><text x="79.6676%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (15 samples, 0.15%)</title><rect x="79.4176%" y="453" width="0.1486%" height="15" fill="rgb(217,90,24)" fg:x="8018" fg:w="15"/><text x="79.6676%" y="463.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (19 samples, 0.19%)</title><rect x="79.4176%" y="565" width="0.1882%" height="15" fill="rgb(224,66,35)" fg:x="8018" fg:w="19"/><text x="79.6676%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.19%)</title><rect x="79.4176%" y="549" width="0.1882%" height="15" fill="rgb(221,13,50)" fg:x="8018" fg:w="19"/><text x="79.6676%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.19%)</title><rect x="79.4176%" y="533" width="0.1882%" height="15" fill="rgb(236,68,49)" fg:x="8018" fg:w="19"/><text x="79.6676%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.19%)</title><rect x="79.4176%" y="517" width="0.1882%" height="15" fill="rgb(229,146,28)" fg:x="8018" fg:w="19"/><text x="79.6676%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.19%)</title><rect x="79.4176%" y="501" width="0.1882%" height="15" fill="rgb(225,31,38)" fg:x="8018" fg:w="19"/><text x="79.6676%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.04%)</title><rect x="79.5662%" y="485" width="0.0396%" height="15" fill="rgb(250,208,3)" fg:x="8033" fg:w="4"/><text x="79.8162%" y="495.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="79.5662%" y="469" width="0.0396%" height="15" fill="rgb(246,54,23)" fg:x="8033" fg:w="4"/><text x="79.8162%" y="479.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="79.5662%" y="453" width="0.0396%" height="15" fill="rgb(243,76,11)" fg:x="8033" fg:w="4"/><text x="79.8162%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (2 samples, 0.02%)</title><rect x="79.6058%" y="565" width="0.0198%" height="15" fill="rgb(245,21,50)" fg:x="8037" fg:w="2"/><text x="79.8558%" y="575.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (2 samples, 0.02%)</title><rect x="79.6058%" y="549" width="0.0198%" height="15" fill="rgb(228,9,43)" fg:x="8037" fg:w="2"/><text x="79.8558%" y="559.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="79.6058%" y="533" width="0.0198%" height="15" fill="rgb(208,100,47)" fg:x="8037" fg:w="2"/><text x="79.8558%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="79.6355%" y="469" width="0.0198%" height="15" fill="rgb(232,26,8)" fg:x="8040" fg:w="2"/><text x="79.8855%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="79.6355%" y="453" width="0.0198%" height="15" fill="rgb(216,166,38)" fg:x="8040" fg:w="2"/><text x="79.8855%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="79.6355%" y="437" width="0.0198%" height="15" fill="rgb(251,202,51)" fg:x="8040" fg:w="2"/><text x="79.8855%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="79.6355%" y="421" width="0.0198%" height="15" fill="rgb(254,216,34)" fg:x="8040" fg:w="2"/><text x="79.8855%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="79.6355%" y="405" width="0.0198%" height="15" fill="rgb(251,32,27)" fg:x="8040" fg:w="2"/><text x="79.8855%" y="415.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="79.6355%" y="389" width="0.0198%" height="15" fill="rgb(208,127,28)" fg:x="8040" fg:w="2"/><text x="79.8855%" y="399.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="79.6355%" y="373" width="0.0198%" height="15" fill="rgb(224,137,22)" fg:x="8040" fg:w="2"/><text x="79.8855%" y="383.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="79.6355%" y="565" width="0.0297%" height="15" fill="rgb(254,70,32)" fg:x="8040" fg:w="3"/><text x="79.8855%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="79.6355%" y="549" width="0.0297%" height="15" fill="rgb(229,75,37)" fg:x="8040" fg:w="3"/><text x="79.8855%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="79.6355%" y="533" width="0.0297%" height="15" fill="rgb(252,64,23)" fg:x="8040" fg:w="3"/><text x="79.8855%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="79.6355%" y="517" width="0.0297%" height="15" fill="rgb(232,162,48)" fg:x="8040" fg:w="3"/><text x="79.8855%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="79.6355%" y="501" width="0.0297%" height="15" fill="rgb(246,160,12)" fg:x="8040" fg:w="3"/><text x="79.8855%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="79.6355%" y="485" width="0.0297%" height="15" fill="rgb(247,166,0)" fg:x="8040" fg:w="3"/><text x="79.8855%" y="495.50"></text></g><g><title>__memcmp_avx2_movbe (6 samples, 0.06%)</title><rect x="79.7147%" y="437" width="0.0594%" height="15" fill="rgb(249,219,21)" fg:x="8048" fg:w="6"/><text x="79.9647%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (9 samples, 0.09%)</title><rect x="79.7048%" y="501" width="0.0891%" height="15" fill="rgb(205,209,3)" fg:x="8047" fg:w="9"/><text x="79.9548%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (9 samples, 0.09%)</title><rect x="79.7048%" y="485" width="0.0891%" height="15" fill="rgb(243,44,1)" fg:x="8047" fg:w="9"/><text x="79.9548%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (9 samples, 0.09%)</title><rect x="79.7048%" y="469" width="0.0891%" height="15" fill="rgb(206,159,16)" fg:x="8047" fg:w="9"/><text x="79.9548%" y="479.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (9 samples, 0.09%)</title><rect x="79.7048%" y="453" width="0.0891%" height="15" fill="rgb(244,77,30)" fg:x="8047" fg:w="9"/><text x="79.9548%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (2 samples, 0.02%)</title><rect x="79.7742%" y="437" width="0.0198%" height="15" fill="rgb(218,69,12)" fg:x="8054" fg:w="2"/><text x="80.0242%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (14 samples, 0.14%)</title><rect x="79.6652%" y="565" width="0.1387%" height="15" fill="rgb(212,87,7)" fg:x="8043" fg:w="14"/><text x="79.9152%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (14 samples, 0.14%)</title><rect x="79.6652%" y="549" width="0.1387%" height="15" fill="rgb(245,114,25)" fg:x="8043" fg:w="14"/><text x="79.9152%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (13 samples, 0.13%)</title><rect x="79.6751%" y="533" width="0.1288%" height="15" fill="rgb(210,61,42)" fg:x="8044" fg:w="13"/><text x="79.9251%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (13 samples, 0.13%)</title><rect x="79.6751%" y="517" width="0.1288%" height="15" fill="rgb(211,52,33)" fg:x="8044" fg:w="13"/><text x="79.9251%" y="527.50"></text></g><g><title>__GI_memcpy (2 samples, 0.02%)</title><rect x="79.8138%" y="421" width="0.0198%" height="15" fill="rgb(234,58,33)" fg:x="8058" fg:w="2"/><text x="80.0638%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="79.8138%" y="405" width="0.0198%" height="15" fill="rgb(220,115,36)" fg:x="8058" fg:w="2"/><text x="80.0638%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="79.8534%" y="405" width="0.0693%" height="15" fill="rgb(243,153,54)" fg:x="8062" fg:w="7"/><text x="80.1034%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="79.8534%" y="389" width="0.0693%" height="15" fill="rgb(251,47,18)" fg:x="8062" fg:w="7"/><text x="80.1034%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="79.8534%" y="373" width="0.0693%" height="15" fill="rgb(242,102,42)" fg:x="8062" fg:w="7"/><text x="80.1034%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="79.8534%" y="357" width="0.0693%" height="15" fill="rgb(234,31,38)" fg:x="8062" fg:w="7"/><text x="80.1034%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="79.8534%" y="341" width="0.0693%" height="15" fill="rgb(221,117,51)" fg:x="8062" fg:w="7"/><text x="80.1034%" y="351.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="79.8534%" y="325" width="0.0693%" height="15" fill="rgb(212,20,18)" fg:x="8062" fg:w="7"/><text x="80.1034%" y="335.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="79.8534%" y="309" width="0.0693%" height="15" fill="rgb(245,133,36)" fg:x="8062" fg:w="7"/><text x="80.1034%" y="319.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="79.8534%" y="293" width="0.0693%" height="15" fill="rgb(212,6,19)" fg:x="8062" fg:w="7"/><text x="80.1034%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="79.8633%" y="277" width="0.0594%" height="15" fill="rgb(218,1,36)" fg:x="8063" fg:w="6"/><text x="80.1133%" y="287.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="79.8930%" y="261" width="0.0297%" height="15" fill="rgb(246,84,54)" fg:x="8066" fg:w="3"/><text x="80.1430%" y="271.50"></text></g><g><title>_int_realloc (14 samples, 0.14%)</title><rect x="79.8039%" y="437" width="0.1387%" height="15" fill="rgb(242,110,6)" fg:x="8057" fg:w="14"/><text x="80.0539%" y="447.50"></text></g><g><title>_int_malloc (11 samples, 0.11%)</title><rect x="79.8336%" y="421" width="0.1090%" height="15" fill="rgb(214,47,5)" fg:x="8060" fg:w="11"/><text x="80.0836%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (15 samples, 0.15%)</title><rect x="79.8039%" y="517" width="0.1486%" height="15" fill="rgb(218,159,25)" fg:x="8057" fg:w="15"/><text x="80.0539%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (15 samples, 0.15%)</title><rect x="79.8039%" y="501" width="0.1486%" height="15" fill="rgb(215,211,28)" fg:x="8057" fg:w="15"/><text x="80.0539%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (15 samples, 0.15%)</title><rect x="79.8039%" y="485" width="0.1486%" height="15" fill="rgb(238,59,32)" fg:x="8057" fg:w="15"/><text x="80.0539%" y="495.50"></text></g><g><title>alloc::alloc::realloc (15 samples, 0.15%)</title><rect x="79.8039%" y="469" width="0.1486%" height="15" fill="rgb(226,82,3)" fg:x="8057" fg:w="15"/><text x="80.0539%" y="479.50"></text></g><g><title>__GI___libc_realloc (15 samples, 0.15%)</title><rect x="79.8039%" y="453" width="0.1486%" height="15" fill="rgb(240,164,32)" fg:x="8057" fg:w="15"/><text x="80.0539%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (16 samples, 0.16%)</title><rect x="79.8039%" y="565" width="0.1585%" height="15" fill="rgb(232,46,7)" fg:x="8057" fg:w="16"/><text x="80.0539%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (16 samples, 0.16%)</title><rect x="79.8039%" y="549" width="0.1585%" height="15" fill="rgb(229,129,53)" fg:x="8057" fg:w="16"/><text x="80.0539%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (16 samples, 0.16%)</title><rect x="79.8039%" y="533" width="0.1585%" height="15" fill="rgb(234,188,29)" fg:x="8057" fg:w="16"/><text x="80.0539%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::new (2 samples, 0.02%)</title><rect x="79.9624%" y="565" width="0.0198%" height="15" fill="rgb(246,141,4)" fg:x="8073" fg:w="2"/><text x="80.2124%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;graph::Edge&gt;&gt; (2 samples, 0.02%)</title><rect x="79.9822%" y="565" width="0.0198%" height="15" fill="rgb(229,23,39)" fg:x="8075" fg:w="2"/><text x="80.2322%" y="575.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="79.9822%" y="549" width="0.0198%" height="15" fill="rgb(206,12,3)" fg:x="8075" fg:w="2"/><text x="80.2322%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="79.9822%" y="533" width="0.0198%" height="15" fill="rgb(252,226,20)" fg:x="8075" fg:w="2"/><text x="80.2322%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="79.9822%" y="517" width="0.0198%" height="15" fill="rgb(216,123,35)" fg:x="8075" fg:w="2"/><text x="80.2322%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.05%)</title><rect x="80.0020%" y="549" width="0.0495%" height="15" fill="rgb(212,68,40)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;[machine::Position]&gt; (5 samples, 0.05%)</title><rect x="80.0020%" y="533" width="0.0495%" height="15" fill="rgb(254,125,32)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Position&gt; (5 samples, 0.05%)</title><rect x="80.0020%" y="517" width="0.0495%" height="15" fill="rgb(253,97,22)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.05%)</title><rect x="80.0020%" y="501" width="0.0495%" height="15" fill="rgb(241,101,14)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.05%)</title><rect x="80.0020%" y="485" width="0.0495%" height="15" fill="rgb(238,103,29)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.05%)</title><rect x="80.0020%" y="469" width="0.0495%" height="15" fill="rgb(233,195,47)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="479.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.05%)</title><rect x="80.0020%" y="453" width="0.0495%" height="15" fill="rgb(246,218,30)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.05%)</title><rect x="80.0020%" y="437" width="0.0495%" height="15" fill="rgb(219,145,47)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="447.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.05%)</title><rect x="80.0020%" y="421" width="0.0495%" height="15" fill="rgb(243,12,26)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="431.50"></text></g><g><title>__GI___libc_free (5 samples, 0.05%)</title><rect x="80.0020%" y="405" width="0.0495%" height="15" fill="rgb(214,87,16)" fg:x="8077" fg:w="5"/><text x="80.2520%" y="415.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="80.0317%" y="389" width="0.0198%" height="15" fill="rgb(208,99,42)" fg:x="8080" fg:w="2"/><text x="80.2817%" y="399.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;machine::Position&gt;&gt; (6 samples, 0.06%)</title><rect x="80.0020%" y="565" width="0.0594%" height="15" fill="rgb(253,99,2)" fg:x="8077" fg:w="6"/><text x="80.2520%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;alloc::sync::Arc&lt;graph::Edge&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="80.0614%" y="565" width="0.0198%" height="15" fill="rgb(220,168,23)" fg:x="8083" fg:w="2"/><text x="80.3114%" y="575.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="80.0614%" y="549" width="0.0198%" height="15" fill="rgb(242,38,24)" fg:x="8083" fg:w="2"/><text x="80.3114%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,alloc::sync::Arc&lt;graph::Vertex&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="80.0812%" y="565" width="0.0198%" height="15" fill="rgb(225,182,9)" fg:x="8085" fg:w="2"/><text x="80.3312%" y="575.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="80.0812%" y="549" width="0.0198%" height="15" fill="rgb(243,178,37)" fg:x="8085" fg:w="2"/><text x="80.3312%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (2 samples, 0.02%)</title><rect x="80.0812%" y="533" width="0.0198%" height="15" fill="rgb(232,139,19)" fg:x="8085" fg:w="2"/><text x="80.3312%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (2 samples, 0.02%)</title><rect x="80.0812%" y="517" width="0.0198%" height="15" fill="rgb(225,201,24)" fg:x="8085" fg:w="2"/><text x="80.3312%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="80.0812%" y="501" width="0.0198%" height="15" fill="rgb(221,47,46)" fg:x="8085" fg:w="2"/><text x="80.3312%" y="511.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (103 samples, 1.02%)</title><rect x="81.3788%" y="437" width="1.0202%" height="15" fill="rgb(249,23,13)" fg:x="8216" fg:w="103"/><text x="81.6288%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (55 samples, 0.54%)</title><rect x="81.8542%" y="421" width="0.5448%" height="15" fill="rgb(219,9,5)" fg:x="8264" fg:w="55"/><text x="82.1042%" y="431.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (112 samples, 1.11%)</title><rect x="81.3788%" y="453" width="1.1094%" height="15" fill="rgb(254,171,16)" fg:x="8216" fg:w="112"/><text x="81.6288%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (9 samples, 0.09%)</title><rect x="82.3990%" y="437" width="0.0891%" height="15" fill="rgb(230,171,20)" fg:x="8319" fg:w="9"/><text x="82.6490%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (7 samples, 0.07%)</title><rect x="82.4188%" y="421" width="0.0693%" height="15" fill="rgb(210,71,41)" fg:x="8321" fg:w="7"/><text x="82.6688%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (5 samples, 0.05%)</title><rect x="83.5281%" y="421" width="0.0495%" height="15" fill="rgb(206,173,20)" fg:x="8433" fg:w="5"/><text x="83.7781%" y="431.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (5 samples, 0.05%)</title><rect x="83.5281%" y="405" width="0.0495%" height="15" fill="rgb(233,88,34)" fg:x="8433" fg:w="5"/><text x="83.7781%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (5 samples, 0.05%)</title><rect x="83.5281%" y="389" width="0.0495%" height="15" fill="rgb(223,209,46)" fg:x="8433" fg:w="5"/><text x="83.7781%" y="399.50"></text></g><g><title>core::ptr::read (5 samples, 0.05%)</title><rect x="83.5281%" y="373" width="0.0495%" height="15" fill="rgb(250,43,18)" fg:x="8433" fg:w="5"/><text x="83.7781%" y="383.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (66 samples, 0.65%)</title><rect x="82.9437%" y="437" width="0.6537%" height="15" fill="rgb(208,13,10)" fg:x="8374" fg:w="66"/><text x="83.1937%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (2 samples, 0.02%)</title><rect x="83.5777%" y="421" width="0.0198%" height="15" fill="rgb(212,200,36)" fg:x="8438" fg:w="2"/><text x="83.8277%" y="431.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (113 samples, 1.12%)</title><rect x="82.4881%" y="453" width="1.1193%" height="15" fill="rgb(225,90,30)" fg:x="8328" fg:w="113"/><text x="82.7381%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (275 samples, 2.72%)</title><rect x="81.3788%" y="501" width="2.7239%" height="15" fill="rgb(236,182,39)" fg:x="8216" fg:w="275"/><text x="81.6288%" y="511.50">al..</text></g><g><title>alloc::collections::btree::mem::replace (275 samples, 2.72%)</title><rect x="81.3788%" y="485" width="2.7239%" height="15" fill="rgb(212,144,35)" fg:x="8216" fg:w="275"/><text x="81.6288%" y="495.50">al..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (275 samples, 2.72%)</title><rect x="81.3788%" y="469" width="2.7239%" height="15" fill="rgb(228,63,44)" fg:x="8216" fg:w="275"/><text x="81.6288%" y="479.50">al..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (50 samples, 0.50%)</title><rect x="83.6074%" y="453" width="0.4952%" height="15" fill="rgb(228,109,6)" fg:x="8441" fg:w="50"/><text x="83.8574%" y="463.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (50 samples, 0.50%)</title><rect x="83.6074%" y="437" width="0.4952%" height="15" fill="rgb(238,117,24)" fg:x="8441" fg:w="50"/><text x="83.8574%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (50 samples, 0.50%)</title><rect x="83.6074%" y="421" width="0.4952%" height="15" fill="rgb(242,26,26)" fg:x="8441" fg:w="50"/><text x="83.8574%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (50 samples, 0.50%)</title><rect x="83.6074%" y="405" width="0.4952%" height="15" fill="rgb(221,92,48)" fg:x="8441" fg:w="50"/><text x="83.8574%" y="415.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (472 samples, 4.68%)</title><rect x="80.4180%" y="549" width="4.6751%" height="15" fill="rgb(209,209,32)" fg:x="8119" fg:w="472"/><text x="80.6680%" y="559.50">&lt;allo..</text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (470 samples, 4.66%)</title><rect x="80.4378%" y="533" width="4.6553%" height="15" fill="rgb(221,70,22)" fg:x="8121" fg:w="470"/><text x="80.6878%" y="543.50">&lt;allo..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (375 samples, 3.71%)</title><rect x="81.3788%" y="517" width="3.7143%" height="15" fill="rgb(248,145,5)" fg:x="8216" fg:w="375"/><text x="81.6288%" y="527.50">allo..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (100 samples, 0.99%)</title><rect x="84.1026%" y="501" width="0.9905%" height="15" fill="rgb(226,116,26)" fg:x="8491" fg:w="100"/><text x="84.3526%" y="511.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (4 samples, 0.04%)</title><rect x="85.0535%" y="485" width="0.0396%" height="15" fill="rgb(244,5,17)" fg:x="8587" fg:w="4"/><text x="85.3035%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::ops::index::Index&lt;core::ops::range::RangeFull&gt;&gt;::index (18 samples, 0.18%)</title><rect x="85.0931%" y="533" width="0.1783%" height="15" fill="rgb(252,159,33)" fg:x="8591" fg:w="18"/><text x="85.3431%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (18 samples, 0.18%)</title><rect x="85.0931%" y="517" width="0.1783%" height="15" fill="rgb(206,71,0)" fg:x="8591" fg:w="18"/><text x="85.3431%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (18 samples, 0.18%)</title><rect x="85.0931%" y="501" width="0.1783%" height="15" fill="rgb(233,118,54)" fg:x="8591" fg:w="18"/><text x="85.3431%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (18 samples, 0.18%)</title><rect x="85.0931%" y="485" width="0.1783%" height="15" fill="rgb(234,83,48)" fg:x="8591" fg:w="18"/><text x="85.3431%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&lt;str&gt;&gt;::eq (529 samples, 5.24%)</title><rect x="85.0931%" y="549" width="5.2397%" height="15" fill="rgb(228,3,54)" fg:x="8591" fg:w="529"/><text x="85.3431%" y="559.50">&lt;alloc..</text></g><g><title>core::str::traits::&lt;impl core::cmp::PartialEq for str&gt;::eq (511 samples, 5.06%)</title><rect x="85.2714%" y="533" width="5.0614%" height="15" fill="rgb(226,155,13)" fg:x="8609" fg:w="511"/><text x="85.5214%" y="543.50">core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (511 samples, 5.06%)</title><rect x="85.2714%" y="517" width="5.0614%" height="15" fill="rgb(241,28,37)" fg:x="8609" fg:w="511"/><text x="85.5214%" y="527.50">core::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (511 samples, 5.06%)</title><rect x="85.2714%" y="501" width="5.0614%" height="15" fill="rgb(233,93,10)" fg:x="8609" fg:w="511"/><text x="85.5214%" y="511.50">core::..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (511 samples, 5.06%)</title><rect x="85.2714%" y="485" width="5.0614%" height="15" fill="rgb(225,113,19)" fg:x="8609" fg:w="511"/><text x="85.5214%" y="495.50">&lt;[A] a..</text></g><g><title>__memcmp_avx2_movbe (405 samples, 4.01%)</title><rect x="86.3213%" y="469" width="4.0115%" height="15" fill="rgb(241,2,18)" fg:x="8715" fg:w="405"/><text x="86.5713%" y="479.50">__me..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.07%)</title><rect x="90.3328%" y="549" width="0.0693%" height="15" fill="rgb(228,207,21)" fg:x="9120" fg:w="7"/><text x="90.5828%" y="559.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (7 samples, 0.07%)</title><rect x="90.3328%" y="533" width="0.0693%" height="15" fill="rgb(213,211,35)" fg:x="9120" fg:w="7"/><text x="90.5828%" y="543.50"></text></g><g><title>core::sync::atomic::atomic_add (7 samples, 0.07%)</title><rect x="90.3328%" y="517" width="0.0693%" height="15" fill="rgb(209,83,10)" fg:x="9120" fg:w="7"/><text x="90.5828%" y="527.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (50 samples, 0.50%)</title><rect x="90.4021%" y="549" width="0.4952%" height="15" fill="rgb(209,164,1)" fg:x="9127" fg:w="50"/><text x="90.6521%" y="559.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (50 samples, 0.50%)</title><rect x="90.4021%" y="533" width="0.4952%" height="15" fill="rgb(213,184,43)" fg:x="9127" fg:w="50"/><text x="90.6521%" y="543.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (50 samples, 0.50%)</title><rect x="90.4021%" y="517" width="0.4952%" height="15" fill="rgb(231,61,34)" fg:x="9127" fg:w="50"/><text x="90.6521%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.02%)</title><rect x="90.9271%" y="485" width="0.0198%" height="15" fill="rgb(235,75,3)" fg:x="9180" fg:w="2"/><text x="91.1771%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.02%)</title><rect x="90.9271%" y="469" width="0.0198%" height="15" fill="rgb(220,106,47)" fg:x="9180" fg:w="2"/><text x="91.1771%" y="479.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.02%)</title><rect x="90.9271%" y="453" width="0.0198%" height="15" fill="rgb(210,196,33)" fg:x="9180" fg:w="2"/><text x="91.1771%" y="463.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.02%)</title><rect x="90.9271%" y="437" width="0.0198%" height="15" fill="rgb(229,154,42)" fg:x="9180" fg:w="2"/><text x="91.1771%" y="447.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="90.9469%" y="485" width="0.0297%" height="15" fill="rgb(228,114,26)" fg:x="9182" fg:w="3"/><text x="91.1969%" y="495.50"></text></g><g><title>_int_malloc (3 samples, 0.03%)</title><rect x="90.9469%" y="469" width="0.0297%" height="15" fill="rgb(208,144,1)" fg:x="9182" fg:w="3"/><text x="91.1969%" y="479.50"></text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 0.07%)</title><rect x="90.9172%" y="501" width="0.0693%" height="15" fill="rgb(239,112,37)" fg:x="9179" fg:w="7"/><text x="91.1672%" y="511.50"></text></g><g><title>graph::Model::out_edges (1,100 samples, 10.90%)</title><rect x="80.1010%" y="565" width="10.8954%" height="15" fill="rgb(210,96,50)" fg:x="8087" fg:w="1100"/><text x="80.3510%" y="575.50">graph::Model::ou..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (9 samples, 0.09%)</title><rect x="90.9073%" y="549" width="0.0891%" height="15" fill="rgb(222,178,2)" fg:x="9178" fg:w="9"/><text x="91.1573%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.09%)</title><rect x="90.9073%" y="533" width="0.0891%" height="15" fill="rgb(226,74,18)" fg:x="9178" fg:w="9"/><text x="91.1573%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.09%)</title><rect x="90.9073%" y="517" width="0.0891%" height="15" fill="rgb(225,67,54)" fg:x="9178" fg:w="9"/><text x="91.1573%" y="527.50"></text></g><g><title>machine::Machine::get_next_edge (1,179 samples, 11.68%)</title><rect x="79.3384%" y="581" width="11.6779%" height="15" fill="rgb(251,92,32)" fg:x="8010" fg:w="1179"/><text x="79.5884%" y="591.50">machine::Machine:..</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (2 samples, 0.02%)</title><rect x="90.9964%" y="565" width="0.0198%" height="15" fill="rgb(228,149,22)" fg:x="9187" fg:w="2"/><text x="91.2464%" y="575.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (2 samples, 0.02%)</title><rect x="90.9964%" y="549" width="0.0198%" height="15" fill="rgb(243,54,13)" fg:x="9187" fg:w="2"/><text x="91.2464%" y="559.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="91.0757%" y="373" width="0.0297%" height="15" fill="rgb(243,180,28)" fg:x="9195" fg:w="3"/><text x="91.3257%" y="383.50"></text></g><g><title>tcache_get (3 samples, 0.03%)</title><rect x="91.0757%" y="357" width="0.0297%" height="15" fill="rgb(208,167,24)" fg:x="9195" fg:w="3"/><text x="91.3257%" y="367.50"></text></g><g><title>tcache_get_n (3 samples, 0.03%)</title><rect x="91.0757%" y="341" width="0.0297%" height="15" fill="rgb(245,73,45)" fg:x="9195" fg:w="3"/><text x="91.3257%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (5 samples, 0.05%)</title><rect x="91.0658%" y="469" width="0.0495%" height="15" fill="rgb(237,203,48)" fg:x="9194" fg:w="5"/><text x="91.3158%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.05%)</title><rect x="91.0658%" y="453" width="0.0495%" height="15" fill="rgb(211,197,16)" fg:x="9194" fg:w="5"/><text x="91.3158%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.05%)</title><rect x="91.0658%" y="437" width="0.0495%" height="15" fill="rgb(243,99,51)" fg:x="9194" fg:w="5"/><text x="91.3158%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.05%)</title><rect x="91.0658%" y="421" width="0.0495%" height="15" fill="rgb(215,123,29)" fg:x="9194" fg:w="5"/><text x="91.3158%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.05%)</title><rect x="91.0658%" y="405" width="0.0495%" height="15" fill="rgb(239,186,37)" fg:x="9194" fg:w="5"/><text x="91.3158%" y="415.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.05%)</title><rect x="91.0658%" y="389" width="0.0495%" height="15" fill="rgb(252,136,39)" fg:x="9194" fg:w="5"/><text x="91.3158%" y="399.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (9 samples, 0.09%)</title><rect x="91.0559%" y="565" width="0.0891%" height="15" fill="rgb(223,213,32)" fg:x="9193" fg:w="9"/><text x="91.3059%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (8 samples, 0.08%)</title><rect x="91.0658%" y="549" width="0.0792%" height="15" fill="rgb(233,115,5)" fg:x="9194" fg:w="8"/><text x="91.3158%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 0.08%)</title><rect x="91.0658%" y="533" width="0.0792%" height="15" fill="rgb(207,226,44)" fg:x="9194" fg:w="8"/><text x="91.3158%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.08%)</title><rect x="91.0658%" y="517" width="0.0792%" height="15" fill="rgb(208,126,0)" fg:x="9194" fg:w="8"/><text x="91.3158%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.08%)</title><rect x="91.0658%" y="501" width="0.0792%" height="15" fill="rgb(244,66,21)" fg:x="9194" fg:w="8"/><text x="91.3158%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.08%)</title><rect x="91.0658%" y="485" width="0.0792%" height="15" fill="rgb(222,97,12)" fg:x="9194" fg:w="8"/><text x="91.3158%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (3 samples, 0.03%)</title><rect x="91.1153%" y="469" width="0.0297%" height="15" fill="rgb(219,213,19)" fg:x="9199" fg:w="3"/><text x="91.3653%" y="479.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.03%)</title><rect x="91.1153%" y="453" width="0.0297%" height="15" fill="rgb(252,169,30)" fg:x="9199" fg:w="3"/><text x="91.3653%" y="463.50"></text></g><g><title>__memcpy_avx_unaligned_erms (3 samples, 0.03%)</title><rect x="91.1153%" y="437" width="0.0297%" height="15" fill="rgb(206,32,51)" fg:x="9199" fg:w="3"/><text x="91.3653%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="91.1549%" y="549" width="0.0297%" height="15" fill="rgb(250,172,42)" fg:x="9203" fg:w="3"/><text x="91.4049%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="91.1549%" y="533" width="0.0297%" height="15" fill="rgb(209,34,43)" fg:x="9203" fg:w="3"/><text x="91.4049%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="91.1549%" y="517" width="0.0297%" height="15" fill="rgb(223,11,35)" fg:x="9203" fg:w="3"/><text x="91.4049%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="91.1549%" y="501" width="0.0297%" height="15" fill="rgb(251,219,26)" fg:x="9203" fg:w="3"/><text x="91.4049%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="91.1549%" y="485" width="0.0297%" height="15" fill="rgb(231,119,3)" fg:x="9203" fg:w="3"/><text x="91.4049%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="91.1549%" y="469" width="0.0297%" height="15" fill="rgb(216,97,11)" fg:x="9203" fg:w="3"/><text x="91.4049%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="91.1549%" y="453" width="0.0297%" height="15" fill="rgb(223,59,9)" fg:x="9203" fg:w="3"/><text x="91.4049%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="91.1549%" y="437" width="0.0297%" height="15" fill="rgb(233,93,31)" fg:x="9203" fg:w="3"/><text x="91.4049%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="91.1648%" y="421" width="0.0198%" height="15" fill="rgb(239,81,33)" fg:x="9204" fg:w="2"/><text x="91.4148%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="91.1648%" y="405" width="0.0198%" height="15" fill="rgb(213,120,34)" fg:x="9204" fg:w="2"/><text x="91.4148%" y="415.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="91.1648%" y="389" width="0.0198%" height="15" fill="rgb(243,49,53)" fg:x="9204" fg:w="2"/><text x="91.4148%" y="399.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="91.1648%" y="373" width="0.0198%" height="15" fill="rgb(247,216,33)" fg:x="9204" fg:w="2"/><text x="91.4148%" y="383.50"></text></g><g><title>&lt;machine::Step as core::clone::Clone&gt;::clone (8 samples, 0.08%)</title><rect x="91.1450%" y="565" width="0.0792%" height="15" fill="rgb(226,26,14)" fg:x="9202" fg:w="8"/><text x="91.3950%" y="575.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="91.1846%" y="549" width="0.0396%" height="15" fill="rgb(215,49,53)" fg:x="9206" fg:w="4"/><text x="91.4346%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="91.1945%" y="533" width="0.0297%" height="15" fill="rgb(245,162,40)" fg:x="9207" fg:w="3"/><text x="91.4445%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="91.2044%" y="517" width="0.0198%" height="15" fill="rgb(229,68,17)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.02%)</title><rect x="91.2044%" y="501" width="0.0198%" height="15" fill="rgb(213,182,10)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.02%)</title><rect x="91.2044%" y="485" width="0.0198%" height="15" fill="rgb(245,125,30)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.02%)</title><rect x="91.2044%" y="469" width="0.0198%" height="15" fill="rgb(232,202,2)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="91.2044%" y="453" width="0.0198%" height="15" fill="rgb(237,140,51)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="91.2044%" y="437" width="0.0198%" height="15" fill="rgb(236,157,25)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="91.2044%" y="421" width="0.0198%" height="15" fill="rgb(219,209,0)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="91.2044%" y="405" width="0.0198%" height="15" fill="rgb(240,116,54)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="91.2044%" y="389" width="0.0198%" height="15" fill="rgb(216,10,36)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="91.2044%" y="373" width="0.0198%" height="15" fill="rgb(222,72,44)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="383.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="91.2044%" y="357" width="0.0198%" height="15" fill="rgb(232,159,9)" fg:x="9208" fg:w="2"/><text x="91.4544%" y="367.50"></text></g><g><title>__memcmp_avx2_movbe (25 samples, 0.25%)</title><rect x="91.3134%" y="437" width="0.2476%" height="15" fill="rgb(210,39,32)" fg:x="9219" fg:w="25"/><text x="91.5634%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (27 samples, 0.27%)</title><rect x="91.3035%" y="501" width="0.2674%" height="15" fill="rgb(216,194,45)" fg:x="9218" fg:w="27"/><text x="91.5535%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (27 samples, 0.27%)</title><rect x="91.3035%" y="485" width="0.2674%" height="15" fill="rgb(218,18,35)" fg:x="9218" fg:w="27"/><text x="91.5535%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (27 samples, 0.27%)</title><rect x="91.3035%" y="469" width="0.2674%" height="15" fill="rgb(207,83,51)" fg:x="9218" fg:w="27"/><text x="91.5535%" y="479.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (27 samples, 0.27%)</title><rect x="91.3035%" y="453" width="0.2674%" height="15" fill="rgb(225,63,43)" fg:x="9218" fg:w="27"/><text x="91.5535%" y="463.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (35 samples, 0.35%)</title><rect x="91.2342%" y="565" width="0.3467%" height="15" fill="rgb(207,57,36)" fg:x="9211" fg:w="35"/><text x="91.4842%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (35 samples, 0.35%)</title><rect x="91.2342%" y="549" width="0.3467%" height="15" fill="rgb(216,99,33)" fg:x="9211" fg:w="35"/><text x="91.4842%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (34 samples, 0.34%)</title><rect x="91.2441%" y="533" width="0.3368%" height="15" fill="rgb(225,42,16)" fg:x="9212" fg:w="34"/><text x="91.4941%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (34 samples, 0.34%)</title><rect x="91.2441%" y="517" width="0.3368%" height="15" fill="rgb(220,201,45)" fg:x="9212" fg:w="34"/><text x="91.4941%" y="527.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get_mut (2 samples, 0.02%)</title><rect x="91.5808%" y="565" width="0.0198%" height="15" fill="rgb(225,33,4)" fg:x="9246" fg:w="2"/><text x="91.8308%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (2 samples, 0.02%)</title><rect x="91.5808%" y="549" width="0.0198%" height="15" fill="rgb(224,33,50)" fg:x="9246" fg:w="2"/><text x="91.8308%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (2 samples, 0.02%)</title><rect x="91.5808%" y="533" width="0.0198%" height="15" fill="rgb(246,198,51)" fg:x="9246" fg:w="2"/><text x="91.8308%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (2 samples, 0.02%)</title><rect x="91.5808%" y="517" width="0.0198%" height="15" fill="rgb(205,22,4)" fg:x="9246" fg:w="2"/><text x="91.8308%" y="527.50"></text></g><g><title>__memcmp_avx2_movbe (7 samples, 0.07%)</title><rect x="91.6700%" y="421" width="0.0693%" height="15" fill="rgb(206,3,8)" fg:x="9255" fg:w="7"/><text x="91.9200%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (11 samples, 0.11%)</title><rect x="91.6502%" y="485" width="0.1090%" height="15" fill="rgb(251,23,15)" fg:x="9253" fg:w="11"/><text x="91.9002%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (11 samples, 0.11%)</title><rect x="91.6502%" y="469" width="0.1090%" height="15" fill="rgb(252,88,28)" fg:x="9253" fg:w="11"/><text x="91.9002%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (11 samples, 0.11%)</title><rect x="91.6502%" y="453" width="0.1090%" height="15" fill="rgb(212,127,14)" fg:x="9253" fg:w="11"/><text x="91.9002%" y="463.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (11 samples, 0.11%)</title><rect x="91.6502%" y="437" width="0.1090%" height="15" fill="rgb(247,145,37)" fg:x="9253" fg:w="11"/><text x="91.9002%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (2 samples, 0.02%)</title><rect x="91.7393%" y="421" width="0.0198%" height="15" fill="rgb(209,117,53)" fg:x="9262" fg:w="2"/><text x="91.9893%" y="431.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (17 samples, 0.17%)</title><rect x="91.6006%" y="533" width="0.1684%" height="15" fill="rgb(212,90,42)" fg:x="9248" fg:w="17"/><text x="91.8506%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (16 samples, 0.16%)</title><rect x="91.6105%" y="517" width="0.1585%" height="15" fill="rgb(218,164,37)" fg:x="9249" fg:w="16"/><text x="91.8605%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (16 samples, 0.16%)</title><rect x="91.6105%" y="501" width="0.1585%" height="15" fill="rgb(246,65,34)" fg:x="9249" fg:w="16"/><text x="91.8605%" y="511.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (19 samples, 0.19%)</title><rect x="91.6006%" y="565" width="0.1882%" height="15" fill="rgb(231,100,33)" fg:x="9248" fg:w="19"/><text x="91.8506%" y="575.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (19 samples, 0.19%)</title><rect x="91.6006%" y="549" width="0.1882%" height="15" fill="rgb(228,126,14)" fg:x="9248" fg:w="19"/><text x="91.8506%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="91.7690%" y="533" width="0.0198%" height="15" fill="rgb(215,173,21)" fg:x="9265" fg:w="2"/><text x="92.0190%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="91.7690%" y="517" width="0.0198%" height="15" fill="rgb(210,6,40)" fg:x="9265" fg:w="2"/><text x="92.0190%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="91.7690%" y="501" width="0.0198%" height="15" fill="rgb(212,48,18)" fg:x="9265" fg:w="2"/><text x="92.0190%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="91.7690%" y="485" width="0.0198%" height="15" fill="rgb(230,214,11)" fg:x="9265" fg:w="2"/><text x="92.0190%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="91.7690%" y="469" width="0.0198%" height="15" fill="rgb(254,105,39)" fg:x="9265" fg:w="2"/><text x="92.0190%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="91.7690%" y="453" width="0.0198%" height="15" fill="rgb(245,158,5)" fg:x="9265" fg:w="2"/><text x="92.0190%" y="463.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (8 samples, 0.08%)</title><rect x="91.8185%" y="549" width="0.0792%" height="15" fill="rgb(249,208,11)" fg:x="9270" fg:w="8"/><text x="92.0685%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="91.8483%" y="533" width="0.0495%" height="15" fill="rgb(210,39,28)" fg:x="9273" fg:w="5"/><text x="92.0983%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="91.8483%" y="517" width="0.0495%" height="15" fill="rgb(211,56,53)" fg:x="9273" fg:w="5"/><text x="92.0983%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.05%)</title><rect x="91.8483%" y="501" width="0.0495%" height="15" fill="rgb(226,201,30)" fg:x="9273" fg:w="5"/><text x="92.0983%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.05%)</title><rect x="91.8483%" y="485" width="0.0495%" height="15" fill="rgb(239,101,34)" fg:x="9273" fg:w="5"/><text x="92.0983%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.05%)</title><rect x="91.8483%" y="469" width="0.0495%" height="15" fill="rgb(226,209,5)" fg:x="9273" fg:w="5"/><text x="92.0983%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.04%)</title><rect x="91.8582%" y="453" width="0.0396%" height="15" fill="rgb(250,105,47)" fg:x="9274" fg:w="4"/><text x="92.1082%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="91.8582%" y="437" width="0.0396%" height="15" fill="rgb(230,72,3)" fg:x="9274" fg:w="4"/><text x="92.1082%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (4 samples, 0.04%)</title><rect x="91.8582%" y="421" width="0.0396%" height="15" fill="rgb(232,218,39)" fg:x="9274" fg:w="4"/><text x="92.1082%" y="431.50"></text></g><g><title>__memcmp_avx2_movbe (32 samples, 0.32%)</title><rect x="91.9968%" y="421" width="0.3170%" height="15" fill="rgb(248,166,6)" fg:x="9288" fg:w="32"/><text x="92.2468%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (40 samples, 0.40%)</title><rect x="91.9770%" y="485" width="0.3962%" height="15" fill="rgb(247,89,20)" fg:x="9286" fg:w="40"/><text x="92.2270%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (40 samples, 0.40%)</title><rect x="91.9770%" y="469" width="0.3962%" height="15" fill="rgb(248,130,54)" fg:x="9286" fg:w="40"/><text x="92.2270%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (40 samples, 0.40%)</title><rect x="91.9770%" y="453" width="0.3962%" height="15" fill="rgb(234,196,4)" fg:x="9286" fg:w="40"/><text x="92.2270%" y="463.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (40 samples, 0.40%)</title><rect x="91.9770%" y="437" width="0.3962%" height="15" fill="rgb(250,143,31)" fg:x="9286" fg:w="40"/><text x="92.2270%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (6 samples, 0.06%)</title><rect x="92.3138%" y="421" width="0.0594%" height="15" fill="rgb(211,110,34)" fg:x="9320" fg:w="6"/><text x="92.5638%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (55 samples, 0.54%)</title><rect x="91.8978%" y="549" width="0.5448%" height="15" fill="rgb(215,124,48)" fg:x="9278" fg:w="55"/><text x="92.1478%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (55 samples, 0.54%)</title><rect x="91.8978%" y="533" width="0.5448%" height="15" fill="rgb(216,46,13)" fg:x="9278" fg:w="55"/><text x="92.1478%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (54 samples, 0.53%)</title><rect x="91.9077%" y="517" width="0.5349%" height="15" fill="rgb(205,184,25)" fg:x="9279" fg:w="54"/><text x="92.1577%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (54 samples, 0.53%)</title><rect x="91.9077%" y="501" width="0.5349%" height="15" fill="rgb(228,1,10)" fg:x="9279" fg:w="54"/><text x="92.1577%" y="511.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (7 samples, 0.07%)</title><rect x="92.3732%" y="485" width="0.0693%" height="15" fill="rgb(213,116,27)" fg:x="9326" fg:w="7"/><text x="92.6232%" y="495.50"></text></g><g><title>graph::Model::get_name_for_id (69 samples, 0.68%)</title><rect x="91.7888%" y="565" width="0.6834%" height="15" fill="rgb(241,95,50)" fg:x="9267" fg:w="69"/><text x="92.0388%" y="575.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (2 samples, 0.02%)</title><rect x="92.4525%" y="549" width="0.0198%" height="15" fill="rgb(238,48,32)" fg:x="9334" fg:w="2"/><text x="92.7025%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (2 samples, 0.02%)</title><rect x="92.4525%" y="533" width="0.0198%" height="15" fill="rgb(235,113,49)" fg:x="9334" fg:w="2"/><text x="92.7025%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (2 samples, 0.02%)</title><rect x="92.4525%" y="517" width="0.0198%" height="15" fill="rgb(205,127,43)" fg:x="9334" fg:w="2"/><text x="92.7025%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="92.4525%" y="501" width="0.0198%" height="15" fill="rgb(250,162,2)" fg:x="9334" fg:w="2"/><text x="92.7025%" y="511.50"></text></g><g><title>machine::Machine::log_step (153 samples, 1.52%)</title><rect x="91.0162%" y="581" width="1.5155%" height="15" fill="rgb(220,13,41)" fg:x="9189" fg:w="153"/><text x="91.2662%" y="591.50"></text></g><g><title>machine::Profile::push (6 samples, 0.06%)</title><rect x="92.4723%" y="565" width="0.0594%" height="15" fill="rgb(249,221,25)" fg:x="9336" fg:w="6"/><text x="92.7223%" y="575.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (6 samples, 0.06%)</title><rect x="92.4723%" y="549" width="0.0594%" height="15" fill="rgb(215,208,19)" fg:x="9336" fg:w="6"/><text x="92.7223%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (6 samples, 0.06%)</title><rect x="92.4723%" y="533" width="0.0594%" height="15" fill="rgb(236,175,2)" fg:x="9336" fg:w="6"/><text x="92.7223%" y="543.50"></text></g><g><title>core::ptr::write (6 samples, 0.06%)</title><rect x="92.4723%" y="517" width="0.0594%" height="15" fill="rgb(241,52,2)" fg:x="9336" fg:w="6"/><text x="92.7223%" y="527.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="501" width="0.0396%" height="15" fill="rgb(248,140,14)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="511.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="485" width="0.0396%" height="15" fill="rgb(253,22,42)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="495.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="469" width="0.0396%" height="15" fill="rgb(234,61,47)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="479.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="453" width="0.0396%" height="15" fill="rgb(208,226,15)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="463.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="437" width="0.0396%" height="15" fill="rgb(217,221,4)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="447.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="421" width="0.0396%" height="15" fill="rgb(212,174,34)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="405" width="0.0396%" height="15" fill="rgb(253,83,4)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="389" width="0.0396%" height="15" fill="rgb(250,195,49)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="399.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="92.4921%" y="373" width="0.0396%" height="15" fill="rgb(241,192,25)" fg:x="9338" fg:w="4"/><text x="92.7421%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="92.5020%" y="357" width="0.0297%" height="15" fill="rgb(208,124,10)" fg:x="9339" fg:w="3"/><text x="92.7520%" y="367.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="92.5020%" y="341" width="0.0297%" height="15" fill="rgb(222,33,0)" fg:x="9339" fg:w="3"/><text x="92.7520%" y="351.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="92.5020%" y="325" width="0.0297%" height="15" fill="rgb(234,209,28)" fg:x="9339" fg:w="3"/><text x="92.7520%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="92.5119%" y="309" width="0.0198%" height="15" fill="rgb(224,11,23)" fg:x="9340" fg:w="2"/><text x="92.7619%" y="319.50"></text></g><g><title>__memcmp_avx2_movbe (15 samples, 0.15%)</title><rect x="92.6902%" y="421" width="0.1486%" height="15" fill="rgb(232,99,1)" fg:x="9358" fg:w="15"/><text x="92.9402%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (22 samples, 0.22%)</title><rect x="92.6506%" y="485" width="0.2179%" height="15" fill="rgb(237,95,45)" fg:x="9354" fg:w="22"/><text x="92.9006%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (22 samples, 0.22%)</title><rect x="92.6506%" y="469" width="0.2179%" height="15" fill="rgb(208,109,11)" fg:x="9354" fg:w="22"/><text x="92.9006%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (22 samples, 0.22%)</title><rect x="92.6506%" y="453" width="0.2179%" height="15" fill="rgb(216,190,48)" fg:x="9354" fg:w="22"/><text x="92.9006%" y="463.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (22 samples, 0.22%)</title><rect x="92.6506%" y="437" width="0.2179%" height="15" fill="rgb(251,171,36)" fg:x="9354" fg:w="22"/><text x="92.9006%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (3 samples, 0.03%)</title><rect x="92.8387%" y="421" width="0.0297%" height="15" fill="rgb(230,62,22)" fg:x="9373" fg:w="3"/><text x="93.0887%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (33 samples, 0.33%)</title><rect x="92.5614%" y="549" width="0.3269%" height="15" fill="rgb(225,114,35)" fg:x="9345" fg:w="33"/><text x="92.8114%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (33 samples, 0.33%)</title><rect x="92.5614%" y="533" width="0.3269%" height="15" fill="rgb(215,118,42)" fg:x="9345" fg:w="33"/><text x="92.8114%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (31 samples, 0.31%)</title><rect x="92.5812%" y="517" width="0.3071%" height="15" fill="rgb(243,119,21)" fg:x="9347" fg:w="31"/><text x="92.8312%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (31 samples, 0.31%)</title><rect x="92.5812%" y="501" width="0.3071%" height="15" fill="rgb(252,177,53)" fg:x="9347" fg:w="31"/><text x="92.8312%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,alloc::sync::Arc&lt;graph::Vertex&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="92.8883%" y="549" width="0.0198%" height="15" fill="rgb(237,209,29)" fg:x="9378" fg:w="2"/><text x="93.1383%" y="559.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="92.8883%" y="533" width="0.0198%" height="15" fill="rgb(212,65,23)" fg:x="9378" fg:w="2"/><text x="93.1383%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (2 samples, 0.02%)</title><rect x="92.8883%" y="517" width="0.0198%" height="15" fill="rgb(230,222,46)" fg:x="9378" fg:w="2"/><text x="93.1383%" y="527.50"></text></g><g><title>machine::Machine::run_action (42 samples, 0.42%)</title><rect x="92.5317%" y="581" width="0.4160%" height="15" fill="rgb(215,135,32)" fg:x="9342" fg:w="42"/><text x="92.7817%" y="591.50"></text></g><g><title>machine::Machine::get_actions (42 samples, 0.42%)</title><rect x="92.5317%" y="565" width="0.4160%" height="15" fill="rgb(246,101,22)" fg:x="9342" fg:w="42"/><text x="92.7817%" y="575.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (4 samples, 0.04%)</title><rect x="92.9081%" y="549" width="0.0396%" height="15" fill="rgb(206,107,13)" fg:x="9380" fg:w="4"/><text x="93.1581%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (4 samples, 0.04%)</title><rect x="92.9081%" y="533" width="0.0396%" height="15" fill="rgb(250,100,44)" fg:x="9380" fg:w="4"/><text x="93.1581%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (4 samples, 0.04%)</title><rect x="92.9081%" y="517" width="0.0396%" height="15" fill="rgb(231,147,38)" fg:x="9380" fg:w="4"/><text x="93.1581%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (4 samples, 0.04%)</title><rect x="92.9081%" y="501" width="0.0396%" height="15" fill="rgb(229,8,40)" fg:x="9380" fg:w="4"/><text x="93.1581%" y="511.50"></text></g><g><title>machine::Machine::step (6,848 samples, 67.83%)</title><rect x="25.1288%" y="597" width="67.8288%" height="15" fill="rgb(221,135,30)" fg:x="2537" fg:w="6848"/><text x="25.3788%" y="607.50">machine::Machine::step</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="92.9576%" y="565" width="0.0198%" height="15" fill="rgb(249,193,18)" fg:x="9385" fg:w="2"/><text x="93.2076%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="92.9576%" y="549" width="0.0198%" height="15" fill="rgb(209,133,39)" fg:x="9385" fg:w="2"/><text x="93.2076%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="92.9576%" y="533" width="0.0198%" height="15" fill="rgb(232,100,14)" fg:x="9385" fg:w="2"/><text x="93.2076%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="92.9576%" y="517" width="0.0198%" height="15" fill="rgb(224,185,1)" fg:x="9385" fg:w="2"/><text x="93.2076%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="92.9576%" y="501" width="0.0198%" height="15" fill="rgb(223,139,8)" fg:x="9385" fg:w="2"/><text x="93.2076%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="92.9576%" y="485" width="0.0198%" height="15" fill="rgb(232,213,38)" fg:x="9385" fg:w="2"/><text x="93.2076%" y="495.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="92.9576%" y="469" width="0.0198%" height="15" fill="rgb(207,94,22)" fg:x="9385" fg:w="2"/><text x="93.2076%" y="479.50"></text></g><g><title>serde_json::ser::Formatter::begin_string (2 samples, 0.02%)</title><rect x="93.0368%" y="421" width="0.0198%" height="15" fill="rgb(219,183,54)" fg:x="9393" fg:w="2"/><text x="93.2868%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.02%)</title><rect x="93.0368%" y="405" width="0.0198%" height="15" fill="rgb(216,185,54)" fg:x="9393" fg:w="2"/><text x="93.2868%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.02%)</title><rect x="93.0368%" y="389" width="0.0198%" height="15" fill="rgb(254,217,39)" fg:x="9393" fg:w="2"/><text x="93.2868%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="93.0368%" y="373" width="0.0198%" height="15" fill="rgb(240,178,23)" fg:x="9393" fg:w="2"/><text x="93.2868%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="93.0368%" y="357" width="0.0198%" height="15" fill="rgb(218,11,47)" fg:x="9393" fg:w="2"/><text x="93.2868%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="93.0368%" y="341" width="0.0198%" height="15" fill="rgb(218,51,51)" fg:x="9393" fg:w="2"/><text x="93.2868%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="93.1557%" y="309" width="0.0198%" height="15" fill="rgb(238,126,27)" fg:x="9405" fg:w="2"/><text x="93.4057%" y="319.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="93.1557%" y="293" width="0.0198%" height="15" fill="rgb(249,202,22)" fg:x="9405" fg:w="2"/><text x="93.4057%" y="303.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (17 samples, 0.17%)</title><rect x="93.0170%" y="501" width="0.1684%" height="15" fill="rgb(254,195,49)" fg:x="9391" fg:w="17"/><text x="93.2670%" y="511.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (17 samples, 0.17%)</title><rect x="93.0170%" y="485" width="0.1684%" height="15" fill="rgb(208,123,14)" fg:x="9391" fg:w="17"/><text x="93.2670%" y="495.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (17 samples, 0.17%)</title><rect x="93.0170%" y="469" width="0.1684%" height="15" fill="rgb(224,200,8)" fg:x="9391" fg:w="17"/><text x="93.2670%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (17 samples, 0.17%)</title><rect x="93.0170%" y="453" width="0.1684%" height="15" fill="rgb(217,61,36)" fg:x="9391" fg:w="17"/><text x="93.2670%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (17 samples, 0.17%)</title><rect x="93.0170%" y="437" width="0.1684%" height="15" fill="rgb(206,35,45)" fg:x="9391" fg:w="17"/><text x="93.2670%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (13 samples, 0.13%)</title><rect x="93.0567%" y="421" width="0.1288%" height="15" fill="rgb(217,65,33)" fg:x="9395" fg:w="13"/><text x="93.3067%" y="431.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (3 samples, 0.03%)</title><rect x="93.1557%" y="405" width="0.0297%" height="15" fill="rgb(222,158,48)" fg:x="9405" fg:w="3"/><text x="93.4057%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (3 samples, 0.03%)</title><rect x="93.1557%" y="389" width="0.0297%" height="15" fill="rgb(254,2,54)" fg:x="9405" fg:w="3"/><text x="93.4057%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (3 samples, 0.03%)</title><rect x="93.1557%" y="373" width="0.0297%" height="15" fill="rgb(250,143,38)" fg:x="9405" fg:w="3"/><text x="93.4057%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (3 samples, 0.03%)</title><rect x="93.1557%" y="357" width="0.0297%" height="15" fill="rgb(248,25,0)" fg:x="9405" fg:w="3"/><text x="93.4057%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (3 samples, 0.03%)</title><rect x="93.1557%" y="341" width="0.0297%" height="15" fill="rgb(206,152,27)" fg:x="9405" fg:w="3"/><text x="93.4057%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (3 samples, 0.03%)</title><rect x="93.1557%" y="325" width="0.0297%" height="15" fill="rgb(240,77,30)" fg:x="9405" fg:w="3"/><text x="93.4057%" y="335.50"></text></g><g><title>serde_json::ser::Formatter::end_string (197 samples, 1.95%)</title><rect x="93.1953%" y="357" width="1.9513%" height="15" fill="rgb(231,5,3)" fg:x="9409" fg:w="197"/><text x="93.4453%" y="367.50">s..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (197 samples, 1.95%)</title><rect x="93.1953%" y="341" width="1.9513%" height="15" fill="rgb(207,226,32)" fg:x="9409" fg:w="197"/><text x="93.4453%" y="351.50">s..</text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (197 samples, 1.95%)</title><rect x="93.1953%" y="325" width="1.9513%" height="15" fill="rgb(222,207,47)" fg:x="9409" fg:w="197"/><text x="93.4453%" y="335.50">s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (197 samples, 1.95%)</title><rect x="93.1953%" y="309" width="1.9513%" height="15" fill="rgb(229,115,45)" fg:x="9409" fg:w="197"/><text x="93.4453%" y="319.50">a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (197 samples, 1.95%)</title><rect x="93.1953%" y="293" width="1.9513%" height="15" fill="rgb(224,191,6)" fg:x="9409" fg:w="197"/><text x="93.4453%" y="303.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (197 samples, 1.95%)</title><rect x="93.1953%" y="277" width="1.9513%" height="15" fill="rgb(230,227,24)" fg:x="9409" fg:w="197"/><text x="93.4453%" y="287.50">a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (195 samples, 1.93%)</title><rect x="93.2151%" y="261" width="1.9315%" height="15" fill="rgb(228,80,19)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="271.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (195 samples, 1.93%)</title><rect x="93.2151%" y="245" width="1.9315%" height="15" fill="rgb(247,229,0)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="255.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (195 samples, 1.93%)</title><rect x="93.2151%" y="229" width="1.9315%" height="15" fill="rgb(237,194,15)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="239.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (195 samples, 1.93%)</title><rect x="93.2151%" y="213" width="1.9315%" height="15" fill="rgb(219,203,20)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="223.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (195 samples, 1.93%)</title><rect x="93.2151%" y="197" width="1.9315%" height="15" fill="rgb(234,128,8)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="207.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (195 samples, 1.93%)</title><rect x="93.2151%" y="181" width="1.9315%" height="15" fill="rgb(248,202,8)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="191.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (195 samples, 1.93%)</title><rect x="93.2151%" y="165" width="1.9315%" height="15" fill="rgb(206,104,37)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="175.50">a..</text></g><g><title>alloc::alloc::realloc (195 samples, 1.93%)</title><rect x="93.2151%" y="149" width="1.9315%" height="15" fill="rgb(223,8,27)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="159.50">a..</text></g><g><title>__GI___libc_realloc (195 samples, 1.93%)</title><rect x="93.2151%" y="133" width="1.9315%" height="15" fill="rgb(216,217,28)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="143.50">_..</text></g><g><title>_int_realloc (195 samples, 1.93%)</title><rect x="93.2151%" y="117" width="1.9315%" height="15" fill="rgb(249,199,1)" fg:x="9411" fg:w="195"/><text x="93.4651%" y="127.50">_..</text></g><g><title>_int_malloc (194 samples, 1.92%)</title><rect x="93.2250%" y="101" width="1.9216%" height="15" fill="rgb(240,85,17)" fg:x="9412" fg:w="194"/><text x="93.4750%" y="111.50">_..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (199 samples, 1.97%)</title><rect x="93.1953%" y="437" width="1.9711%" height="15" fill="rgb(206,108,45)" fg:x="9409" fg:w="199"/><text x="93.4453%" y="447.50">&lt;..</text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (199 samples, 1.97%)</title><rect x="93.1953%" y="421" width="1.9711%" height="15" fill="rgb(245,210,41)" fg:x="9409" fg:w="199"/><text x="93.4453%" y="431.50">s..</text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (199 samples, 1.97%)</title><rect x="93.1953%" y="405" width="1.9711%" height="15" fill="rgb(206,13,37)" fg:x="9409" fg:w="199"/><text x="93.4453%" y="415.50">&lt;..</text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (199 samples, 1.97%)</title><rect x="93.1953%" y="389" width="1.9711%" height="15" fill="rgb(250,61,18)" fg:x="9409" fg:w="199"/><text x="93.4453%" y="399.50">&lt;..</text></g><g><title>serde_json::ser::format_escaped_str (199 samples, 1.97%)</title><rect x="93.1953%" y="373" width="1.9711%" height="15" fill="rgb(235,172,48)" fg:x="9409" fg:w="199"/><text x="93.4453%" y="383.50">s..</text></g><g><title>serde_json::ser::format_escaped_str_contents (2 samples, 0.02%)</title><rect x="95.1466%" y="357" width="0.0198%" height="15" fill="rgb(249,201,17)" fg:x="9606" fg:w="2"/><text x="95.3966%" y="367.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (7 samples, 0.07%)</title><rect x="95.1664%" y="421" width="0.0693%" height="15" fill="rgb(219,208,6)" fg:x="9608" fg:w="7"/><text x="95.4164%" y="431.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (7 samples, 0.07%)</title><rect x="95.1664%" y="405" width="0.0693%" height="15" fill="rgb(248,31,23)" fg:x="9608" fg:w="7"/><text x="95.4164%" y="415.50"></text></g><g><title>serde_json::ser::format_escaped_str (7 samples, 0.07%)</title><rect x="95.1664%" y="389" width="0.0693%" height="15" fill="rgb(245,15,42)" fg:x="9608" fg:w="7"/><text x="95.4164%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (7 samples, 0.07%)</title><rect x="95.1664%" y="373" width="0.0693%" height="15" fill="rgb(222,217,39)" fg:x="9608" fg:w="7"/><text x="95.4164%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (2 samples, 0.02%)</title><rect x="95.2357%" y="261" width="0.0198%" height="15" fill="rgb(210,219,27)" fg:x="9615" fg:w="2"/><text x="95.4857%" y="271.50"></text></g><g><title>_int_realloc (139 samples, 1.38%)</title><rect x="95.2555%" y="181" width="1.3768%" height="15" fill="rgb(252,166,36)" fg:x="9617" fg:w="139"/><text x="95.5055%" y="191.50"></text></g><g><title>_int_malloc (137 samples, 1.36%)</title><rect x="95.2754%" y="165" width="1.3570%" height="15" fill="rgb(245,132,34)" fg:x="9619" fg:w="137"/><text x="95.5254%" y="175.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (142 samples, 1.41%)</title><rect x="95.2357%" y="325" width="1.4065%" height="15" fill="rgb(236,54,3)" fg:x="9615" fg:w="142"/><text x="95.4857%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (142 samples, 1.41%)</title><rect x="95.2357%" y="309" width="1.4065%" height="15" fill="rgb(241,173,43)" fg:x="9615" fg:w="142"/><text x="95.4857%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (142 samples, 1.41%)</title><rect x="95.2357%" y="293" width="1.4065%" height="15" fill="rgb(215,190,9)" fg:x="9615" fg:w="142"/><text x="95.4857%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (142 samples, 1.41%)</title><rect x="95.2357%" y="277" width="1.4065%" height="15" fill="rgb(242,101,16)" fg:x="9615" fg:w="142"/><text x="95.4857%" y="287.50"></text></g><g><title>alloc::raw_vec::finish_grow (140 samples, 1.39%)</title><rect x="95.2555%" y="261" width="1.3867%" height="15" fill="rgb(223,190,21)" fg:x="9617" fg:w="140"/><text x="95.5055%" y="271.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (140 samples, 1.39%)</title><rect x="95.2555%" y="245" width="1.3867%" height="15" fill="rgb(215,228,25)" fg:x="9617" fg:w="140"/><text x="95.5055%" y="255.50"></text></g><g><title>alloc::alloc::Global::grow_impl (140 samples, 1.39%)</title><rect x="95.2555%" y="229" width="1.3867%" height="15" fill="rgb(225,36,22)" fg:x="9617" fg:w="140"/><text x="95.5055%" y="239.50"></text></g><g><title>alloc::alloc::realloc (140 samples, 1.39%)</title><rect x="95.2555%" y="213" width="1.3867%" height="15" fill="rgb(251,106,46)" fg:x="9617" fg:w="140"/><text x="95.5055%" y="223.50"></text></g><g><title>__GI___libc_realloc (140 samples, 1.39%)</title><rect x="95.2555%" y="197" width="1.3867%" height="15" fill="rgb(208,90,1)" fg:x="9617" fg:w="140"/><text x="95.5055%" y="207.50"></text></g><g><title>machine::_::&lt;impl serde::ser::Serialize for machine::Position&gt;::serialize (350 samples, 3.47%)</title><rect x="93.1854%" y="485" width="3.4667%" height="15" fill="rgb(243,10,4)" fg:x="9408" fg:w="350"/><text x="93.4354%" y="495.50">mac..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (350 samples, 3.47%)</title><rect x="93.1854%" y="469" width="3.4667%" height="15" fill="rgb(212,137,27)" fg:x="9408" fg:w="350"/><text x="93.4354%" y="479.50">&lt;se..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (350 samples, 3.47%)</title><rect x="93.1854%" y="453" width="3.4667%" height="15" fill="rgb(231,220,49)" fg:x="9408" fg:w="350"/><text x="93.4354%" y="463.50">ser..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (150 samples, 1.49%)</title><rect x="95.1664%" y="437" width="1.4857%" height="15" fill="rgb(237,96,20)" fg:x="9608" fg:w="150"/><text x="95.4164%" y="447.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (143 samples, 1.42%)</title><rect x="95.2357%" y="421" width="1.4164%" height="15" fill="rgb(239,229,30)" fg:x="9615" fg:w="143"/><text x="95.4857%" y="431.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (143 samples, 1.42%)</title><rect x="95.2357%" y="405" width="1.4164%" height="15" fill="rgb(219,65,33)" fg:x="9615" fg:w="143"/><text x="95.4857%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (143 samples, 1.42%)</title><rect x="95.2357%" y="389" width="1.4164%" height="15" fill="rgb(243,134,7)" fg:x="9615" fg:w="143"/><text x="95.4857%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (143 samples, 1.42%)</title><rect x="95.2357%" y="373" width="1.4164%" height="15" fill="rgb(216,177,54)" fg:x="9615" fg:w="143"/><text x="95.4857%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (143 samples, 1.42%)</title><rect x="95.2357%" y="357" width="1.4164%" height="15" fill="rgb(211,160,20)" fg:x="9615" fg:w="143"/><text x="95.4857%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (143 samples, 1.42%)</title><rect x="95.2357%" y="341" width="1.4164%" height="15" fill="rgb(239,85,39)" fg:x="9615" fg:w="143"/><text x="95.4857%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (8 samples, 0.08%)</title><rect x="96.6521%" y="485" width="0.0792%" height="15" fill="rgb(232,125,22)" fg:x="9758" fg:w="8"/><text x="96.9021%" y="495.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (8 samples, 0.08%)</title><rect x="96.6521%" y="469" width="0.0792%" height="15" fill="rgb(244,57,34)" fg:x="9758" fg:w="8"/><text x="96.9021%" y="479.50"></text></g><g><title>serde_json::ser::format_escaped_str (8 samples, 0.08%)</title><rect x="96.6521%" y="453" width="0.0792%" height="15" fill="rgb(214,203,32)" fg:x="9758" fg:w="8"/><text x="96.9021%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (5 samples, 0.05%)</title><rect x="96.6819%" y="437" width="0.0495%" height="15" fill="rgb(207,58,43)" fg:x="9761" fg:w="5"/><text x="96.9319%" y="447.50"></text></g><g><title>serde_json::ser::to_string (382 samples, 3.78%)</title><rect x="92.9576%" y="597" width="3.7837%" height="15" fill="rgb(215,193,15)" fg:x="9385" fg:w="382"/><text x="93.2076%" y="607.50">serd..</text></g><g><title>serde_json::ser::to_vec (382 samples, 3.78%)</title><rect x="92.9576%" y="581" width="3.7837%" height="15" fill="rgb(232,15,44)" fg:x="9385" fg:w="382"/><text x="93.2076%" y="591.50">serd..</text></g><g><title>serde_json::ser::to_writer (380 samples, 3.76%)</title><rect x="92.9774%" y="565" width="3.7639%" height="15" fill="rgb(212,3,48)" fg:x="9387" fg:w="380"/><text x="93.2274%" y="575.50">serd..</text></g><g><title>machine::_::&lt;impl serde::ser::Serialize for machine::Step&gt;::serialize (380 samples, 3.76%)</title><rect x="92.9774%" y="549" width="3.7639%" height="15" fill="rgb(218,128,7)" fg:x="9387" fg:w="380"/><text x="93.2274%" y="559.50">mach..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (379 samples, 3.75%)</title><rect x="92.9873%" y="533" width="3.7540%" height="15" fill="rgb(226,216,39)" fg:x="9388" fg:w="379"/><text x="93.2373%" y="543.50">&lt;ser..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (377 samples, 3.73%)</title><rect x="93.0071%" y="517" width="3.7342%" height="15" fill="rgb(243,47,51)" fg:x="9390" fg:w="377"/><text x="93.2571%" y="527.50">serd..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (359 samples, 3.56%)</title><rect x="93.1854%" y="501" width="3.5559%" height="15" fill="rgb(241,183,40)" fg:x="9408" fg:w="359"/><text x="93.4354%" y="511.50">&lt;ser..</text></g><g><title>__GI___libc_write (313 samples, 3.10%)</title><rect x="96.7710%" y="373" width="3.1002%" height="15" fill="rgb(231,217,32)" fg:x="9770" fg:w="313"/><text x="97.0210%" y="383.50">__G..</text></g><g><title>[unknown] (308 samples, 3.05%)</title><rect x="96.8205%" y="357" width="3.0507%" height="15" fill="rgb(229,61,38)" fg:x="9775" fg:w="308"/><text x="97.0705%" y="367.50">[un..</text></g><g><title>[unknown] (299 samples, 2.96%)</title><rect x="96.9097%" y="341" width="2.9616%" height="15" fill="rgb(225,210,5)" fg:x="9784" fg:w="299"/><text x="97.1597%" y="351.50">[un..</text></g><g><title>[unknown] (294 samples, 2.91%)</title><rect x="96.9592%" y="325" width="2.9120%" height="15" fill="rgb(231,79,45)" fg:x="9789" fg:w="294"/><text x="97.2092%" y="335.50">[u..</text></g><g><title>[unknown] (289 samples, 2.86%)</title><rect x="97.0087%" y="309" width="2.8625%" height="15" fill="rgb(224,100,7)" fg:x="9794" fg:w="289"/><text x="97.2587%" y="319.50">[u..</text></g><g><title>[unknown] (281 samples, 2.78%)</title><rect x="97.0880%" y="293" width="2.7833%" height="15" fill="rgb(241,198,18)" fg:x="9802" fg:w="281"/><text x="97.3380%" y="303.50">[u..</text></g><g><title>[unknown] (274 samples, 2.71%)</title><rect x="97.1573%" y="277" width="2.7139%" height="15" fill="rgb(252,97,53)" fg:x="9809" fg:w="274"/><text x="97.4073%" y="287.50">[u..</text></g><g><title>[unknown] (270 samples, 2.67%)</title><rect x="97.1969%" y="261" width="2.6743%" height="15" fill="rgb(220,88,7)" fg:x="9813" fg:w="270"/><text x="97.4469%" y="271.50">[u..</text></g><g><title>[unknown] (268 samples, 2.65%)</title><rect x="97.2167%" y="245" width="2.6545%" height="15" fill="rgb(213,176,14)" fg:x="9815" fg:w="268"/><text x="97.4667%" y="255.50">[u..</text></g><g><title>[unknown] (261 samples, 2.59%)</title><rect x="97.2861%" y="229" width="2.5852%" height="15" fill="rgb(246,73,7)" fg:x="9822" fg:w="261"/><text x="97.5361%" y="239.50">[u..</text></g><g><title>[unknown] (249 samples, 2.47%)</title><rect x="97.4049%" y="213" width="2.4663%" height="15" fill="rgb(245,64,36)" fg:x="9834" fg:w="249"/><text x="97.6549%" y="223.50">[u..</text></g><g><title>[unknown] (173 samples, 1.71%)</title><rect x="98.1577%" y="197" width="1.7135%" height="15" fill="rgb(245,80,10)" fg:x="9910" fg:w="173"/><text x="98.4077%" y="207.50"></text></g><g><title>[unknown] (168 samples, 1.66%)</title><rect x="98.2072%" y="181" width="1.6640%" height="15" fill="rgb(232,107,50)" fg:x="9915" fg:w="168"/><text x="98.4572%" y="191.50"></text></g><g><title>[unknown] (144 samples, 1.43%)</title><rect x="98.4449%" y="165" width="1.4263%" height="15" fill="rgb(253,3,0)" fg:x="9939" fg:w="144"/><text x="98.6949%" y="175.50"></text></g><g><title>[unknown] (123 samples, 1.22%)</title><rect x="98.6529%" y="149" width="1.2183%" height="15" fill="rgb(212,99,53)" fg:x="9960" fg:w="123"/><text x="98.9029%" y="159.50"></text></g><g><title>[unknown] (64 samples, 0.63%)</title><rect x="99.2373%" y="133" width="0.6339%" height="15" fill="rgb(249,111,54)" fg:x="10019" fg:w="64"/><text x="99.4873%" y="143.50"></text></g><g><title>[unknown] (57 samples, 0.56%)</title><rect x="99.3067%" y="117" width="0.5646%" height="15" fill="rgb(249,55,30)" fg:x="10026" fg:w="57"/><text x="99.5567%" y="127.50"></text></g><g><title>[unknown] (36 samples, 0.36%)</title><rect x="99.5147%" y="101" width="0.3566%" height="15" fill="rgb(237,47,42)" fg:x="10047" fg:w="36"/><text x="99.7647%" y="111.50"></text></g><g><title>[unknown] (21 samples, 0.21%)</title><rect x="99.6632%" y="85" width="0.2080%" height="15" fill="rgb(211,20,18)" fg:x="10062" fg:w="21"/><text x="99.9132%" y="95.50"></text></g><g><title>[unknown] (13 samples, 0.13%)</title><rect x="99.7425%" y="69" width="0.1288%" height="15" fill="rgb(231,203,46)" fg:x="10070" fg:w="13"/><text x="99.9925%" y="79.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8514%" y="53" width="0.0198%" height="15" fill="rgb(237,142,3)" fg:x="10081" fg:w="2"/><text x="100.1014%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8514%" y="37" width="0.0198%" height="15" fill="rgb(241,107,1)" fg:x="10081" fg:w="2"/><text x="100.1014%" y="47.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (314 samples, 3.11%)</title><rect x="96.7710%" y="501" width="3.1101%" height="15" fill="rgb(229,83,13)" fg:x="9770" fg:w="314"/><text x="97.0210%" y="511.50">&lt;st..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (314 samples, 3.11%)</title><rect x="96.7710%" y="485" width="3.1101%" height="15" fill="rgb(241,91,40)" fg:x="9770" fg:w="314"/><text x="97.0210%" y="495.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (314 samples, 3.11%)</title><rect x="96.7710%" y="469" width="3.1101%" height="15" fill="rgb(225,3,45)" fg:x="9770" fg:w="314"/><text x="97.0210%" y="479.50">&lt;st..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (314 samples, 3.11%)</title><rect x="96.7710%" y="453" width="3.1101%" height="15" fill="rgb(244,223,14)" fg:x="9770" fg:w="314"/><text x="97.0210%" y="463.50">&lt;st..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (314 samples, 3.11%)</title><rect x="96.7710%" y="437" width="3.1101%" height="15" fill="rgb(224,124,37)" fg:x="9770" fg:w="314"/><text x="97.0210%" y="447.50">std..</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (314 samples, 3.11%)</title><rect x="96.7710%" y="421" width="3.1101%" height="15" fill="rgb(251,171,30)" fg:x="9770" fg:w="314"/><text x="97.0210%" y="431.50">&lt;st..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (314 samples, 3.11%)</title><rect x="96.7710%" y="405" width="3.1101%" height="15" fill="rgb(236,46,54)" fg:x="9770" fg:w="314"/><text x="97.0210%" y="415.50">&lt;st..</text></g><g><title>std::sys::unix::fd::FileDesc::write (314 samples, 3.11%)</title><rect x="96.7710%" y="389" width="3.1101%" height="15" fill="rgb(245,213,5)" fg:x="9770" fg:w="314"/><text x="97.0210%" y="399.50">std..</text></g><g><title>std::io::Write::write_fmt (317 samples, 3.14%)</title><rect x="96.7512%" y="533" width="3.1399%" height="15" fill="rgb(230,144,27)" fg:x="9768" fg:w="317"/><text x="97.0012%" y="543.50">std..</text></g><g><title>core::fmt::write (317 samples, 3.14%)</title><rect x="96.7512%" y="517" width="3.1399%" height="15" fill="rgb(220,86,6)" fg:x="9768" fg:w="317"/><text x="97.0012%" y="527.50">cor..</text></g><g><title>_start (8,355 samples, 82.76%)</title><rect x="17.1553%" y="885" width="82.7555%" height="15" fill="rgb(240,20,13)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="895.50">_start</text></g><g><title>__libc_start_main_impl (8,355 samples, 82.76%)</title><rect x="17.1553%" y="869" width="82.7555%" height="15" fill="rgb(217,89,34)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="879.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (8,355 samples, 82.76%)</title><rect x="17.1553%" y="853" width="82.7555%" height="15" fill="rgb(229,13,5)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="863.50">__libc_start_call_main</text></g><g><title>main (8,355 samples, 82.76%)</title><rect x="17.1553%" y="837" width="82.7555%" height="15" fill="rgb(244,67,35)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="847.50">main</text></g><g><title>std::rt::lang_start_internal (8,355 samples, 82.76%)</title><rect x="17.1553%" y="821" width="82.7555%" height="15" fill="rgb(221,40,2)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="831.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,355 samples, 82.76%)</title><rect x="17.1553%" y="805" width="82.7555%" height="15" fill="rgb(237,157,21)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="815.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,355 samples, 82.76%)</title><rect x="17.1553%" y="789" width="82.7555%" height="15" fill="rgb(222,94,11)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="799.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,355 samples, 82.76%)</title><rect x="17.1553%" y="773" width="82.7555%" height="15" fill="rgb(249,113,6)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="783.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (8,355 samples, 82.76%)</title><rect x="17.1553%" y="757" width="82.7555%" height="15" fill="rgb(238,137,36)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="767.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (8,355 samples, 82.76%)</title><rect x="17.1553%" y="741" width="82.7555%" height="15" fill="rgb(210,102,26)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="751.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,355 samples, 82.76%)</title><rect x="17.1553%" y="725" width="82.7555%" height="15" fill="rgb(218,30,30)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="735.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,355 samples, 82.76%)</title><rect x="17.1553%" y="709" width="82.7555%" height="15" fill="rgb(214,67,26)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="719.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,355 samples, 82.76%)</title><rect x="17.1553%" y="693" width="82.7555%" height="15" fill="rgb(251,9,53)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="703.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (8,355 samples, 82.76%)</title><rect x="17.1553%" y="677" width="82.7555%" height="15" fill="rgb(228,204,25)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="687.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,355 samples, 82.76%)</title><rect x="17.1553%" y="661" width="82.7555%" height="15" fill="rgb(207,153,8)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="671.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,355 samples, 82.76%)</title><rect x="17.1553%" y="645" width="82.7555%" height="15" fill="rgb(242,9,16)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="655.50">core::ops::function::FnOnce::call_once</text></g><g><title>graphwalker::main (8,355 samples, 82.76%)</title><rect x="17.1553%" y="629" width="82.7555%" height="15" fill="rgb(217,211,10)" fg:x="1732" fg:w="8355"/><text x="17.4053%" y="639.50">graphwalker::main</text></g><g><title>machine::Machine::walk (8,354 samples, 82.75%)</title><rect x="17.1652%" y="613" width="82.7456%" height="15" fill="rgb(219,228,52)" fg:x="1733" fg:w="8354"/><text x="17.4152%" y="623.50">machine::Machine::walk</text></g><g><title>std::io::stdio::_print (320 samples, 3.17%)</title><rect x="96.7413%" y="597" width="3.1696%" height="15" fill="rgb(231,92,29)" fg:x="9767" fg:w="320"/><text x="96.9913%" y="607.50">std..</text></g><g><title>std::io::stdio::print_to (320 samples, 3.17%)</title><rect x="96.7413%" y="581" width="3.1696%" height="15" fill="rgb(232,8,23)" fg:x="9767" fg:w="320"/><text x="96.9913%" y="591.50">std..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (320 samples, 3.17%)</title><rect x="96.7413%" y="565" width="3.1696%" height="15" fill="rgb(216,211,34)" fg:x="9767" fg:w="320"/><text x="96.9913%" y="575.50">&lt;st..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (320 samples, 3.17%)</title><rect x="96.7413%" y="549" width="3.1696%" height="15" fill="rgb(236,151,0)" fg:x="9767" fg:w="320"/><text x="96.9913%" y="559.50">&lt;&amp;s..</text></g><g><title>std::io::stdio::Stdout::lock (2 samples, 0.02%)</title><rect x="99.8910%" y="533" width="0.0198%" height="15" fill="rgb(209,168,3)" fg:x="10085" fg:w="2"/><text x="100.1410%" y="543.50"></text></g><g><title>std::sync::remutex::ReentrantMutex&lt;T&gt;::lock (2 samples, 0.02%)</title><rect x="99.8910%" y="517" width="0.0198%" height="15" fill="rgb(208,129,28)" fg:x="10085" fg:w="2"/><text x="100.1410%" y="527.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (2 samples, 0.02%)</title><rect x="99.8910%" y="501" width="0.0198%" height="15" fill="rgb(229,78,22)" fg:x="10085" fg:w="2"/><text x="100.1410%" y="511.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (2 samples, 0.02%)</title><rect x="99.9109%" y="885" width="0.0198%" height="15" fill="rgb(228,187,13)" fg:x="10087" fg:w="2"/><text x="100.1609%" y="895.50"></text></g><g><title>graphwalker (10,091 samples, 99.95%)</title><rect x="0.0000%" y="901" width="99.9505%" height="15" fill="rgb(240,119,24)" fg:x="0" fg:w="10091"/><text x="0.2500%" y="911.50">graphwalker</text></g><g><title>all (10,096 samples, 100%)</title><rect x="0.0000%" y="917" width="100.0000%" height="15" fill="rgb(209,194,42)" fg:x="0" fg:w="10096"/><text x="0.2500%" y="927.50"></text></g><g><title>perf-exec (5 samples, 0.05%)</title><rect x="99.9505%" y="901" width="0.0495%" height="15" fill="rgb(247,200,46)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="911.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="885" width="0.0495%" height="15" fill="rgb(218,76,16)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="869" width="0.0495%" height="15" fill="rgb(225,21,48)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="853" width="0.0495%" height="15" fill="rgb(239,223,50)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="837" width="0.0495%" height="15" fill="rgb(244,45,21)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="821" width="0.0495%" height="15" fill="rgb(232,33,43)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="805" width="0.0495%" height="15" fill="rgb(209,8,3)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="789" width="0.0495%" height="15" fill="rgb(214,25,53)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="773" width="0.0495%" height="15" fill="rgb(254,186,54)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="757" width="0.0495%" height="15" fill="rgb(208,174,49)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="741" width="0.0495%" height="15" fill="rgb(233,191,51)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="725" width="0.0495%" height="15" fill="rgb(222,134,10)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="709" width="0.0495%" height="15" fill="rgb(230,226,20)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="693" width="0.0495%" height="15" fill="rgb(251,111,25)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="677" width="0.0495%" height="15" fill="rgb(224,40,46)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9505%" y="661" width="0.0495%" height="15" fill="rgb(236,108,47)" fg:x="10091" fg:w="5"/><text x="100.2005%" y="671.50"></text></g></svg></svg>