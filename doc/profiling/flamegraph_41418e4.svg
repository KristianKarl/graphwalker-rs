<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="10086"><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="0.0198%" y="789" width="0.0198%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="2"/><text x="0.2698%" y="799.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="0.0198%" y="773" width="0.0198%" height="15" fill="rgb(217,0,24)" fg:x="2" fg:w="2"/><text x="0.2698%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="0.0198%" y="757" width="0.0198%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.2698%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="0.0198%" y="741" width="0.0198%" height="15" fill="rgb(248,212,6)" fg:x="2" fg:w="2"/><text x="0.2698%" y="751.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="0.0198%" y="725" width="0.0198%" height="15" fill="rgb(208,68,35)" fg:x="2" fg:w="2"/><text x="0.2698%" y="735.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="0.0198%" y="709" width="0.0198%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="2"/><text x="0.2698%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (9 samples, 0.09%)</title><rect x="0.0000%" y="869" width="0.0892%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="9"/><text x="0.2500%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.07%)</title><rect x="0.0198%" y="853" width="0.0694%" height="15" fill="rgb(228,23,34)" fg:x="2" fg:w="7"/><text x="0.2698%" y="863.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.07%)</title><rect x="0.0198%" y="837" width="0.0694%" height="15" fill="rgb(218,30,26)" fg:x="2" fg:w="7"/><text x="0.2698%" y="847.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.07%)</title><rect x="0.0198%" y="821" width="0.0694%" height="15" fill="rgb(220,122,19)" fg:x="2" fg:w="7"/><text x="0.2698%" y="831.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.07%)</title><rect x="0.0198%" y="805" width="0.0694%" height="15" fill="rgb(250,228,42)" fg:x="2" fg:w="7"/><text x="0.2698%" y="815.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (5 samples, 0.05%)</title><rect x="0.0397%" y="789" width="0.0496%" height="15" fill="rgb(240,193,28)" fg:x="4" fg:w="5"/><text x="0.2897%" y="799.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.05%)</title><rect x="0.0397%" y="773" width="0.0496%" height="15" fill="rgb(216,20,37)" fg:x="4" fg:w="5"/><text x="0.2897%" y="783.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (15 samples, 0.15%)</title><rect x="0.0892%" y="853" width="0.1487%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="15"/><text x="0.3392%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.18%)</title><rect x="0.2380%" y="853" width="0.1785%" height="15" fill="rgb(217,207,13)" fg:x="24" fg:w="18"/><text x="0.4880%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (38 samples, 0.38%)</title><rect x="1.3781%" y="773" width="0.3768%" height="15" fill="rgb(231,73,38)" fg:x="139" fg:w="38"/><text x="1.6281%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (38 samples, 0.38%)</title><rect x="1.3781%" y="757" width="0.3768%" height="15" fill="rgb(225,20,46)" fg:x="139" fg:w="38"/><text x="1.6281%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (38 samples, 0.38%)</title><rect x="1.3781%" y="741" width="0.3768%" height="15" fill="rgb(210,31,41)" fg:x="139" fg:w="38"/><text x="1.6281%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (38 samples, 0.38%)</title><rect x="1.3781%" y="725" width="0.3768%" height="15" fill="rgb(221,200,47)" fg:x="139" fg:w="38"/><text x="1.6281%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (38 samples, 0.38%)</title><rect x="1.3781%" y="709" width="0.3768%" height="15" fill="rgb(226,26,5)" fg:x="139" fg:w="38"/><text x="1.6281%" y="719.50"></text></g><g><title>alloc::alloc::alloc (38 samples, 0.38%)</title><rect x="1.3781%" y="693" width="0.3768%" height="15" fill="rgb(249,33,26)" fg:x="139" fg:w="38"/><text x="1.6281%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (223 samples, 2.21%)</title><rect x="0.4164%" y="853" width="2.2110%" height="15" fill="rgb(235,183,28)" fg:x="42" fg:w="223"/><text x="0.6664%" y="863.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (126 samples, 1.25%)</title><rect x="1.3781%" y="837" width="1.2493%" height="15" fill="rgb(221,5,38)" fg:x="139" fg:w="126"/><text x="1.6281%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (126 samples, 1.25%)</title><rect x="1.3781%" y="821" width="1.2493%" height="15" fill="rgb(247,18,42)" fg:x="139" fg:w="126"/><text x="1.6281%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (126 samples, 1.25%)</title><rect x="1.3781%" y="805" width="1.2493%" height="15" fill="rgb(241,131,45)" fg:x="139" fg:w="126"/><text x="1.6281%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (126 samples, 1.25%)</title><rect x="1.3781%" y="789" width="1.2493%" height="15" fill="rgb(249,31,29)" fg:x="139" fg:w="126"/><text x="1.6281%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (88 samples, 0.87%)</title><rect x="1.7549%" y="773" width="0.8725%" height="15" fill="rgb(225,111,53)" fg:x="177" fg:w="88"/><text x="2.0049%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (88 samples, 0.87%)</title><rect x="1.7549%" y="757" width="0.8725%" height="15" fill="rgb(238,160,17)" fg:x="177" fg:w="88"/><text x="2.0049%" y="767.50"></text></g><g><title>[graphwalker] (50 samples, 0.50%)</title><rect x="2.6274%" y="853" width="0.4957%" height="15" fill="rgb(214,148,48)" fg:x="265" fg:w="50"/><text x="2.8774%" y="863.50"></text></g><g><title>_int_free (50 samples, 0.50%)</title><rect x="2.6274%" y="837" width="0.4957%" height="15" fill="rgb(232,36,49)" fg:x="265" fg:w="50"/><text x="2.8774%" y="847.50"></text></g><g><title>__GI___libc_free (84 samples, 0.83%)</title><rect x="3.1231%" y="853" width="0.8328%" height="15" fill="rgb(209,103,24)" fg:x="315" fg:w="84"/><text x="3.3731%" y="863.50"></text></g><g><title>__GI___libc_malloc (128 samples, 1.27%)</title><rect x="3.9560%" y="853" width="1.2691%" height="15" fill="rgb(229,88,8)" fg:x="399" fg:w="128"/><text x="4.2060%" y="863.50"></text></g><g><title>__memcmp_avx2_movbe (30 samples, 0.30%)</title><rect x="5.2251%" y="853" width="0.2974%" height="15" fill="rgb(213,181,19)" fg:x="527" fg:w="30"/><text x="5.4751%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (23 samples, 0.23%)</title><rect x="5.5225%" y="853" width="0.2280%" height="15" fill="rgb(254,191,54)" fg:x="557" fg:w="23"/><text x="5.7725%" y="863.50"></text></g><g><title>_int_free (86 samples, 0.85%)</title><rect x="5.7505%" y="853" width="0.8527%" height="15" fill="rgb(241,83,37)" fg:x="580" fg:w="86"/><text x="6.0005%" y="863.50"></text></g><g><title>_int_malloc (10 samples, 0.10%)</title><rect x="6.6032%" y="853" width="0.0991%" height="15" fill="rgb(233,36,39)" fg:x="666" fg:w="10"/><text x="6.8532%" y="863.50"></text></g><g><title>[[heap]] (763 samples, 7.56%)</title><rect x="0.0892%" y="869" width="7.5649%" height="15" fill="rgb(226,3,54)" fg:x="9" fg:w="763"/><text x="0.3392%" y="879.50">[[heap]]</text></g><g><title>core::ptr::drop_in_place&lt;machine::Context&gt; (96 samples, 0.95%)</title><rect x="6.7024%" y="853" width="0.9518%" height="15" fill="rgb(245,192,40)" fg:x="676" fg:w="96"/><text x="6.9524%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,u32&gt;&gt; (96 samples, 0.95%)</title><rect x="6.7024%" y="837" width="0.9518%" height="15" fill="rgb(238,167,29)" fg:x="676" fg:w="96"/><text x="6.9524%" y="847.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.95%)</title><rect x="6.7024%" y="821" width="0.9518%" height="15" fill="rgb(232,182,51)" fg:x="676" fg:w="96"/><text x="6.9524%" y="831.50"></text></g><g><title>core::mem::drop (96 samples, 0.95%)</title><rect x="6.7024%" y="805" width="0.9518%" height="15" fill="rgb(231,60,39)" fg:x="676" fg:w="96"/><text x="6.9524%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,u32&gt;&gt; (96 samples, 0.95%)</title><rect x="6.7024%" y="789" width="0.9518%" height="15" fill="rgb(208,69,12)" fg:x="676" fg:w="96"/><text x="6.9524%" y="799.50"></text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (96 samples, 0.95%)</title><rect x="6.7024%" y="773" width="0.9518%" height="15" fill="rgb(235,93,37)" fg:x="676" fg:w="96"/><text x="6.9524%" y="783.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (68 samples, 0.67%)</title><rect x="6.9800%" y="757" width="0.6742%" height="15" fill="rgb(213,116,39)" fg:x="704" fg:w="68"/><text x="7.2300%" y="767.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (68 samples, 0.67%)</title><rect x="6.9800%" y="741" width="0.6742%" height="15" fill="rgb(222,207,29)" fg:x="704" fg:w="68"/><text x="7.2300%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (68 samples, 0.67%)</title><rect x="6.9800%" y="725" width="0.6742%" height="15" fill="rgb(206,96,30)" fg:x="704" fg:w="68"/><text x="7.2300%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (68 samples, 0.67%)</title><rect x="6.9800%" y="709" width="0.6742%" height="15" fill="rgb(218,138,4)" fg:x="704" fg:w="68"/><text x="7.2300%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (68 samples, 0.67%)</title><rect x="6.9800%" y="693" width="0.6742%" height="15" fill="rgb(250,191,14)" fg:x="704" fg:w="68"/><text x="7.2300%" y="703.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (68 samples, 0.67%)</title><rect x="6.9800%" y="677" width="0.6742%" height="15" fill="rgb(239,60,40)" fg:x="704" fg:w="68"/><text x="7.2300%" y="687.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (68 samples, 0.67%)</title><rect x="6.9800%" y="661" width="0.6742%" height="15" fill="rgb(206,27,48)" fg:x="704" fg:w="68"/><text x="7.2300%" y="671.50"></text></g><g><title>alloc::alloc::dealloc (68 samples, 0.67%)</title><rect x="6.9800%" y="645" width="0.6742%" height="15" fill="rgb(225,35,8)" fg:x="704" fg:w="68"/><text x="7.2300%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (27 samples, 0.27%)</title><rect x="7.9615%" y="773" width="0.2677%" height="15" fill="rgb(250,213,24)" fg:x="803" fg:w="27"/><text x="8.2115%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (27 samples, 0.27%)</title><rect x="7.9615%" y="757" width="0.2677%" height="15" fill="rgb(247,123,22)" fg:x="803" fg:w="27"/><text x="8.2115%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (27 samples, 0.27%)</title><rect x="7.9615%" y="741" width="0.2677%" height="15" fill="rgb(231,138,38)" fg:x="803" fg:w="27"/><text x="8.2115%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (27 samples, 0.27%)</title><rect x="7.9615%" y="725" width="0.2677%" height="15" fill="rgb(231,145,46)" fg:x="803" fg:w="27"/><text x="8.2115%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (27 samples, 0.27%)</title><rect x="7.9615%" y="709" width="0.2677%" height="15" fill="rgb(251,118,11)" fg:x="803" fg:w="27"/><text x="8.2115%" y="719.50"></text></g><g><title>alloc::alloc::alloc (27 samples, 0.27%)</title><rect x="7.9615%" y="693" width="0.2677%" height="15" fill="rgb(217,147,25)" fg:x="803" fg:w="27"/><text x="8.2115%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (114 samples, 1.13%)</title><rect x="7.6542%" y="853" width="1.1303%" height="15" fill="rgb(247,81,37)" fg:x="772" fg:w="114"/><text x="7.9042%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (83 samples, 0.82%)</title><rect x="7.9615%" y="837" width="0.8229%" height="15" fill="rgb(209,12,38)" fg:x="803" fg:w="83"/><text x="8.2115%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (83 samples, 0.82%)</title><rect x="7.9615%" y="821" width="0.8229%" height="15" fill="rgb(227,1,9)" fg:x="803" fg:w="83"/><text x="8.2115%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (83 samples, 0.82%)</title><rect x="7.9615%" y="805" width="0.8229%" height="15" fill="rgb(248,47,43)" fg:x="803" fg:w="83"/><text x="8.2115%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (83 samples, 0.82%)</title><rect x="7.9615%" y="789" width="0.8229%" height="15" fill="rgb(221,10,30)" fg:x="803" fg:w="83"/><text x="8.2115%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (56 samples, 0.56%)</title><rect x="8.2292%" y="773" width="0.5552%" height="15" fill="rgb(210,229,1)" fg:x="830" fg:w="56"/><text x="8.4792%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (56 samples, 0.56%)</title><rect x="8.2292%" y="757" width="0.5552%" height="15" fill="rgb(222,148,37)" fg:x="830" fg:w="56"/><text x="8.4792%" y="767.50"></text></g><g><title>__GI___libc_free (53 samples, 0.53%)</title><rect x="8.7845%" y="853" width="0.5255%" height="15" fill="rgb(234,67,33)" fg:x="886" fg:w="53"/><text x="9.0345%" y="863.50"></text></g><g><title>__GI___libc_malloc (26 samples, 0.26%)</title><rect x="9.3099%" y="853" width="0.2578%" height="15" fill="rgb(247,98,35)" fg:x="939" fg:w="26"/><text x="9.5599%" y="863.50"></text></g><g><title>_int_free (32 samples, 0.32%)</title><rect x="9.5776%" y="853" width="0.3173%" height="15" fill="rgb(247,138,52)" fg:x="966" fg:w="32"/><text x="9.8276%" y="863.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (62 samples, 0.61%)</title><rect x="9.9048%" y="853" width="0.6147%" height="15" fill="rgb(213,79,30)" fg:x="999" fg:w="62"/><text x="10.1548%" y="863.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (10 samples, 0.10%)</title><rect x="10.4204%" y="837" width="0.0991%" height="15" fill="rgb(246,177,23)" fg:x="1051" fg:w="10"/><text x="10.6704%" y="847.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (10 samples, 0.10%)</title><rect x="10.4204%" y="821" width="0.0991%" height="15" fill="rgb(230,62,27)" fg:x="1051" fg:w="10"/><text x="10.6704%" y="831.50"></text></g><g><title>alloc::collections::btree::mem::replace (10 samples, 0.10%)</title><rect x="10.4204%" y="805" width="0.0991%" height="15" fill="rgb(216,154,8)" fg:x="1051" fg:w="10"/><text x="10.6704%" y="815.50"></text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (10 samples, 0.10%)</title><rect x="10.4204%" y="789" width="0.0991%" height="15" fill="rgb(244,35,45)" fg:x="1051" fg:w="10"/><text x="10.6704%" y="799.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (10 samples, 0.10%)</title><rect x="10.4204%" y="773" width="0.0991%" height="15" fill="rgb(251,115,12)" fg:x="1051" fg:w="10"/><text x="10.6704%" y="783.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (10 samples, 0.10%)</title><rect x="10.4204%" y="757" width="0.0991%" height="15" fill="rgb(240,54,50)" fg:x="1051" fg:w="10"/><text x="10.6704%" y="767.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (10 samples, 0.10%)</title><rect x="10.4204%" y="741" width="0.0991%" height="15" fill="rgb(233,84,52)" fg:x="1051" fg:w="10"/><text x="10.6704%" y="751.50"></text></g><g><title>alloc::alloc::dealloc (10 samples, 0.10%)</title><rect x="10.4204%" y="725" width="0.0991%" height="15" fill="rgb(207,117,47)" fg:x="1051" fg:w="10"/><text x="10.6704%" y="735.50"></text></g><g><title>machine::Machine::log_step (4 samples, 0.04%)</title><rect x="10.5394%" y="837" width="0.0397%" height="15" fill="rgb(249,43,39)" fg:x="1063" fg:w="4"/><text x="10.7894%" y="847.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (3 samples, 0.03%)</title><rect x="10.5493%" y="821" width="0.0297%" height="15" fill="rgb(209,38,44)" fg:x="1064" fg:w="3"/><text x="10.7993%" y="831.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.03%)</title><rect x="10.5493%" y="805" width="0.0297%" height="15" fill="rgb(236,212,23)" fg:x="1064" fg:w="3"/><text x="10.7993%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.03%)</title><rect x="10.5493%" y="789" width="0.0297%" height="15" fill="rgb(242,79,21)" fg:x="1064" fg:w="3"/><text x="10.7993%" y="799.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.03%)</title><rect x="10.5493%" y="773" width="0.0297%" height="15" fill="rgb(211,96,35)" fg:x="1064" fg:w="3"/><text x="10.7993%" y="783.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (3 samples, 0.03%)</title><rect x="10.5493%" y="757" width="0.0297%" height="15" fill="rgb(253,215,40)" fg:x="1064" fg:w="3"/><text x="10.7993%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.03%)</title><rect x="10.5493%" y="741" width="0.0297%" height="15" fill="rgb(211,81,21)" fg:x="1064" fg:w="3"/><text x="10.7993%" y="751.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.03%)</title><rect x="10.5493%" y="725" width="0.0297%" height="15" fill="rgb(208,190,38)" fg:x="1064" fg:w="3"/><text x="10.7993%" y="735.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.03%)</title><rect x="10.5493%" y="709" width="0.0297%" height="15" fill="rgb(235,213,38)" fg:x="1064" fg:w="3"/><text x="10.7993%" y="719.50"></text></g><g><title>machine::Machine::step (11 samples, 0.11%)</title><rect x="10.5195%" y="853" width="0.1091%" height="15" fill="rgb(237,122,38)" fg:x="1061" fg:w="11"/><text x="10.7695%" y="863.50"></text></g><g><title>machine::Machine::run_action (5 samples, 0.05%)</title><rect x="10.5790%" y="837" width="0.0496%" height="15" fill="rgb(244,218,35)" fg:x="1067" fg:w="5"/><text x="10.8290%" y="847.50"></text></g><g><title>machine::Machine::get_actions (5 samples, 0.05%)</title><rect x="10.5790%" y="821" width="0.0496%" height="15" fill="rgb(240,68,47)" fg:x="1067" fg:w="5"/><text x="10.8290%" y="831.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (3 samples, 0.03%)</title><rect x="10.5988%" y="805" width="0.0297%" height="15" fill="rgb(210,16,53)" fg:x="1069" fg:w="3"/><text x="10.8488%" y="815.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (3 samples, 0.03%)</title><rect x="10.5988%" y="789" width="0.0297%" height="15" fill="rgb(235,124,12)" fg:x="1069" fg:w="3"/><text x="10.8488%" y="799.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (3 samples, 0.03%)</title><rect x="10.5988%" y="773" width="0.0297%" height="15" fill="rgb(224,169,11)" fg:x="1069" fg:w="3"/><text x="10.8488%" y="783.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (3 samples, 0.03%)</title><rect x="10.5988%" y="757" width="0.0297%" height="15" fill="rgb(250,166,2)" fg:x="1069" fg:w="3"/><text x="10.8488%" y="767.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (3 samples, 0.03%)</title><rect x="10.5988%" y="741" width="0.0297%" height="15" fill="rgb(242,216,29)" fg:x="1069" fg:w="3"/><text x="10.8488%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (3 samples, 0.03%)</title><rect x="10.5988%" y="725" width="0.0297%" height="15" fill="rgb(230,116,27)" fg:x="1069" fg:w="3"/><text x="10.8488%" y="735.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (3 samples, 0.03%)</title><rect x="10.5988%" y="709" width="0.0297%" height="15" fill="rgb(228,99,48)" fg:x="1069" fg:w="3"/><text x="10.8488%" y="719.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (3 samples, 0.03%)</title><rect x="10.5988%" y="693" width="0.0297%" height="15" fill="rgb(253,11,6)" fg:x="1069" fg:w="3"/><text x="10.8488%" y="703.50"></text></g><g><title>[[stack]] (303 samples, 3.00%)</title><rect x="7.6542%" y="869" width="3.0042%" height="15" fill="rgb(247,143,39)" fg:x="772" fg:w="303"/><text x="7.9042%" y="879.50">[[s..</text></g><g><title>serde_json::ser::format_escaped_str (3 samples, 0.03%)</title><rect x="10.6286%" y="853" width="0.0297%" height="15" fill="rgb(236,97,10)" fg:x="1072" fg:w="3"/><text x="10.8786%" y="863.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (2 samples, 0.02%)</title><rect x="10.6385%" y="837" width="0.0198%" height="15" fill="rgb(233,208,19)" fg:x="1073" fg:w="2"/><text x="10.8885%" y="847.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (2 samples, 0.02%)</title><rect x="10.6385%" y="821" width="0.0198%" height="15" fill="rgb(216,164,2)" fg:x="1073" fg:w="2"/><text x="10.8885%" y="831.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.02%)</title><rect x="10.6385%" y="805" width="0.0198%" height="15" fill="rgb(220,129,5)" fg:x="1073" fg:w="2"/><text x="10.8885%" y="815.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.02%)</title><rect x="10.6385%" y="789" width="0.0198%" height="15" fill="rgb(242,17,10)" fg:x="1073" fg:w="2"/><text x="10.8885%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="10.6385%" y="773" width="0.0198%" height="15" fill="rgb(242,107,0)" fg:x="1073" fg:w="2"/><text x="10.8885%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="10.6385%" y="757" width="0.0198%" height="15" fill="rgb(251,28,31)" fg:x="1073" fg:w="2"/><text x="10.8885%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="10.6385%" y="741" width="0.0198%" height="15" fill="rgb(233,223,10)" fg:x="1073" fg:w="2"/><text x="10.8885%" y="751.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="10.6385%" y="725" width="0.0198%" height="15" fill="rgb(215,21,27)" fg:x="1073" fg:w="2"/><text x="10.8885%" y="735.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="10.6583%" y="853" width="0.0198%" height="15" fill="rgb(232,23,21)" fg:x="1075" fg:w="2"/><text x="10.9083%" y="863.50"></text></g><g><title>[graphwalker] (71 samples, 0.70%)</title><rect x="10.6583%" y="869" width="0.7039%" height="15" fill="rgb(244,5,23)" fg:x="1075" fg:w="71"/><text x="10.9083%" y="879.50"></text></g><g><title>_int_free (68 samples, 0.67%)</title><rect x="10.6881%" y="853" width="0.6742%" height="15" fill="rgb(226,81,46)" fg:x="1078" fg:w="68"/><text x="10.9381%" y="863.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (2 samples, 0.02%)</title><rect x="12.2050%" y="837" width="0.0198%" height="15" fill="rgb(247,70,30)" fg:x="1231" fg:w="2"/><text x="12.4550%" y="847.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (2 samples, 0.02%)</title><rect x="12.2050%" y="821" width="0.0198%" height="15" fill="rgb(212,68,19)" fg:x="1231" fg:w="2"/><text x="12.4550%" y="831.50"></text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (2 samples, 0.02%)</title><rect x="12.2050%" y="805" width="0.0198%" height="15" fill="rgb(240,187,13)" fg:x="1231" fg:w="2"/><text x="12.4550%" y="815.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (2 samples, 0.02%)</title><rect x="12.2050%" y="789" width="0.0198%" height="15" fill="rgb(223,113,26)" fg:x="1231" fg:w="2"/><text x="12.4550%" y="799.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (2 samples, 0.02%)</title><rect x="12.2050%" y="773" width="0.0198%" height="15" fill="rgb(206,192,2)" fg:x="1231" fg:w="2"/><text x="12.4550%" y="783.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="12.2050%" y="757" width="0.0198%" height="15" fill="rgb(241,108,4)" fg:x="1231" fg:w="2"/><text x="12.4550%" y="767.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="12.2050%" y="741" width="0.0198%" height="15" fill="rgb(247,173,49)" fg:x="1231" fg:w="2"/><text x="12.4550%" y="751.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="12.2050%" y="725" width="0.0198%" height="15" fill="rgb(224,114,35)" fg:x="1231" fg:w="2"/><text x="12.4550%" y="735.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (82 samples, 0.81%)</title><rect x="11.4218%" y="853" width="0.8130%" height="15" fill="rgb(245,159,27)" fg:x="1152" fg:w="82"/><text x="11.6718%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (58 samples, 0.58%)</title><rect x="12.2348%" y="853" width="0.5751%" height="15" fill="rgb(245,172,44)" fg:x="1234" fg:w="58"/><text x="12.4848%" y="863.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.10%)</title><rect x="13.9996%" y="773" width="0.0991%" height="15" fill="rgb(236,23,11)" fg:x="1412" fg:w="10"/><text x="14.2496%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.10%)</title><rect x="13.9996%" y="757" width="0.0991%" height="15" fill="rgb(205,117,38)" fg:x="1412" fg:w="10"/><text x="14.2496%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.10%)</title><rect x="13.9996%" y="741" width="0.0991%" height="15" fill="rgb(237,72,25)" fg:x="1412" fg:w="10"/><text x="14.2496%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.10%)</title><rect x="13.9996%" y="725" width="0.0991%" height="15" fill="rgb(244,70,9)" fg:x="1412" fg:w="10"/><text x="14.2496%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.10%)</title><rect x="13.9996%" y="709" width="0.0991%" height="15" fill="rgb(217,125,39)" fg:x="1412" fg:w="10"/><text x="14.2496%" y="719.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.10%)</title><rect x="13.9996%" y="693" width="0.0991%" height="15" fill="rgb(235,36,10)" fg:x="1412" fg:w="10"/><text x="14.2496%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (139 samples, 1.38%)</title><rect x="12.8098%" y="853" width="1.3781%" height="15" fill="rgb(251,123,47)" fg:x="1292" fg:w="139"/><text x="13.0598%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (19 samples, 0.19%)</title><rect x="13.9996%" y="837" width="0.1884%" height="15" fill="rgb(221,13,13)" fg:x="1412" fg:w="19"/><text x="14.2496%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (19 samples, 0.19%)</title><rect x="13.9996%" y="821" width="0.1884%" height="15" fill="rgb(238,131,9)" fg:x="1412" fg:w="19"/><text x="14.2496%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (19 samples, 0.19%)</title><rect x="13.9996%" y="805" width="0.1884%" height="15" fill="rgb(211,50,8)" fg:x="1412" fg:w="19"/><text x="14.2496%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (19 samples, 0.19%)</title><rect x="13.9996%" y="789" width="0.1884%" height="15" fill="rgb(245,182,24)" fg:x="1412" fg:w="19"/><text x="14.2496%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (9 samples, 0.09%)</title><rect x="14.0988%" y="773" width="0.0892%" height="15" fill="rgb(242,14,37)" fg:x="1422" fg:w="9"/><text x="14.3488%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (9 samples, 0.09%)</title><rect x="14.0988%" y="757" width="0.0892%" height="15" fill="rgb(246,228,12)" fg:x="1422" fg:w="9"/><text x="14.3488%" y="767.50"></text></g><g><title>__GI___libc_free (122 samples, 1.21%)</title><rect x="14.2276%" y="853" width="1.2096%" height="15" fill="rgb(213,55,15)" fg:x="1435" fg:w="122"/><text x="14.4776%" y="863.50"></text></g><g><title>__GI___libc_malloc (114 samples, 1.13%)</title><rect x="15.4372%" y="853" width="1.1303%" height="15" fill="rgb(209,9,3)" fg:x="1557" fg:w="114"/><text x="15.6872%" y="863.50"></text></g><g><title>__memcmp_avx2_movbe (16 samples, 0.16%)</title><rect x="16.5675%" y="853" width="0.1586%" height="15" fill="rgb(230,59,30)" fg:x="1671" fg:w="16"/><text x="16.8175%" y="863.50"></text></g><g><title>__memcpy_avx_unaligned_erms (40 samples, 0.40%)</title><rect x="16.7262%" y="853" width="0.3966%" height="15" fill="rgb(209,121,21)" fg:x="1687" fg:w="40"/><text x="16.9762%" y="863.50"></text></g><g><title>_int_free (8 samples, 0.08%)</title><rect x="17.1227%" y="853" width="0.0793%" height="15" fill="rgb(220,109,13)" fg:x="1727" fg:w="8"/><text x="17.3727%" y="863.50"></text></g><g><title>_int_free_maybe_consolidate (16 samples, 0.16%)</title><rect x="17.2021%" y="853" width="0.1586%" height="15" fill="rgb(232,18,1)" fg:x="1735" fg:w="16"/><text x="17.4521%" y="863.50"></text></g><g><title>_int_free_merge_chunk (4 samples, 0.04%)</title><rect x="17.3607%" y="853" width="0.0397%" height="15" fill="rgb(215,41,42)" fg:x="1751" fg:w="4"/><text x="17.6107%" y="863.50"></text></g><g><title>_int_malloc (19 samples, 0.19%)</title><rect x="17.4004%" y="853" width="0.1884%" height="15" fill="rgb(224,123,36)" fg:x="1755" fg:w="19"/><text x="17.6504%" y="863.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (93 samples, 0.92%)</title><rect x="17.6086%" y="853" width="0.9221%" height="15" fill="rgb(240,125,3)" fg:x="1776" fg:w="93"/><text x="17.8586%" y="863.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.31%)</title><rect x="18.5505%" y="837" width="0.3074%" height="15" fill="rgb(205,98,50)" fg:x="1871" fg:w="31"/><text x="18.8005%" y="847.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (57 samples, 0.57%)</title><rect x="18.8578%" y="837" width="0.5651%" height="15" fill="rgb(205,185,37)" fg:x="1902" fg:w="57"/><text x="19.1078%" y="847.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (57 samples, 0.57%)</title><rect x="18.8578%" y="821" width="0.5651%" height="15" fill="rgb(238,207,15)" fg:x="1902" fg:w="57"/><text x="19.1078%" y="831.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (18 samples, 0.18%)</title><rect x="19.4230%" y="837" width="0.1785%" height="15" fill="rgb(213,199,42)" fg:x="1959" fg:w="18"/><text x="19.6730%" y="847.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (18 samples, 0.18%)</title><rect x="19.4230%" y="821" width="0.1785%" height="15" fill="rgb(235,201,11)" fg:x="1959" fg:w="18"/><text x="19.6730%" y="831.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (18 samples, 0.18%)</title><rect x="19.4230%" y="805" width="0.1785%" height="15" fill="rgb(207,46,11)" fg:x="1959" fg:w="18"/><text x="19.6730%" y="815.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 0.18%)</title><rect x="19.4230%" y="789" width="0.1785%" height="15" fill="rgb(241,35,35)" fg:x="1959" fg:w="18"/><text x="19.6730%" y="799.50"></text></g><g><title>graph::Model::out_edges (144 samples, 1.43%)</title><rect x="18.5505%" y="853" width="1.4277%" height="15" fill="rgb(243,32,47)" fg:x="1871" fg:w="144"/><text x="18.8005%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (38 samples, 0.38%)</title><rect x="19.6014%" y="837" width="0.3768%" height="15" fill="rgb(247,202,23)" fg:x="1977" fg:w="38"/><text x="19.8514%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (38 samples, 0.38%)</title><rect x="19.6014%" y="821" width="0.3768%" height="15" fill="rgb(219,102,11)" fg:x="1977" fg:w="38"/><text x="19.8514%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (38 samples, 0.38%)</title><rect x="19.6014%" y="805" width="0.3768%" height="15" fill="rgb(243,110,44)" fg:x="1977" fg:w="38"/><text x="19.8514%" y="815.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (38 samples, 0.38%)</title><rect x="19.6014%" y="789" width="0.3768%" height="15" fill="rgb(222,74,54)" fg:x="1977" fg:w="38"/><text x="19.8514%" y="799.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (38 samples, 0.38%)</title><rect x="19.6014%" y="773" width="0.3768%" height="15" fill="rgb(216,99,12)" fg:x="1977" fg:w="38"/><text x="19.8514%" y="783.50"></text></g><g><title>alloc::alloc::dealloc (38 samples, 0.38%)</title><rect x="19.6014%" y="757" width="0.3768%" height="15" fill="rgb(226,22,26)" fg:x="1977" fg:w="38"/><text x="19.8514%" y="767.50"></text></g><g><title>[unknown] (870 samples, 8.63%)</title><rect x="11.3623%" y="869" width="8.6258%" height="15" fill="rgb(217,163,10)" fg:x="1146" fg:w="870"/><text x="11.6123%" y="879.50">[unknown]</text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="19.9881%" y="869" width="0.0198%" height="15" fill="rgb(213,25,53)" fg:x="2016" fg:w="2"/><text x="20.2381%" y="879.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.13%)</title><rect x="20.0079%" y="869" width="0.1289%" height="15" fill="rgb(252,105,26)" fg:x="2018" fg:w="13"/><text x="20.2579%" y="879.50"></text></g><g><title>__memcpy_avx_unaligned_erms (6 samples, 0.06%)</title><rect x="20.1368%" y="869" width="0.0595%" height="15" fill="rgb(220,39,43)" fg:x="2031" fg:w="6"/><text x="20.3868%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (4 samples, 0.04%)</title><rect x="20.2261%" y="581" width="0.0397%" height="15" fill="rgb(229,68,48)" fg:x="2040" fg:w="4"/><text x="20.4761%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (4 samples, 0.04%)</title><rect x="20.2261%" y="565" width="0.0397%" height="15" fill="rgb(252,8,32)" fg:x="2040" fg:w="4"/><text x="20.4761%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.04%)</title><rect x="20.2261%" y="549" width="0.0397%" height="15" fill="rgb(223,20,43)" fg:x="2040" fg:w="4"/><text x="20.4761%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="20.2261%" y="533" width="0.0397%" height="15" fill="rgb(229,81,49)" fg:x="2040" fg:w="4"/><text x="20.4761%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.04%)</title><rect x="20.2261%" y="517" width="0.0397%" height="15" fill="rgb(236,28,36)" fg:x="2040" fg:w="4"/><text x="20.4761%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.04%)</title><rect x="20.2261%" y="501" width="0.0397%" height="15" fill="rgb(249,185,26)" fg:x="2040" fg:w="4"/><text x="20.4761%" y="511.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="20.2261%" y="485" width="0.0397%" height="15" fill="rgb(249,174,33)" fg:x="2040" fg:w="4"/><text x="20.4761%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Step&gt; (3 samples, 0.03%)</title><rect x="20.2657%" y="581" width="0.0297%" height="15" fill="rgb(233,201,37)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Position&gt; (3 samples, 0.03%)</title><rect x="20.2657%" y="565" width="0.0297%" height="15" fill="rgb(221,78,26)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.03%)</title><rect x="20.2657%" y="549" width="0.0297%" height="15" fill="rgb(250,127,30)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="20.2657%" y="533" width="0.0297%" height="15" fill="rgb(230,49,44)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="20.2657%" y="517" width="0.0297%" height="15" fill="rgb(229,67,23)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="20.2657%" y="501" width="0.0297%" height="15" fill="rgb(249,83,47)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="20.2657%" y="485" width="0.0297%" height="15" fill="rgb(215,43,3)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="20.2657%" y="469" width="0.0297%" height="15" fill="rgb(238,154,13)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="479.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="20.2657%" y="453" width="0.0297%" height="15" fill="rgb(219,56,2)" fg:x="2044" fg:w="3"/><text x="20.5157%" y="463.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="20.2756%" y="437" width="0.0198%" height="15" fill="rgb(233,0,4)" fg:x="2045" fg:w="2"/><text x="20.5256%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (188 samples, 1.86%)</title><rect x="22.1495%" y="357" width="1.8640%" height="15" fill="rgb(235,30,7)" fg:x="2234" fg:w="188"/><text x="22.3995%" y="367.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (108 samples, 1.07%)</title><rect x="22.9427%" y="341" width="1.0708%" height="15" fill="rgb(250,79,13)" fg:x="2314" fg:w="108"/><text x="23.1927%" y="351.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (205 samples, 2.03%)</title><rect x="22.1495%" y="373" width="2.0325%" height="15" fill="rgb(211,146,34)" fg:x="2234" fg:w="205"/><text x="22.3995%" y="383.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (17 samples, 0.17%)</title><rect x="24.0135%" y="357" width="0.1686%" height="15" fill="rgb(228,22,38)" fg:x="2422" fg:w="17"/><text x="24.2635%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.04%)</title><rect x="24.1424%" y="341" width="0.0397%" height="15" fill="rgb(235,168,5)" fg:x="2435" fg:w="4"/><text x="24.3924%" y="351.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend::_{{closure}} (4 samples, 0.04%)</title><rect x="24.1424%" y="325" width="0.0397%" height="15" fill="rgb(221,155,16)" fg:x="2435" fg:w="4"/><text x="24.3924%" y="335.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (4 samples, 0.04%)</title><rect x="25.0446%" y="341" width="0.0397%" height="15" fill="rgb(215,215,53)" fg:x="2526" fg:w="4"/><text x="25.2946%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (4 samples, 0.04%)</title><rect x="25.0446%" y="325" width="0.0397%" height="15" fill="rgb(223,4,10)" fg:x="2526" fg:w="4"/><text x="25.2946%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (4 samples, 0.04%)</title><rect x="25.0446%" y="309" width="0.0397%" height="15" fill="rgb(234,103,6)" fg:x="2526" fg:w="4"/><text x="25.2946%" y="319.50"></text></g><g><title>core::ptr::read (4 samples, 0.04%)</title><rect x="25.0446%" y="293" width="0.0397%" height="15" fill="rgb(227,97,0)" fg:x="2526" fg:w="4"/><text x="25.2946%" y="303.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (318 samples, 3.15%)</title><rect x="22.0603%" y="421" width="3.1529%" height="15" fill="rgb(234,150,53)" fg:x="2225" fg:w="318"/><text x="22.3103%" y="431.50">all..</text></g><g><title>alloc::collections::btree::mem::replace (318 samples, 3.15%)</title><rect x="22.0603%" y="405" width="3.1529%" height="15" fill="rgb(228,201,54)" fg:x="2225" fg:w="318"/><text x="22.3103%" y="415.50">all..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (318 samples, 3.15%)</title><rect x="22.0603%" y="389" width="3.1529%" height="15" fill="rgb(222,22,37)" fg:x="2225" fg:w="318"/><text x="22.3103%" y="399.50">all..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (104 samples, 1.03%)</title><rect x="24.1820%" y="373" width="1.0311%" height="15" fill="rgb(237,53,32)" fg:x="2439" fg:w="104"/><text x="24.4320%" y="383.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (29 samples, 0.29%)</title><rect x="24.9256%" y="357" width="0.2875%" height="15" fill="rgb(233,25,53)" fg:x="2514" fg:w="29"/><text x="25.1756%" y="367.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (13 samples, 0.13%)</title><rect x="25.0843%" y="341" width="0.1289%" height="15" fill="rgb(210,40,34)" fg:x="2530" fg:w="13"/><text x="25.3343%" y="351.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (573 samples, 5.68%)</title><rect x="20.3153%" y="453" width="5.6811%" height="15" fill="rgb(241,220,44)" fg:x="2049" fg:w="573"/><text x="20.5653%" y="463.50">&lt;alloc:..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (474 samples, 4.70%)</title><rect x="21.2968%" y="437" width="4.6996%" height="15" fill="rgb(235,28,35)" fg:x="2148" fg:w="474"/><text x="21.5468%" y="447.50">alloc..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (79 samples, 0.78%)</title><rect x="25.2132%" y="421" width="0.7833%" height="15" fill="rgb(210,56,17)" fg:x="2543" fg:w="79"/><text x="25.4632%" y="431.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (2 samples, 0.02%)</title><rect x="25.9766%" y="405" width="0.0198%" height="15" fill="rgb(224,130,29)" fg:x="2620" fg:w="2"/><text x="26.2266%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::filter::Filter&lt;I,P&gt; as core::iter::traits::iterator::Iterator&gt;::count (662 samples, 6.56%)</title><rect x="20.3153%" y="533" width="6.5636%" height="15" fill="rgb(235,212,8)" fg:x="2049" fg:w="662"/><text x="20.5653%" y="543.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::sum (662 samples, 6.56%)</title><rect x="20.3153%" y="517" width="6.5636%" height="15" fill="rgb(223,33,50)" fg:x="2049" fg:w="662"/><text x="20.5653%" y="527.50">core::ite..</text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum (662 samples, 6.56%)</title><rect x="20.3153%" y="501" width="6.5636%" height="15" fill="rgb(219,149,13)" fg:x="2049" fg:w="662"/><text x="20.5653%" y="511.50">&lt;usize as..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (662 samples, 6.56%)</title><rect x="20.3153%" y="485" width="6.5636%" height="15" fill="rgb(250,156,29)" fg:x="2049" fg:w="662"/><text x="20.5653%" y="495.50">&lt;core::it..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (662 samples, 6.56%)</title><rect x="20.3153%" y="469" width="6.5636%" height="15" fill="rgb(216,193,19)" fg:x="2049" fg:w="662"/><text x="20.5653%" y="479.50">core::ite..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (89 samples, 0.88%)</title><rect x="25.9964%" y="453" width="0.8824%" height="15" fill="rgb(216,135,14)" fg:x="2622" fg:w="89"/><text x="26.2464%" y="463.50"></text></g><g><title>&lt;usize as core::iter::traits::accum::Sum&gt;::sum::_{{closure}} (89 samples, 0.88%)</title><rect x="25.9964%" y="437" width="0.8824%" height="15" fill="rgb(241,47,5)" fg:x="2622" fg:w="89"/><text x="26.2464%" y="447.50"></text></g><g><title>machine::Machine::is_all_fullfilled (666 samples, 6.60%)</title><rect x="20.2955%" y="581" width="6.6032%" height="15" fill="rgb(233,42,35)" fg:x="2047" fg:w="666"/><text x="20.5455%" y="591.50">machine::..</text></g><g><title>machine::Context::is_fullfilled (665 samples, 6.59%)</title><rect x="20.3054%" y="565" width="6.5933%" height="15" fill="rgb(231,13,6)" fg:x="2048" fg:w="665"/><text x="20.5554%" y="575.50">machine::..</text></g><g><title>machine::Context::get_fullfilment (665 samples, 6.59%)</title><rect x="20.3054%" y="549" width="6.5933%" height="15" fill="rgb(207,181,40)" fg:x="2048" fg:w="665"/><text x="20.5554%" y="559.50">machine::..</text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::len (2 samples, 0.02%)</title><rect x="26.8788%" y="533" width="0.0198%" height="15" fill="rgb(254,173,49)" fg:x="2711" fg:w="2"/><text x="27.1288%" y="543.50"></text></g><g><title>__GI___libc_malloc (11 samples, 0.11%)</title><rect x="26.9185%" y="389" width="0.1091%" height="15" fill="rgb(221,1,38)" fg:x="2715" fg:w="11"/><text x="27.1685%" y="399.50"></text></g><g><title>_int_malloc (9 samples, 0.09%)</title><rect x="26.9383%" y="373" width="0.0892%" height="15" fill="rgb(206,124,46)" fg:x="2717" fg:w="9"/><text x="27.1883%" y="383.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (12 samples, 0.12%)</title><rect x="26.9185%" y="565" width="0.1190%" height="15" fill="rgb(249,21,11)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (12 samples, 0.12%)</title><rect x="26.9185%" y="549" width="0.1190%" height="15" fill="rgb(222,201,40)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="559.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (12 samples, 0.12%)</title><rect x="26.9185%" y="533" width="0.1190%" height="15" fill="rgb(235,61,29)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="543.50"></text></g><g><title>alloc::slice::hack::to_vec (12 samples, 0.12%)</title><rect x="26.9185%" y="517" width="0.1190%" height="15" fill="rgb(219,207,3)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="527.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (12 samples, 0.12%)</title><rect x="26.9185%" y="501" width="0.1190%" height="15" fill="rgb(222,56,46)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (12 samples, 0.12%)</title><rect x="26.9185%" y="485" width="0.1190%" height="15" fill="rgb(239,76,54)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (12 samples, 0.12%)</title><rect x="26.9185%" y="469" width="0.1190%" height="15" fill="rgb(231,124,27)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (12 samples, 0.12%)</title><rect x="26.9185%" y="453" width="0.1190%" height="15" fill="rgb(249,195,6)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="463.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (12 samples, 0.12%)</title><rect x="26.9185%" y="437" width="0.1190%" height="15" fill="rgb(237,174,47)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="447.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (12 samples, 0.12%)</title><rect x="26.9185%" y="421" width="0.1190%" height="15" fill="rgb(206,201,31)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="431.50"></text></g><g><title>alloc::alloc::alloc (12 samples, 0.12%)</title><rect x="26.9185%" y="405" width="0.1190%" height="15" fill="rgb(231,57,52)" fg:x="2715" fg:w="12"/><text x="27.1685%" y="415.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (11 samples, 0.11%)</title><rect x="27.0375%" y="565" width="0.1091%" height="15" fill="rgb(248,177,22)" fg:x="2727" fg:w="11"/><text x="27.2875%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (11 samples, 0.11%)</title><rect x="27.0375%" y="549" width="0.1091%" height="15" fill="rgb(215,211,37)" fg:x="2727" fg:w="11"/><text x="27.2875%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (10 samples, 0.10%)</title><rect x="27.0474%" y="533" width="0.0991%" height="15" fill="rgb(241,128,51)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (10 samples, 0.10%)</title><rect x="27.0474%" y="517" width="0.0991%" height="15" fill="rgb(227,165,31)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (10 samples, 0.10%)</title><rect x="27.0474%" y="501" width="0.0991%" height="15" fill="rgb(228,167,24)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (10 samples, 0.10%)</title><rect x="27.0474%" y="485" width="0.0991%" height="15" fill="rgb(228,143,12)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (10 samples, 0.10%)</title><rect x="27.0474%" y="469" width="0.0991%" height="15" fill="rgb(249,149,8)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (10 samples, 0.10%)</title><rect x="27.0474%" y="453" width="0.0991%" height="15" fill="rgb(243,35,44)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (10 samples, 0.10%)</title><rect x="27.0474%" y="437" width="0.0991%" height="15" fill="rgb(246,89,9)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (10 samples, 0.10%)</title><rect x="27.0474%" y="421" width="0.0991%" height="15" fill="rgb(233,213,13)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (10 samples, 0.10%)</title><rect x="27.0474%" y="405" width="0.0991%" height="15" fill="rgb(233,141,41)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="415.50"></text></g><g><title>alloc::alloc::alloc (10 samples, 0.10%)</title><rect x="27.0474%" y="389" width="0.0991%" height="15" fill="rgb(239,167,4)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="399.50"></text></g><g><title>__GI___libc_malloc (10 samples, 0.10%)</title><rect x="27.0474%" y="373" width="0.0991%" height="15" fill="rgb(209,217,16)" fg:x="2728" fg:w="10"/><text x="27.2974%" y="383.50"></text></g><g><title>__memcmp_avx2_movbe (8 samples, 0.08%)</title><rect x="27.2060%" y="437" width="0.0793%" height="15" fill="rgb(219,88,35)" fg:x="2744" fg:w="8"/><text x="27.4560%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (17 samples, 0.17%)</title><rect x="27.1862%" y="501" width="0.1686%" height="15" fill="rgb(220,193,23)" fg:x="2742" fg:w="17"/><text x="27.4362%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (17 samples, 0.17%)</title><rect x="27.1862%" y="485" width="0.1686%" height="15" fill="rgb(230,90,52)" fg:x="2742" fg:w="17"/><text x="27.4362%" y="495.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (17 samples, 0.17%)</title><rect x="27.1862%" y="469" width="0.1686%" height="15" fill="rgb(252,106,19)" fg:x="2742" fg:w="17"/><text x="27.4362%" y="479.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (17 samples, 0.17%)</title><rect x="27.1862%" y="453" width="0.1686%" height="15" fill="rgb(206,74,20)" fg:x="2742" fg:w="17"/><text x="27.4362%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (7 samples, 0.07%)</title><rect x="27.2853%" y="437" width="0.0694%" height="15" fill="rgb(230,138,44)" fg:x="2752" fg:w="7"/><text x="27.5353%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (21 samples, 0.21%)</title><rect x="27.1565%" y="565" width="0.2082%" height="15" fill="rgb(235,182,43)" fg:x="2739" fg:w="21"/><text x="27.4065%" y="575.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (21 samples, 0.21%)</title><rect x="27.1565%" y="549" width="0.2082%" height="15" fill="rgb(242,16,51)" fg:x="2739" fg:w="21"/><text x="27.4065%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (21 samples, 0.21%)</title><rect x="27.1565%" y="533" width="0.2082%" height="15" fill="rgb(248,9,4)" fg:x="2739" fg:w="21"/><text x="27.4065%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (21 samples, 0.21%)</title><rect x="27.1565%" y="517" width="0.2082%" height="15" fill="rgb(210,31,22)" fg:x="2739" fg:w="21"/><text x="27.4065%" y="527.50"></text></g><g><title>checked_request2size (20 samples, 0.20%)</title><rect x="35.2270%" y="245" width="0.1983%" height="15" fill="rgb(239,54,39)" fg:x="3553" fg:w="20"/><text x="35.4770%" y="255.50"></text></g><g><title>tcache_put (89 samples, 0.88%)</title><rect x="35.4253%" y="245" width="0.8824%" height="15" fill="rgb(230,99,41)" fg:x="3573" fg:w="89"/><text x="35.6753%" y="255.50"></text></g><g><title>_int_malloc (445 samples, 4.41%)</title><rect x="31.9056%" y="261" width="4.4121%" height="15" fill="rgb(253,106,12)" fg:x="3218" fg:w="445"/><text x="32.1556%" y="271.50">_int_..</text></g><g><title>arena_for_chunk (8 samples, 0.08%)</title><rect x="36.3177%" y="261" width="0.0793%" height="15" fill="rgb(213,46,41)" fg:x="3663" fg:w="8"/><text x="36.5677%" y="271.50"></text></g><g><title>checked_request2size (78 samples, 0.77%)</title><rect x="36.3970%" y="261" width="0.7733%" height="15" fill="rgb(215,133,35)" fg:x="3671" fg:w="78"/><text x="36.6470%" y="271.50"></text></g><g><title>__GI___libc_malloc (779 samples, 7.72%)</title><rect x="30.4085%" y="277" width="7.7236%" height="15" fill="rgb(213,28,5)" fg:x="3067" fg:w="779"/><text x="30.6585%" y="287.50">__GI___libc..</text></g><g><title>tcache_get (97 samples, 0.96%)</title><rect x="37.1703%" y="261" width="0.9617%" height="15" fill="rgb(215,77,49)" fg:x="3749" fg:w="97"/><text x="37.4203%" y="271.50"></text></g><g><title>tcache_get_n (97 samples, 0.96%)</title><rect x="37.1703%" y="245" width="0.9617%" height="15" fill="rgb(248,100,22)" fg:x="3749" fg:w="97"/><text x="37.4203%" y="255.50"></text></g><g><title>__rdl_alloc (80 samples, 0.79%)</title><rect x="38.1321%" y="277" width="0.7932%" height="15" fill="rgb(208,67,9)" fg:x="3846" fg:w="80"/><text x="38.3821%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (80 samples, 0.79%)</title><rect x="38.1321%" y="261" width="0.7932%" height="15" fill="rgb(219,133,21)" fg:x="3846" fg:w="80"/><text x="38.3821%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1,025 samples, 10.16%)</title><rect x="29.1295%" y="373" width="10.1626%" height="15" fill="rgb(246,46,29)" fg:x="2938" fg:w="1025"/><text x="29.3795%" y="383.50">alloc::vec::Vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1,025 samples, 10.16%)</title><rect x="29.1295%" y="357" width="10.1626%" height="15" fill="rgb(246,185,52)" fg:x="2938" fg:w="1025"/><text x="29.3795%" y="367.50">alloc::raw_vec:..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1,025 samples, 10.16%)</title><rect x="29.1295%" y="341" width="10.1626%" height="15" fill="rgb(252,136,11)" fg:x="2938" fg:w="1025"/><text x="29.3795%" y="351.50">alloc::raw_vec:..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (935 samples, 9.27%)</title><rect x="30.0218%" y="325" width="9.2703%" height="15" fill="rgb(219,138,53)" fg:x="3028" fg:w="935"/><text x="30.2718%" y="335.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::Global::alloc_impl (935 samples, 9.27%)</title><rect x="30.0218%" y="309" width="9.2703%" height="15" fill="rgb(211,51,23)" fg:x="3028" fg:w="935"/><text x="30.2718%" y="319.50">alloc::alloc:..</text></g><g><title>alloc::alloc::alloc (935 samples, 9.27%)</title><rect x="30.0218%" y="293" width="9.2703%" height="15" fill="rgb(247,221,28)" fg:x="3028" fg:w="935"/><text x="30.2718%" y="303.50">alloc::alloc:..</text></g><g><title>__rust_alloc (37 samples, 0.37%)</title><rect x="38.9252%" y="277" width="0.3668%" height="15" fill="rgb(251,222,45)" fg:x="3926" fg:w="37"/><text x="39.1752%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="341" width="0.0496%" height="15" fill="rgb(217,162,53)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="351.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="325" width="0.0496%" height="15" fill="rgb(229,93,14)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="335.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="309" width="0.0496%" height="15" fill="rgb(209,67,49)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="319.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="293" width="0.0496%" height="15" fill="rgb(213,87,29)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="303.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="277" width="0.0496%" height="15" fill="rgb(205,151,52)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="261" width="0.0496%" height="15" fill="rgb(253,215,39)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="271.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="245" width="0.0496%" height="15" fill="rgb(221,220,41)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="255.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="229" width="0.0496%" height="15" fill="rgb(218,133,21)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="239.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="213" width="0.0496%" height="15" fill="rgb(221,193,43)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="223.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="197" width="0.0496%" height="15" fill="rgb(240,128,52)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="207.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="39.2921%" y="181" width="0.0496%" height="15" fill="rgb(253,114,12)" fg:x="3963" fg:w="5"/><text x="39.5421%" y="191.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (1,211 samples, 12.01%)</title><rect x="28.5148%" y="453" width="12.0067%" height="15" fill="rgb(215,223,47)" fg:x="2876" fg:w="1211"/><text x="28.7648%" y="463.50">&lt;alloc::string::St..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (1,149 samples, 11.39%)</title><rect x="29.1295%" y="437" width="11.3920%" height="15" fill="rgb(248,225,23)" fg:x="2938" fg:w="1149"/><text x="29.3795%" y="447.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (1,149 samples, 11.39%)</title><rect x="29.1295%" y="421" width="11.3920%" height="15" fill="rgb(250,108,0)" fg:x="2938" fg:w="1149"/><text x="29.3795%" y="431.50">alloc::slice::&lt;im..</text></g><g><title>alloc::slice::hack::to_vec (1,149 samples, 11.39%)</title><rect x="29.1295%" y="405" width="11.3920%" height="15" fill="rgb(228,208,7)" fg:x="2938" fg:w="1149"/><text x="29.3795%" y="415.50">alloc::slice::hac..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (1,149 samples, 11.39%)</title><rect x="29.1295%" y="389" width="11.3920%" height="15" fill="rgb(244,45,10)" fg:x="2938" fg:w="1149"/><text x="29.3795%" y="399.50">&lt;T as alloc::slic..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (124 samples, 1.23%)</title><rect x="39.2921%" y="373" width="1.2294%" height="15" fill="rgb(207,125,25)" fg:x="3963" fg:w="124"/><text x="39.5421%" y="383.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (124 samples, 1.23%)</title><rect x="39.2921%" y="357" width="1.2294%" height="15" fill="rgb(210,195,18)" fg:x="3963" fg:w="124"/><text x="39.5421%" y="367.50"></text></g><g><title>__memcpy_avx_unaligned_erms (119 samples, 1.18%)</title><rect x="39.3417%" y="341" width="1.1799%" height="15" fill="rgb(249,80,12)" fg:x="3968" fg:w="119"/><text x="39.5917%" y="351.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (49 samples, 0.49%)</title><rect x="40.5215%" y="453" width="0.4858%" height="15" fill="rgb(221,65,9)" fg:x="4087" fg:w="49"/><text x="40.7715%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::force (12 samples, 0.12%)</title><rect x="41.0073%" y="453" width="0.1190%" height="15" fill="rgb(235,49,36)" fg:x="4136" fg:w="12"/><text x="41.2573%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,Type&gt;::key_area_mut (26 samples, 0.26%)</title><rect x="41.1759%" y="437" width="0.2578%" height="15" fill="rgb(225,32,20)" fg:x="4153" fg:w="26"/><text x="41.4259%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked_mut (26 samples, 0.26%)</title><rect x="41.1759%" y="421" width="0.2578%" height="15" fill="rgb(215,141,46)" fg:x="4153" fg:w="26"/><text x="41.4259%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (26 samples, 0.26%)</title><rect x="41.1759%" y="405" width="0.2578%" height="15" fill="rgb(250,160,47)" fg:x="4153" fg:w="26"/><text x="41.4259%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (26 samples, 0.26%)</title><rect x="41.1759%" y="389" width="0.2578%" height="15" fill="rgb(216,222,40)" fg:x="4153" fg:w="26"/><text x="41.4259%" y="399.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Leaf&gt;::push (596 samples, 5.91%)</title><rect x="41.1263%" y="453" width="5.9092%" height="15" fill="rgb(234,217,39)" fg:x="4148" fg:w="596"/><text x="41.3763%" y="463.50">alloc::c..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (565 samples, 5.60%)</title><rect x="41.4337%" y="437" width="5.6018%" height="15" fill="rgb(207,178,40)" fg:x="4179" fg:w="565"/><text x="41.6837%" y="447.50">core::m..</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="421" width="0.0198%" height="15" fill="rgb(221,136,13)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="405" width="0.0198%" height="15" fill="rgb(249,199,10)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="389" width="0.0198%" height="15" fill="rgb(249,222,13)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="373" width="0.0198%" height="15" fill="rgb(244,185,38)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="357" width="0.0198%" height="15" fill="rgb(236,202,9)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="341" width="0.0198%" height="15" fill="rgb(250,229,37)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="351.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="325" width="0.0198%" height="15" fill="rgb(206,174,23)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="309" width="0.0198%" height="15" fill="rgb(211,33,43)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="319.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="293" width="0.0198%" height="15" fill="rgb(245,58,50)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="303.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="277" width="0.0198%" height="15" fill="rgb(244,68,36)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="287.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="47.0157%" y="261" width="0.0198%" height="15" fill="rgb(232,229,15)" fg:x="4742" fg:w="2"/><text x="47.2657%" y="271.50"></text></g><g><title>alloc_perturb (2 samples, 0.02%)</title><rect x="48.3244%" y="293" width="0.0198%" height="15" fill="rgb(254,30,23)" fg:x="4874" fg:w="2"/><text x="48.5744%" y="303.50"></text></g><g><title>_int_malloc (109 samples, 1.08%)</title><rect x="47.5114%" y="309" width="1.0807%" height="15" fill="rgb(235,160,14)" fg:x="4792" fg:w="109"/><text x="47.7614%" y="319.50"></text></g><g><title>tcache_put (24 samples, 0.24%)</title><rect x="48.3542%" y="293" width="0.2380%" height="15" fill="rgb(212,155,44)" fg:x="4877" fg:w="24"/><text x="48.6042%" y="303.50"></text></g><g><title>checked_request2size (12 samples, 0.12%)</title><rect x="48.6020%" y="309" width="0.1190%" height="15" fill="rgb(226,2,50)" fg:x="4902" fg:w="12"/><text x="48.8520%" y="319.50"></text></g><g><title>__GI___libc_malloc (194 samples, 1.92%)</title><rect x="47.1148%" y="325" width="1.9235%" height="15" fill="rgb(234,177,6)" fg:x="4752" fg:w="194"/><text x="47.3648%" y="335.50">_..</text></g><g><title>tcache_get (32 samples, 0.32%)</title><rect x="48.7210%" y="309" width="0.3173%" height="15" fill="rgb(217,24,9)" fg:x="4914" fg:w="32"/><text x="48.9710%" y="319.50"></text></g><g><title>tcache_get_n (32 samples, 0.32%)</title><rect x="48.7210%" y="293" width="0.3173%" height="15" fill="rgb(220,13,46)" fg:x="4914" fg:w="32"/><text x="48.9710%" y="303.50"></text></g><g><title>__rdl_alloc (19 samples, 0.19%)</title><rect x="49.0383%" y="325" width="0.1884%" height="15" fill="rgb(239,221,27)" fg:x="4946" fg:w="19"/><text x="49.2883%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (19 samples, 0.19%)</title><rect x="49.0383%" y="309" width="0.1884%" height="15" fill="rgb(222,198,25)" fg:x="4946" fg:w="19"/><text x="49.2883%" y="319.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (228 samples, 2.26%)</title><rect x="47.0355%" y="405" width="2.2606%" height="15" fill="rgb(211,99,13)" fg:x="4744" fg:w="228"/><text x="47.2855%" y="415.50">a..</text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (228 samples, 2.26%)</title><rect x="47.0355%" y="389" width="2.2606%" height="15" fill="rgb(232,111,31)" fg:x="4744" fg:w="228"/><text x="47.2855%" y="399.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (228 samples, 2.26%)</title><rect x="47.0355%" y="373" width="2.2606%" height="15" fill="rgb(245,82,37)" fg:x="4744" fg:w="228"/><text x="47.2855%" y="383.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (228 samples, 2.26%)</title><rect x="47.0355%" y="357" width="2.2606%" height="15" fill="rgb(227,149,46)" fg:x="4744" fg:w="228"/><text x="47.2855%" y="367.50">a..</text></g><g><title>alloc::alloc::alloc (228 samples, 2.26%)</title><rect x="47.0355%" y="341" width="2.2606%" height="15" fill="rgb(218,36,50)" fg:x="4744" fg:w="228"/><text x="47.2855%" y="351.50">a..</text></g><g><title>__rust_alloc (7 samples, 0.07%)</title><rect x="49.2267%" y="325" width="0.0694%" height="15" fill="rgb(226,80,48)" fg:x="4965" fg:w="7"/><text x="49.4767%" y="335.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,188 samples, 21.69%)</title><rect x="27.7018%" y="469" width="21.6934%" height="15" fill="rgb(238,224,15)" fg:x="2794" fg:w="2188"/><text x="27.9518%" y="479.50">&lt;alloc::collections::btree::map::B..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::new (238 samples, 2.36%)</title><rect x="47.0355%" y="453" width="2.3597%" height="15" fill="rgb(241,136,10)" fg:x="4744" fg:w="238"/><text x="47.2855%" y="463.50">a..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Leaf&gt;::new_leaf (238 samples, 2.36%)</title><rect x="47.0355%" y="437" width="2.3597%" height="15" fill="rgb(208,32,45)" fg:x="4744" fg:w="238"/><text x="47.2855%" y="447.50">a..</text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::new (238 samples, 2.36%)</title><rect x="47.0355%" y="421" width="2.3597%" height="15" fill="rgb(207,135,9)" fg:x="4744" fg:w="238"/><text x="47.2855%" y="431.50">a..</text></g><g><title>alloc::collections::btree::node::LeafNode&lt;K,V&gt;::init (10 samples, 0.10%)</title><rect x="49.2961%" y="405" width="0.0991%" height="15" fill="rgb(206,86,44)" fg:x="4972" fg:w="10"/><text x="49.5461%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (10 samples, 0.10%)</title><rect x="49.2961%" y="389" width="0.0991%" height="15" fill="rgb(245,177,15)" fg:x="4972" fg:w="10"/><text x="49.5461%" y="399.50"></text></g><g><title>core::ptr::write (10 samples, 0.10%)</title><rect x="49.2961%" y="373" width="0.0991%" height="15" fill="rgb(206,64,50)" fg:x="4972" fg:w="10"/><text x="49.5461%" y="383.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="50.4362%" y="261" width="0.0198%" height="15" fill="rgb(234,36,40)" fg:x="5087" fg:w="2"/><text x="50.6862%" y="271.50"></text></g><g><title>_int_malloc (69 samples, 0.68%)</title><rect x="49.9108%" y="277" width="0.6841%" height="15" fill="rgb(213,64,8)" fg:x="5034" fg:w="69"/><text x="50.1608%" y="287.50"></text></g><g><title>tcache_put (14 samples, 0.14%)</title><rect x="50.4561%" y="261" width="0.1388%" height="15" fill="rgb(210,75,36)" fg:x="5089" fg:w="14"/><text x="50.7061%" y="271.50"></text></g><g><title>checked_request2size (19 samples, 0.19%)</title><rect x="50.6048%" y="277" width="0.1884%" height="15" fill="rgb(229,88,21)" fg:x="5104" fg:w="19"/><text x="50.8548%" y="287.50"></text></g><g><title>__GI___libc_malloc (128 samples, 1.27%)</title><rect x="49.7125%" y="293" width="1.2691%" height="15" fill="rgb(252,204,47)" fg:x="5014" fg:w="128"/><text x="49.9625%" y="303.50"></text></g><g><title>tcache_get (19 samples, 0.19%)</title><rect x="50.7932%" y="277" width="0.1884%" height="15" fill="rgb(208,77,27)" fg:x="5123" fg:w="19"/><text x="51.0432%" y="287.50"></text></g><g><title>tcache_get_n (19 samples, 0.19%)</title><rect x="50.7932%" y="261" width="0.1884%" height="15" fill="rgb(221,76,26)" fg:x="5123" fg:w="19"/><text x="51.0432%" y="271.50"></text></g><g><title>__rdl_alloc (11 samples, 0.11%)</title><rect x="50.9816%" y="293" width="0.1091%" height="15" fill="rgb(225,139,18)" fg:x="5142" fg:w="11"/><text x="51.2316%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (11 samples, 0.11%)</title><rect x="50.9816%" y="277" width="0.1091%" height="15" fill="rgb(230,137,11)" fg:x="5142" fg:w="11"/><text x="51.2316%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (167 samples, 1.66%)</title><rect x="49.5043%" y="389" width="1.6558%" height="15" fill="rgb(212,28,1)" fg:x="4993" fg:w="167"/><text x="49.7543%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (167 samples, 1.66%)</title><rect x="49.5043%" y="373" width="1.6558%" height="15" fill="rgb(248,164,17)" fg:x="4993" fg:w="167"/><text x="49.7543%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (167 samples, 1.66%)</title><rect x="49.5043%" y="357" width="1.6558%" height="15" fill="rgb(222,171,42)" fg:x="4993" fg:w="167"/><text x="49.7543%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (154 samples, 1.53%)</title><rect x="49.6332%" y="341" width="1.5269%" height="15" fill="rgb(243,84,45)" fg:x="5006" fg:w="154"/><text x="49.8832%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (154 samples, 1.53%)</title><rect x="49.6332%" y="325" width="1.5269%" height="15" fill="rgb(252,49,23)" fg:x="5006" fg:w="154"/><text x="49.8832%" y="335.50"></text></g><g><title>alloc::alloc::alloc (154 samples, 1.53%)</title><rect x="49.6332%" y="309" width="1.5269%" height="15" fill="rgb(215,19,7)" fg:x="5006" fg:w="154"/><text x="49.8832%" y="319.50"></text></g><g><title>__rust_alloc (7 samples, 0.07%)</title><rect x="51.0906%" y="293" width="0.0694%" height="15" fill="rgb(238,81,41)" fg:x="5153" fg:w="7"/><text x="51.3406%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (192 samples, 1.90%)</title><rect x="49.3952%" y="469" width="1.9036%" height="15" fill="rgb(210,199,37)" fg:x="4982" fg:w="192"/><text x="49.6452%" y="479.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (181 samples, 1.79%)</title><rect x="49.5043%" y="453" width="1.7946%" height="15" fill="rgb(244,192,49)" fg:x="4993" fg:w="181"/><text x="49.7543%" y="463.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (181 samples, 1.79%)</title><rect x="49.5043%" y="437" width="1.7946%" height="15" fill="rgb(226,211,11)" fg:x="4993" fg:w="181"/><text x="49.7543%" y="447.50">a..</text></g><g><title>alloc::slice::hack::to_vec (181 samples, 1.79%)</title><rect x="49.5043%" y="421" width="1.7946%" height="15" fill="rgb(236,162,54)" fg:x="4993" fg:w="181"/><text x="49.7543%" y="431.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (181 samples, 1.79%)</title><rect x="49.5043%" y="405" width="1.7946%" height="15" fill="rgb(220,229,9)" fg:x="4993" fg:w="181"/><text x="49.7543%" y="415.50">&lt;..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (14 samples, 0.14%)</title><rect x="51.1600%" y="389" width="0.1388%" height="15" fill="rgb(250,87,22)" fg:x="5160" fg:w="14"/><text x="51.4100%" y="399.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.14%)</title><rect x="51.1600%" y="373" width="0.1388%" height="15" fill="rgb(239,43,17)" fg:x="5160" fg:w="14"/><text x="51.4100%" y="383.50"></text></g><g><title>__memcpy_avx_unaligned_erms (14 samples, 0.14%)</title><rect x="51.1600%" y="357" width="0.1388%" height="15" fill="rgb(231,177,25)" fg:x="5160" fg:w="14"/><text x="51.4100%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (20 samples, 0.20%)</title><rect x="51.2988%" y="469" width="0.1983%" height="15" fill="rgb(219,179,1)" fg:x="5174" fg:w="20"/><text x="51.5488%" y="479.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (10 samples, 0.10%)</title><rect x="51.3980%" y="453" width="0.0991%" height="15" fill="rgb(238,219,53)" fg:x="5184" fg:w="10"/><text x="51.6480%" y="463.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::correct_parent_link (9 samples, 0.09%)</title><rect x="51.6062%" y="453" width="0.0892%" height="15" fill="rgb(232,167,36)" fg:x="5205" fg:w="9"/><text x="51.8562%" y="463.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::set_parent_link (9 samples, 0.09%)</title><rect x="51.6062%" y="437" width="0.0892%" height="15" fill="rgb(244,19,51)" fg:x="5205" fg:w="9"/><text x="51.8562%" y="447.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (9 samples, 0.09%)</title><rect x="51.6062%" y="421" width="0.0892%" height="15" fill="rgb(224,6,22)" fg:x="5205" fg:w="9"/><text x="51.8562%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (27 samples, 0.27%)</title><rect x="51.5070%" y="469" width="0.2677%" height="15" fill="rgb(224,145,5)" fg:x="5195" fg:w="27"/><text x="51.7570%" y="479.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (8 samples, 0.08%)</title><rect x="51.6954%" y="453" width="0.0793%" height="15" fill="rgb(234,130,49)" fg:x="5214" fg:w="8"/><text x="51.9454%" y="463.50"></text></g><g><title>_int_malloc (20 samples, 0.20%)</title><rect x="51.8739%" y="261" width="0.1983%" height="15" fill="rgb(254,6,2)" fg:x="5232" fg:w="20"/><text x="52.1239%" y="271.50"></text></g><g><title>tcache_put (5 samples, 0.05%)</title><rect x="52.0226%" y="245" width="0.0496%" height="15" fill="rgb(208,96,46)" fg:x="5247" fg:w="5"/><text x="52.2726%" y="255.50"></text></g><g><title>checked_request2size (3 samples, 0.03%)</title><rect x="52.0821%" y="261" width="0.0297%" height="15" fill="rgb(239,3,39)" fg:x="5253" fg:w="3"/><text x="52.3321%" y="271.50"></text></g><g><title>__GI___libc_malloc (38 samples, 0.38%)</title><rect x="51.7747%" y="277" width="0.3768%" height="15" fill="rgb(233,210,1)" fg:x="5222" fg:w="38"/><text x="52.0247%" y="287.50"></text></g><g><title>tcache_get (4 samples, 0.04%)</title><rect x="52.1118%" y="261" width="0.0397%" height="15" fill="rgb(244,137,37)" fg:x="5256" fg:w="4"/><text x="52.3618%" y="271.50"></text></g><g><title>tcache_get_n (4 samples, 0.04%)</title><rect x="52.1118%" y="245" width="0.0397%" height="15" fill="rgb(240,136,2)" fg:x="5256" fg:w="4"/><text x="52.3618%" y="255.50"></text></g><g><title>__rdl_alloc (3 samples, 0.03%)</title><rect x="52.1515%" y="277" width="0.0297%" height="15" fill="rgb(239,18,37)" fg:x="5260" fg:w="3"/><text x="52.4015%" y="287.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (3 samples, 0.03%)</title><rect x="52.1515%" y="261" width="0.0297%" height="15" fill="rgb(218,185,22)" fg:x="5260" fg:w="3"/><text x="52.4015%" y="271.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::new_uninit_in (42 samples, 0.42%)</title><rect x="51.7747%" y="357" width="0.4164%" height="15" fill="rgb(225,218,4)" fg:x="5222" fg:w="42"/><text x="52.0247%" y="367.50"></text></g><g><title>alloc::boxed::Box&lt;T,A&gt;::try_new_uninit_in (42 samples, 0.42%)</title><rect x="51.7747%" y="341" width="0.4164%" height="15" fill="rgb(230,182,32)" fg:x="5222" fg:w="42"/><text x="52.0247%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (42 samples, 0.42%)</title><rect x="51.7747%" y="325" width="0.4164%" height="15" fill="rgb(242,56,43)" fg:x="5222" fg:w="42"/><text x="52.0247%" y="335.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (42 samples, 0.42%)</title><rect x="51.7747%" y="309" width="0.4164%" height="15" fill="rgb(233,99,24)" fg:x="5222" fg:w="42"/><text x="52.0247%" y="319.50"></text></g><g><title>alloc::alloc::alloc (42 samples, 0.42%)</title><rect x="51.7747%" y="293" width="0.4164%" height="15" fill="rgb(234,209,42)" fg:x="5222" fg:w="42"/><text x="52.0247%" y="303.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level (43 samples, 0.43%)</title><rect x="51.7747%" y="469" width="0.4263%" height="15" fill="rgb(227,7,12)" fg:x="5222" fg:w="43"/><text x="52.0247%" y="479.50"></text></g><g><title>alloc::collections::btree::mem::take_mut (43 samples, 0.43%)</title><rect x="51.7747%" y="453" width="0.4263%" height="15" fill="rgb(245,203,43)" fg:x="5222" fg:w="43"/><text x="52.0247%" y="463.50"></text></g><g><title>alloc::collections::btree::mem::replace (43 samples, 0.43%)</title><rect x="51.7747%" y="437" width="0.4263%" height="15" fill="rgb(238,205,33)" fg:x="5222" fg:w="43"/><text x="52.0247%" y="447.50"></text></g><g><title>alloc::collections::btree::mem::take_mut::_{{closure}} (43 samples, 0.43%)</title><rect x="51.7747%" y="421" width="0.4263%" height="15" fill="rgb(231,56,7)" fg:x="5222" fg:w="43"/><text x="52.0247%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::push_internal_level::_{{closure}} (43 samples, 0.43%)</title><rect x="51.7747%" y="405" width="0.4263%" height="15" fill="rgb(244,186,29)" fg:x="5222" fg:w="43"/><text x="52.0247%" y="415.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Owned,K,V,alloc::collections::btree::node::marker::Internal&gt;::new_internal (43 samples, 0.43%)</title><rect x="51.7747%" y="389" width="0.4263%" height="15" fill="rgb(234,111,31)" fg:x="5222" fg:w="43"/><text x="52.0247%" y="399.50"></text></g><g><title>alloc::collections::btree::node::InternalNode&lt;K,V&gt;::new (43 samples, 0.43%)</title><rect x="51.7747%" y="373" width="0.4263%" height="15" fill="rgb(241,149,10)" fg:x="5222" fg:w="43"/><text x="52.0247%" y="383.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,504 samples, 24.83%)</title><rect x="27.4341%" y="485" width="24.8265%" height="15" fill="rgb(249,206,44)" fg:x="2767" fg:w="2504"/><text x="27.6841%" y="495.50">&lt;alloc::collections::btree::map::BTreeMa..</text></g><g><title>core::option::Option&lt;T&gt;::unwrap_or_else (6 samples, 0.06%)</title><rect x="52.2011%" y="469" width="0.0595%" height="15" fill="rgb(251,153,30)" fg:x="5265" fg:w="6"/><text x="52.4511%" y="479.50"></text></g><g><title>_int_malloc (9 samples, 0.09%)</title><rect x="52.3300%" y="293" width="0.0892%" height="15" fill="rgb(239,152,38)" fg:x="5278" fg:w="9"/><text x="52.5800%" y="303.50"></text></g><g><title>tcache_put (2 samples, 0.02%)</title><rect x="52.3994%" y="277" width="0.0198%" height="15" fill="rgb(249,139,47)" fg:x="5285" fg:w="2"/><text x="52.6494%" y="287.50"></text></g><g><title>checked_request2size (2 samples, 0.02%)</title><rect x="52.4192%" y="293" width="0.0198%" height="15" fill="rgb(244,64,35)" fg:x="5287" fg:w="2"/><text x="52.6692%" y="303.50"></text></g><g><title>__GI___libc_malloc (13 samples, 0.13%)</title><rect x="52.3200%" y="309" width="0.1289%" height="15" fill="rgb(216,46,15)" fg:x="5277" fg:w="13"/><text x="52.5700%" y="319.50"></text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="52.4489%" y="309" width="0.0198%" height="15" fill="rgb(250,74,19)" fg:x="5290" fg:w="2"/><text x="52.6989%" y="319.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (2 samples, 0.02%)</title><rect x="52.4489%" y="293" width="0.0198%" height="15" fill="rgb(249,42,33)" fg:x="5290" fg:w="2"/><text x="52.6989%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (21 samples, 0.21%)</title><rect x="52.2705%" y="405" width="0.2082%" height="15" fill="rgb(242,149,17)" fg:x="5272" fg:w="21"/><text x="52.5205%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (21 samples, 0.21%)</title><rect x="52.2705%" y="389" width="0.2082%" height="15" fill="rgb(244,29,21)" fg:x="5272" fg:w="21"/><text x="52.5205%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (21 samples, 0.21%)</title><rect x="52.2705%" y="373" width="0.2082%" height="15" fill="rgb(220,130,37)" fg:x="5272" fg:w="21"/><text x="52.5205%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (17 samples, 0.17%)</title><rect x="52.3101%" y="357" width="0.1686%" height="15" fill="rgb(211,67,2)" fg:x="5276" fg:w="17"/><text x="52.5601%" y="367.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (17 samples, 0.17%)</title><rect x="52.3101%" y="341" width="0.1686%" height="15" fill="rgb(235,68,52)" fg:x="5276" fg:w="17"/><text x="52.5601%" y="351.50"></text></g><g><title>alloc::alloc::alloc (17 samples, 0.17%)</title><rect x="52.3101%" y="325" width="0.1686%" height="15" fill="rgb(246,142,3)" fg:x="5276" fg:w="17"/><text x="52.5601%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (23 samples, 0.23%)</title><rect x="52.2606%" y="485" width="0.2280%" height="15" fill="rgb(241,25,7)" fg:x="5271" fg:w="23"/><text x="52.5106%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (22 samples, 0.22%)</title><rect x="52.2705%" y="469" width="0.2181%" height="15" fill="rgb(242,119,39)" fg:x="5272" fg:w="22"/><text x="52.5205%" y="479.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (22 samples, 0.22%)</title><rect x="52.2705%" y="453" width="0.2181%" height="15" fill="rgb(241,98,45)" fg:x="5272" fg:w="22"/><text x="52.5205%" y="463.50"></text></g><g><title>alloc::slice::hack::to_vec (22 samples, 0.22%)</title><rect x="52.2705%" y="437" width="0.2181%" height="15" fill="rgb(254,28,30)" fg:x="5272" fg:w="22"/><text x="52.5205%" y="447.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (22 samples, 0.22%)</title><rect x="52.2705%" y="421" width="0.2181%" height="15" fill="rgb(241,142,54)" fg:x="5272" fg:w="22"/><text x="52.5205%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (5 samples, 0.05%)</title><rect x="52.4886%" y="485" width="0.0496%" height="15" fill="rgb(222,85,15)" fg:x="5294" fg:w="5"/><text x="52.7386%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,543 samples, 25.21%)</title><rect x="27.3845%" y="501" width="25.2132%" height="15" fill="rgb(210,85,47)" fg:x="2762" fg:w="2543"/><text x="27.6345%" y="511.50">&lt;alloc::collections::btree::map::BTreeMa..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Mut,K,V,alloc::collections::btree::node::marker::Internal&gt;::push (4 samples, 0.04%)</title><rect x="52.5580%" y="485" width="0.0397%" height="15" fill="rgb(224,206,25)" fg:x="5301" fg:w="4"/><text x="52.8080%" y="495.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (2 samples, 0.02%)</title><rect x="52.5778%" y="469" width="0.0198%" height="15" fill="rgb(243,201,19)" fg:x="5303" fg:w="2"/><text x="52.8278%" y="479.50"></text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone (2,545 samples, 25.23%)</title><rect x="27.3746%" y="533" width="25.2330%" height="15" fill="rgb(236,59,4)" fg:x="2761" fg:w="2545"/><text x="27.6246%" y="543.50">&lt;alloc::collections::btree::map::BTreeMa..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::clone::Clone&gt;::clone::clone_subtree (2,545 samples, 25.23%)</title><rect x="27.3746%" y="517" width="25.2330%" height="15" fill="rgb(254,179,45)" fg:x="2761" fg:w="2545"/><text x="27.6246%" y="527.50">&lt;alloc::collections::btree::map::BTreeMa..</text></g><g><title>core::option::Option&lt;&amp;mut T&gt;::cloned (2,546 samples, 25.24%)</title><rect x="27.3746%" y="565" width="25.2429%" height="15" fill="rgb(226,14,10)" fg:x="2761" fg:w="2546"/><text x="27.6246%" y="575.50">core::option::Option&lt;&amp;mut T&gt;::cloned</text></g><g><title>&lt;machine::Context as core::clone::Clone&gt;::clone (2,546 samples, 25.24%)</title><rect x="27.3746%" y="549" width="25.2429%" height="15" fill="rgb(244,27,41)" fg:x="2761" fg:w="2546"/><text x="27.6246%" y="559.50">&lt;machine::Context as core::clone::Clone&gt;..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="54.2138%" y="405" width="0.0297%" height="15" fill="rgb(235,35,32)" fg:x="5468" fg:w="3"/><text x="54.4638%" y="415.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="54.2138%" y="389" width="0.0297%" height="15" fill="rgb(218,68,31)" fg:x="5468" fg:w="3"/><text x="54.4638%" y="399.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="54.2138%" y="373" width="0.0297%" height="15" fill="rgb(207,120,37)" fg:x="5468" fg:w="3"/><text x="54.4638%" y="383.50"></text></g><g><title>_int_free_merge_chunk (3 samples, 0.03%)</title><rect x="54.2138%" y="357" width="0.0297%" height="15" fill="rgb(227,98,0)" fg:x="5468" fg:w="3"/><text x="54.4638%" y="367.50"></text></g><g><title>_int_free_create_chunk (3 samples, 0.03%)</title><rect x="54.2138%" y="341" width="0.0297%" height="15" fill="rgb(207,7,3)" fg:x="5468" fg:w="3"/><text x="54.4638%" y="351.50"></text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_end (4 samples, 0.04%)</title><rect x="54.2138%" y="453" width="0.0397%" height="15" fill="rgb(206,98,19)" fg:x="5468" fg:w="4"/><text x="54.4638%" y="463.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_end (4 samples, 0.04%)</title><rect x="54.2138%" y="437" width="0.0397%" height="15" fill="rgb(217,5,26)" fg:x="5468" fg:w="4"/><text x="54.4638%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (4 samples, 0.04%)</title><rect x="54.2138%" y="421" width="0.0397%" height="15" fill="rgb(235,190,38)" fg:x="5468" fg:w="4"/><text x="54.4638%" y="431.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (108 samples, 1.07%)</title><rect x="55.2151%" y="373" width="1.0708%" height="15" fill="rgb(247,86,24)" fg:x="5569" fg:w="108"/><text x="55.4651%" y="383.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (21 samples, 0.21%)</title><rect x="56.0777%" y="357" width="0.2082%" height="15" fill="rgb(205,101,16)" fg:x="5656" fg:w="21"/><text x="56.3277%" y="367.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (11 samples, 0.11%)</title><rect x="56.1769%" y="341" width="0.1091%" height="15" fill="rgb(246,168,33)" fg:x="5666" fg:w="11"/><text x="56.4269%" y="351.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (11 samples, 0.11%)</title><rect x="56.1769%" y="325" width="0.1091%" height="15" fill="rgb(231,114,1)" fg:x="5666" fg:w="11"/><text x="56.4269%" y="335.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (11 samples, 0.11%)</title><rect x="56.1769%" y="309" width="0.1091%" height="15" fill="rgb(207,184,53)" fg:x="5666" fg:w="11"/><text x="56.4269%" y="319.50"></text></g><g><title>core::ptr::read (11 samples, 0.11%)</title><rect x="56.1769%" y="293" width="0.1091%" height="15" fill="rgb(224,95,51)" fg:x="5666" fg:w="11"/><text x="56.4269%" y="303.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (83 samples, 0.82%)</title><rect x="56.2859%" y="373" width="0.8229%" height="15" fill="rgb(212,188,45)" fg:x="5677" fg:w="83"/><text x="56.5359%" y="383.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (43 samples, 0.43%)</title><rect x="56.6825%" y="357" width="0.4263%" height="15" fill="rgb(223,154,38)" fg:x="5717" fg:w="43"/><text x="56.9325%" y="367.50"></text></g><g><title>_int_free (86 samples, 0.85%)</title><rect x="57.5352%" y="309" width="0.8527%" height="15" fill="rgb(251,22,52)" fg:x="5803" fg:w="86"/><text x="57.7852%" y="319.50"></text></g><g><title>_int_free_maybe_consolidate (17 samples, 0.17%)</title><rect x="58.3879%" y="309" width="0.1686%" height="15" fill="rgb(229,209,22)" fg:x="5889" fg:w="17"/><text x="58.6379%" y="319.50"></text></g><g><title>_int_free_create_chunk (35 samples, 0.35%)</title><rect x="58.9728%" y="293" width="0.3470%" height="15" fill="rgb(234,138,34)" fg:x="5948" fg:w="35"/><text x="59.2228%" y="303.50"></text></g><g><title>_int_free_merge_chunk (87 samples, 0.86%)</title><rect x="58.5564%" y="309" width="0.8626%" height="15" fill="rgb(212,95,11)" fg:x="5906" fg:w="87"/><text x="58.8064%" y="319.50"></text></g><g><title>free_perturb (10 samples, 0.10%)</title><rect x="59.3198%" y="293" width="0.0991%" height="15" fill="rgb(240,179,47)" fg:x="5983" fg:w="10"/><text x="59.5698%" y="303.50"></text></g><g><title>__GI___libc_free (228 samples, 2.26%)</title><rect x="57.2477%" y="325" width="2.2606%" height="15" fill="rgb(240,163,11)" fg:x="5774" fg:w="228"/><text x="57.4977%" y="335.50">_..</text></g><g><title>arena_for_chunk (9 samples, 0.09%)</title><rect x="59.4190%" y="309" width="0.0892%" height="15" fill="rgb(236,37,12)" fg:x="5993" fg:w="9"/><text x="59.6690%" y="319.50"></text></g><g><title>__rdl_dealloc (12 samples, 0.12%)</title><rect x="59.5082%" y="325" width="0.1190%" height="15" fill="rgb(232,164,16)" fg:x="6002" fg:w="12"/><text x="59.7582%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (12 samples, 0.12%)</title><rect x="59.5082%" y="309" width="0.1190%" height="15" fill="rgb(244,205,15)" fg:x="6002" fg:w="12"/><text x="59.7582%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (245 samples, 2.43%)</title><rect x="57.2477%" y="357" width="2.4291%" height="15" fill="rgb(223,117,47)" fg:x="5774" fg:w="245"/><text x="57.4977%" y="367.50">&lt;a..</text></g><g><title>alloc::alloc::dealloc (245 samples, 2.43%)</title><rect x="57.2477%" y="341" width="2.4291%" height="15" fill="rgb(244,107,35)" fg:x="5774" fg:w="245"/><text x="57.4977%" y="351.50">al..</text></g><g><title>__rust_dealloc (5 samples, 0.05%)</title><rect x="59.6272%" y="325" width="0.0496%" height="15" fill="rgb(205,140,8)" fg:x="6014" fg:w="5"/><text x="59.8772%" y="335.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (2 samples, 0.02%)</title><rect x="59.6867%" y="341" width="0.0198%" height="15" fill="rgb(228,84,46)" fg:x="6020" fg:w="2"/><text x="59.9367%" y="351.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked (553 samples, 5.48%)</title><rect x="54.2534%" y="437" width="5.4828%" height="15" fill="rgb(254,188,9)" fg:x="5472" fg:w="553"/><text x="54.5034%" y="447.50">alloc::..</text></g><g><title>alloc::collections::btree::mem::replace (553 samples, 5.48%)</title><rect x="54.2534%" y="421" width="5.4828%" height="15" fill="rgb(206,112,54)" fg:x="5472" fg:w="553"/><text x="54.5034%" y="431.50">alloc::..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next_unchecked::_{{closure}} (470 samples, 4.66%)</title><rect x="55.0763%" y="405" width="4.6599%" height="15" fill="rgb(216,84,49)" fg:x="5555" fg:w="470"/><text x="55.3263%" y="415.50">alloc..</text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::deallocating_next (470 samples, 4.66%)</title><rect x="55.0763%" y="389" width="4.6599%" height="15" fill="rgb(214,194,35)" fg:x="5555" fg:w="470"/><text x="55.3263%" y="399.50">alloc..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;::deallocate_and_ascend (265 samples, 2.63%)</title><rect x="57.1089%" y="373" width="2.6274%" height="15" fill="rgb(249,28,3)" fg:x="5760" fg:w="265"/><text x="57.3589%" y="383.50">al..</text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (6 samples, 0.06%)</title><rect x="59.6768%" y="357" width="0.0595%" height="15" fill="rgb(222,56,52)" fg:x="6019" fg:w="6"/><text x="59.9268%" y="367.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.03%)</title><rect x="59.7065%" y="341" width="0.0297%" height="15" fill="rgb(245,217,50)" fg:x="6022" fg:w="3"/><text x="59.9565%" y="351.50"></text></g><g><title>alloc::collections::btree::map::IntoIter&lt;K,V,A&gt;::dying_next (741 samples, 7.35%)</title><rect x="53.2917%" y="469" width="7.3468%" height="15" fill="rgb(213,201,24)" fg:x="5375" fg:w="741"/><text x="53.5417%" y="479.50">alloc::col..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Dying,K,V&gt;::deallocating_next_unchecked (644 samples, 6.39%)</title><rect x="54.2534%" y="453" width="6.3851%" height="15" fill="rgb(248,116,28)" fg:x="5472" fg:w="644"/><text x="54.5034%" y="463.50">alloc::c..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (91 samples, 0.90%)</title><rect x="59.7363%" y="437" width="0.9022%" height="15" fill="rgb(219,72,43)" fg:x="6025" fg:w="91"/><text x="59.9863%" y="447.50"></text></g><g><title>[graphwalker] (30 samples, 0.30%)</title><rect x="62.5322%" y="325" width="0.2974%" height="15" fill="rgb(209,138,14)" fg:x="6307" fg:w="30"/><text x="62.7822%" y="335.50"></text></g><g><title>_int_free (30 samples, 0.30%)</title><rect x="62.5322%" y="309" width="0.2974%" height="15" fill="rgb(222,18,33)" fg:x="6307" fg:w="30"/><text x="62.7822%" y="319.50"></text></g><g><title>_int_free (559 samples, 5.54%)</title><rect x="62.8297%" y="325" width="5.5423%" height="15" fill="rgb(213,199,7)" fg:x="6337" fg:w="559"/><text x="63.0797%" y="335.50">_int_fr..</text></g><g><title>free_perturb (36 samples, 0.36%)</title><rect x="68.0151%" y="309" width="0.3569%" height="15" fill="rgb(250,110,10)" fg:x="6860" fg:w="36"/><text x="68.2651%" y="319.50"></text></g><g><title>__GI___libc_free (792 samples, 7.85%)</title><rect x="61.0450%" y="341" width="7.8525%" height="15" fill="rgb(248,123,6)" fg:x="6157" fg:w="792"/><text x="61.2950%" y="351.50">__GI___libc..</text></g><g><title>arena_for_chunk (53 samples, 0.53%)</title><rect x="68.3720%" y="325" width="0.5255%" height="15" fill="rgb(206,91,31)" fg:x="6896" fg:w="53"/><text x="68.6220%" y="335.50"></text></g><g><title>__rdl_dealloc (52 samples, 0.52%)</title><rect x="68.8975%" y="341" width="0.5156%" height="15" fill="rgb(211,154,13)" fg:x="6949" fg:w="52"/><text x="69.1475%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (52 samples, 0.52%)</title><rect x="68.8975%" y="325" width="0.5156%" height="15" fill="rgb(225,148,7)" fg:x="6949" fg:w="52"/><text x="69.1475%" y="335.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (922 samples, 9.14%)</title><rect x="60.6881%" y="373" width="9.1414%" height="15" fill="rgb(220,160,43)" fg:x="6121" fg:w="922"/><text x="60.9381%" y="383.50">&lt;alloc::alloc..</text></g><g><title>alloc::alloc::dealloc (922 samples, 9.14%)</title><rect x="60.6881%" y="357" width="9.1414%" height="15" fill="rgb(213,52,39)" fg:x="6121" fg:w="922"/><text x="60.9381%" y="367.50">alloc::alloc:..</text></g><g><title>__rust_dealloc (42 samples, 0.42%)</title><rect x="69.4130%" y="341" width="0.4164%" height="15" fill="rgb(243,137,7)" fg:x="7001" fg:w="42"/><text x="69.6630%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,u32&gt;&gt; (1,766 samples, 17.51%)</title><rect x="52.6175%" y="549" width="17.5094%" height="15" fill="rgb(230,79,13)" fg:x="5307" fg:w="1766"/><text x="52.8675%" y="559.50">core::ptr::drop_in_place&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,766 samples, 17.51%)</title><rect x="52.6175%" y="533" width="17.5094%" height="15" fill="rgb(247,105,23)" fg:x="5307" fg:w="1766"/><text x="52.8675%" y="543.50">&lt;alloc::collections::btree:..</text></g><g><title>core::mem::drop (1,766 samples, 17.51%)</title><rect x="52.6175%" y="517" width="17.5094%" height="15" fill="rgb(223,179,41)" fg:x="5307" fg:w="1766"/><text x="52.8675%" y="527.50">core::mem::drop</text></g><g><title>core::ptr::drop_in_place&lt;alloc::collections::btree::map::IntoIter&lt;alloc::string::String,u32&gt;&gt; (1,766 samples, 17.51%)</title><rect x="52.6175%" y="501" width="17.5094%" height="15" fill="rgb(218,9,34)" fg:x="5307" fg:w="1766"/><text x="52.8675%" y="511.50">core::ptr::drop_in_place&lt;al..</text></g><g><title>&lt;alloc::collections::btree::map::IntoIter&lt;K,V,A&gt; as core::ops::drop::Drop&gt;::drop (1,766 samples, 17.51%)</title><rect x="52.6175%" y="485" width="17.5094%" height="15" fill="rgb(222,106,8)" fg:x="5307" fg:w="1766"/><text x="52.8675%" y="495.50">&lt;alloc::collections::btree:..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Dying,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::drop_key_val (957 samples, 9.49%)</title><rect x="60.6385%" y="469" width="9.4884%" height="15" fill="rgb(211,220,0)" fg:x="6116" fg:w="957"/><text x="60.8885%" y="479.50">alloc::collect..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_drop (957 samples, 9.49%)</title><rect x="60.6385%" y="453" width="9.4884%" height="15" fill="rgb(229,52,16)" fg:x="6116" fg:w="957"/><text x="60.8885%" y="463.50">core::mem::may..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (957 samples, 9.49%)</title><rect x="60.6385%" y="437" width="9.4884%" height="15" fill="rgb(212,155,18)" fg:x="6116" fg:w="957"/><text x="60.8885%" y="447.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (957 samples, 9.49%)</title><rect x="60.6385%" y="421" width="9.4884%" height="15" fill="rgb(242,21,14)" fg:x="6116" fg:w="957"/><text x="60.8885%" y="431.50">core::ptr::dro..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (957 samples, 9.49%)</title><rect x="60.6385%" y="405" width="9.4884%" height="15" fill="rgb(222,19,48)" fg:x="6116" fg:w="957"/><text x="60.8885%" y="415.50">core::ptr::dro..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (957 samples, 9.49%)</title><rect x="60.6385%" y="389" width="9.4884%" height="15" fill="rgb(232,45,27)" fg:x="6116" fg:w="957"/><text x="60.8885%" y="399.50">&lt;alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (30 samples, 0.30%)</title><rect x="69.8295%" y="373" width="0.2974%" height="15" fill="rgb(249,103,42)" fg:x="7043" fg:w="30"/><text x="70.0795%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (2 samples, 0.02%)</title><rect x="70.1269%" y="549" width="0.0198%" height="15" fill="rgb(246,81,33)" fg:x="7073" fg:w="2"/><text x="70.3769%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="70.1269%" y="533" width="0.0198%" height="15" fill="rgb(252,33,42)" fg:x="7073" fg:w="2"/><text x="70.3769%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.02%)</title><rect x="70.1269%" y="517" width="0.0198%" height="15" fill="rgb(209,212,41)" fg:x="7073" fg:w="2"/><text x="70.3769%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="70.1269%" y="501" width="0.0198%" height="15" fill="rgb(207,154,6)" fg:x="7073" fg:w="2"/><text x="70.3769%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.02%)</title><rect x="70.1269%" y="485" width="0.0198%" height="15" fill="rgb(223,64,47)" fg:x="7073" fg:w="2"/><text x="70.3769%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.02%)</title><rect x="70.1269%" y="469" width="0.0198%" height="15" fill="rgb(211,161,38)" fg:x="7073" fg:w="2"/><text x="70.3769%" y="479.50"></text></g><g><title>__GI___libc_free (2 samples, 0.02%)</title><rect x="70.1269%" y="453" width="0.0198%" height="15" fill="rgb(219,138,40)" fg:x="7073" fg:w="2"/><text x="70.3769%" y="463.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="70.1269%" y="437" width="0.0198%" height="15" fill="rgb(241,228,46)" fg:x="7073" fg:w="2"/><text x="70.3769%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Context&gt; (1,769 samples, 17.54%)</title><rect x="52.6175%" y="565" width="17.5392%" height="15" fill="rgb(223,209,38)" fg:x="5307" fg:w="1769"/><text x="52.8675%" y="575.50">core::ptr::drop_in_place&lt;ma..</text></g><g><title>core::ptr::drop_in_place&lt;machine::Position&gt; (3 samples, 0.03%)</title><rect x="70.1567%" y="565" width="0.0297%" height="15" fill="rgb(236,164,45)" fg:x="7076" fg:w="3"/><text x="70.4067%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 0.03%)</title><rect x="70.1567%" y="549" width="0.0297%" height="15" fill="rgb(231,15,5)" fg:x="7076" fg:w="3"/><text x="70.4067%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="70.1567%" y="533" width="0.0297%" height="15" fill="rgb(252,35,15)" fg:x="7076" fg:w="3"/><text x="70.4067%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 0.03%)</title><rect x="70.1567%" y="517" width="0.0297%" height="15" fill="rgb(248,181,18)" fg:x="7076" fg:w="3"/><text x="70.4067%" y="527.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="70.1567%" y="501" width="0.0297%" height="15" fill="rgb(233,39,42)" fg:x="7076" fg:w="3"/><text x="70.4067%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="70.1567%" y="485" width="0.0297%" height="15" fill="rgb(238,110,33)" fg:x="7076" fg:w="3"/><text x="70.4067%" y="495.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="70.1567%" y="469" width="0.0297%" height="15" fill="rgb(233,195,10)" fg:x="7076" fg:w="3"/><text x="70.4067%" y="479.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="70.1567%" y="453" width="0.0297%" height="15" fill="rgb(254,105,3)" fg:x="7076" fg:w="3"/><text x="70.4067%" y="463.50"></text></g><g><title>__memcmp_avx2_movbe (17 samples, 0.17%)</title><rect x="70.3649%" y="421" width="0.1686%" height="15" fill="rgb(221,225,9)" fg:x="7097" fg:w="17"/><text x="70.6149%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::contains_key (36 samples, 0.36%)</title><rect x="70.2062%" y="549" width="0.3569%" height="15" fill="rgb(224,227,45)" fg:x="7081" fg:w="36"/><text x="70.4562%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (36 samples, 0.36%)</title><rect x="70.2062%" y="533" width="0.3569%" height="15" fill="rgb(229,198,43)" fg:x="7081" fg:w="36"/><text x="70.4562%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (36 samples, 0.36%)</title><rect x="70.2062%" y="517" width="0.3569%" height="15" fill="rgb(206,209,35)" fg:x="7081" fg:w="36"/><text x="70.4562%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (34 samples, 0.34%)</title><rect x="70.2261%" y="501" width="0.3371%" height="15" fill="rgb(245,195,53)" fg:x="7083" fg:w="34"/><text x="70.4761%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (34 samples, 0.34%)</title><rect x="70.2261%" y="485" width="0.3371%" height="15" fill="rgb(240,92,26)" fg:x="7083" fg:w="34"/><text x="70.4761%" y="495.50"></text></g><g><title>core::str::traits::&lt;impl core::cmp::Ord for str&gt;::cmp (24 samples, 0.24%)</title><rect x="70.3252%" y="469" width="0.2380%" height="15" fill="rgb(207,40,23)" fg:x="7093" fg:w="24"/><text x="70.5752%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (24 samples, 0.24%)</title><rect x="70.3252%" y="453" width="0.2380%" height="15" fill="rgb(223,111,35)" fg:x="7093" fg:w="24"/><text x="70.5752%" y="463.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (24 samples, 0.24%)</title><rect x="70.3252%" y="437" width="0.2380%" height="15" fill="rgb(229,147,28)" fg:x="7093" fg:w="24"/><text x="70.5752%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (3 samples, 0.03%)</title><rect x="70.5334%" y="421" width="0.0297%" height="15" fill="rgb(211,29,28)" fg:x="7114" fg:w="3"/><text x="70.7834%" y="431.50"></text></g><g><title>graph::Model::has_id (39 samples, 0.39%)</title><rect x="70.1963%" y="565" width="0.3867%" height="15" fill="rgb(228,72,33)" fg:x="7080" fg:w="39"/><text x="70.4463%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::rwlock::RwLockReadGuard&lt;alloc::collections::btree::map::BTreeMap&lt;alloc::string::String,alloc::sync::Arc&lt;graph::Edge&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="70.5632%" y="549" width="0.0198%" height="15" fill="rgb(205,214,31)" fg:x="7117" fg:w="2"/><text x="70.8132%" y="559.50"></text></g><g><title>&lt;std::sync::rwlock::RwLockReadGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.02%)</title><rect x="70.5632%" y="533" width="0.0198%" height="15" fill="rgb(224,111,15)" fg:x="7117" fg:w="2"/><text x="70.8132%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read_unlock (2 samples, 0.02%)</title><rect x="70.5632%" y="517" width="0.0198%" height="15" fill="rgb(253,21,26)" fg:x="7117" fg:w="2"/><text x="70.8132%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::fetch_sub (2 samples, 0.02%)</title><rect x="70.5632%" y="501" width="0.0198%" height="15" fill="rgb(245,139,43)" fg:x="7117" fg:w="2"/><text x="70.8132%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="70.5632%" y="485" width="0.0198%" height="15" fill="rgb(252,170,7)" fg:x="7117" fg:w="2"/><text x="70.8132%" y="495.50"></text></g><g><title>_int_malloc (12 samples, 0.12%)</title><rect x="70.6623%" y="357" width="0.1190%" height="15" fill="rgb(231,118,14)" fg:x="7127" fg:w="12"/><text x="70.9123%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (16 samples, 0.16%)</title><rect x="70.6425%" y="549" width="0.1586%" height="15" fill="rgb(238,83,0)" fg:x="7125" fg:w="16"/><text x="70.8925%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (16 samples, 0.16%)</title><rect x="70.6425%" y="533" width="0.1586%" height="15" fill="rgb(221,39,39)" fg:x="7125" fg:w="16"/><text x="70.8925%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (16 samples, 0.16%)</title><rect x="70.6425%" y="517" width="0.1586%" height="15" fill="rgb(222,119,46)" fg:x="7125" fg:w="16"/><text x="70.8925%" y="527.50"></text></g><g><title>alloc::slice::hack::to_vec (16 samples, 0.16%)</title><rect x="70.6425%" y="501" width="0.1586%" height="15" fill="rgb(222,165,49)" fg:x="7125" fg:w="16"/><text x="70.8925%" y="511.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (16 samples, 0.16%)</title><rect x="70.6425%" y="485" width="0.1586%" height="15" fill="rgb(219,113,52)" fg:x="7125" fg:w="16"/><text x="70.8925%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (16 samples, 0.16%)</title><rect x="70.6425%" y="469" width="0.1586%" height="15" fill="rgb(214,7,15)" fg:x="7125" fg:w="16"/><text x="70.8925%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (16 samples, 0.16%)</title><rect x="70.6425%" y="453" width="0.1586%" height="15" fill="rgb(235,32,4)" fg:x="7125" fg:w="16"/><text x="70.8925%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (16 samples, 0.16%)</title><rect x="70.6425%" y="437" width="0.1586%" height="15" fill="rgb(238,90,54)" fg:x="7125" fg:w="16"/><text x="70.8925%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (15 samples, 0.15%)</title><rect x="70.6524%" y="421" width="0.1487%" height="15" fill="rgb(213,208,19)" fg:x="7126" fg:w="15"/><text x="70.9024%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (15 samples, 0.15%)</title><rect x="70.6524%" y="405" width="0.1487%" height="15" fill="rgb(233,156,4)" fg:x="7126" fg:w="15"/><text x="70.9024%" y="415.50"></text></g><g><title>alloc::alloc::alloc (15 samples, 0.15%)</title><rect x="70.6524%" y="389" width="0.1487%" height="15" fill="rgb(207,194,5)" fg:x="7126" fg:w="15"/><text x="70.9024%" y="399.50"></text></g><g><title>__GI___libc_malloc (15 samples, 0.15%)</title><rect x="70.6524%" y="373" width="0.1487%" height="15" fill="rgb(206,111,30)" fg:x="7126" fg:w="15"/><text x="70.9024%" y="383.50"></text></g><g><title>tcache_get (2 samples, 0.02%)</title><rect x="70.7813%" y="357" width="0.0198%" height="15" fill="rgb(243,70,54)" fg:x="7139" fg:w="2"/><text x="71.0313%" y="367.50"></text></g><g><title>tcache_get_n (2 samples, 0.02%)</title><rect x="70.7813%" y="341" width="0.0198%" height="15" fill="rgb(242,28,8)" fg:x="7139" fg:w="2"/><text x="71.0313%" y="351.50"></text></g><g><title>_int_malloc (2 samples, 0.02%)</title><rect x="70.8209%" y="341" width="0.0198%" height="15" fill="rgb(219,106,18)" fg:x="7143" fg:w="2"/><text x="71.0709%" y="351.50"></text></g><g><title>__GI___libc_malloc (4 samples, 0.04%)</title><rect x="70.8110%" y="357" width="0.0397%" height="15" fill="rgb(244,222,10)" fg:x="7142" fg:w="4"/><text x="71.0610%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (5 samples, 0.05%)</title><rect x="70.8110%" y="405" width="0.0496%" height="15" fill="rgb(236,179,52)" fg:x="7142" fg:w="5"/><text x="71.0610%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.05%)</title><rect x="70.8110%" y="389" width="0.0496%" height="15" fill="rgb(213,23,39)" fg:x="7142" fg:w="5"/><text x="71.0610%" y="399.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.05%)</title><rect x="70.8110%" y="373" width="0.0496%" height="15" fill="rgb(238,48,10)" fg:x="7142" fg:w="5"/><text x="71.0610%" y="383.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (7 samples, 0.07%)</title><rect x="70.8011%" y="549" width="0.0694%" height="15" fill="rgb(251,196,23)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (7 samples, 0.07%)</title><rect x="70.8011%" y="533" width="0.0694%" height="15" fill="rgb(250,152,24)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (7 samples, 0.07%)</title><rect x="70.8011%" y="517" width="0.0694%" height="15" fill="rgb(209,150,17)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (7 samples, 0.07%)</title><rect x="70.8011%" y="501" width="0.0694%" height="15" fill="rgb(234,202,34)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (7 samples, 0.07%)</title><rect x="70.8011%" y="485" width="0.0694%" height="15" fill="rgb(253,148,53)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (7 samples, 0.07%)</title><rect x="70.8011%" y="469" width="0.0694%" height="15" fill="rgb(218,129,16)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="479.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (7 samples, 0.07%)</title><rect x="70.8011%" y="453" width="0.0694%" height="15" fill="rgb(216,85,19)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (7 samples, 0.07%)</title><rect x="70.8011%" y="437" width="0.0694%" height="15" fill="rgb(235,228,7)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (7 samples, 0.07%)</title><rect x="70.8011%" y="421" width="0.0694%" height="15" fill="rgb(245,175,0)" fg:x="7141" fg:w="7"/><text x="71.0511%" y="431.50"></text></g><g><title>__memcmp_avx2_movbe (2 samples, 0.02%)</title><rect x="70.9895%" y="421" width="0.0198%" height="15" fill="rgb(208,168,36)" fg:x="7160" fg:w="2"/><text x="71.2395%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (6 samples, 0.06%)</title><rect x="70.9697%" y="485" width="0.0595%" height="15" fill="rgb(246,171,24)" fg:x="7158" fg:w="6"/><text x="71.2197%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (6 samples, 0.06%)</title><rect x="70.9697%" y="469" width="0.0595%" height="15" fill="rgb(215,142,24)" fg:x="7158" fg:w="6"/><text x="71.2197%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (6 samples, 0.06%)</title><rect x="70.9697%" y="453" width="0.0595%" height="15" fill="rgb(250,187,7)" fg:x="7158" fg:w="6"/><text x="71.2197%" y="463.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (6 samples, 0.06%)</title><rect x="70.9697%" y="437" width="0.0595%" height="15" fill="rgb(228,66,33)" fg:x="7158" fg:w="6"/><text x="71.2197%" y="447.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (2 samples, 0.02%)</title><rect x="71.0093%" y="421" width="0.0198%" height="15" fill="rgb(234,215,21)" fg:x="7162" fg:w="2"/><text x="71.2593%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (17 samples, 0.17%)</title><rect x="70.8705%" y="549" width="0.1686%" height="15" fill="rgb(222,191,20)" fg:x="7148" fg:w="17"/><text x="71.1205%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (17 samples, 0.17%)</title><rect x="70.8705%" y="533" width="0.1686%" height="15" fill="rgb(245,79,54)" fg:x="7148" fg:w="17"/><text x="71.1205%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (16 samples, 0.16%)</title><rect x="70.8804%" y="517" width="0.1586%" height="15" fill="rgb(240,10,37)" fg:x="7149" fg:w="16"/><text x="71.1304%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (16 samples, 0.16%)</title><rect x="70.8804%" y="501" width="0.1586%" height="15" fill="rgb(214,192,32)" fg:x="7149" fg:w="16"/><text x="71.1304%" y="511.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="71.0688%" y="389" width="0.0694%" height="15" fill="rgb(209,36,54)" fg:x="7168" fg:w="7"/><text x="71.3188%" y="399.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="71.0688%" y="373" width="0.0694%" height="15" fill="rgb(220,10,11)" fg:x="7168" fg:w="7"/><text x="71.3188%" y="383.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="71.0688%" y="357" width="0.0694%" height="15" fill="rgb(221,106,17)" fg:x="7168" fg:w="7"/><text x="71.3188%" y="367.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="71.0688%" y="341" width="0.0694%" height="15" fill="rgb(251,142,44)" fg:x="7168" fg:w="7"/><text x="71.3188%" y="351.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="71.0688%" y="325" width="0.0694%" height="15" fill="rgb(238,13,15)" fg:x="7168" fg:w="7"/><text x="71.3188%" y="335.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="71.0688%" y="309" width="0.0694%" height="15" fill="rgb(208,107,27)" fg:x="7168" fg:w="7"/><text x="71.3188%" y="319.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="71.0787%" y="293" width="0.0595%" height="15" fill="rgb(205,136,37)" fg:x="7169" fg:w="6"/><text x="71.3287%" y="303.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="71.0787%" y="277" width="0.0595%" height="15" fill="rgb(250,205,27)" fg:x="7169" fg:w="6"/><text x="71.3287%" y="287.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="71.0886%" y="261" width="0.0496%" height="15" fill="rgb(210,80,43)" fg:x="7170" fg:w="5"/><text x="71.3386%" y="271.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="71.1085%" y="245" width="0.0297%" height="15" fill="rgb(247,160,36)" fg:x="7172" fg:w="3"/><text x="71.3585%" y="255.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="71.1184%" y="229" width="0.0198%" height="15" fill="rgb(234,13,49)" fg:x="7173" fg:w="2"/><text x="71.3684%" y="239.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="71.1184%" y="213" width="0.0198%" height="15" fill="rgb(234,122,0)" fg:x="7173" fg:w="2"/><text x="71.3684%" y="223.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="71.1382%" y="389" width="0.0198%" height="15" fill="rgb(207,146,38)" fg:x="7175" fg:w="2"/><text x="71.3882%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 0.13%)</title><rect x="71.0391%" y="533" width="0.1289%" height="15" fill="rgb(207,177,25)" fg:x="7165" fg:w="13"/><text x="71.2891%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 0.13%)</title><rect x="71.0391%" y="517" width="0.1289%" height="15" fill="rgb(211,178,42)" fg:x="7165" fg:w="13"/><text x="71.2891%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (11 samples, 0.11%)</title><rect x="71.0589%" y="501" width="0.1091%" height="15" fill="rgb(230,69,54)" fg:x="7167" fg:w="11"/><text x="71.3089%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (10 samples, 0.10%)</title><rect x="71.0688%" y="485" width="0.0991%" height="15" fill="rgb(214,135,41)" fg:x="7168" fg:w="10"/><text x="71.3188%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (10 samples, 0.10%)</title><rect x="71.0688%" y="469" width="0.0991%" height="15" fill="rgb(237,67,25)" fg:x="7168" fg:w="10"/><text x="71.3188%" y="479.50"></text></g><g><title>alloc::alloc::realloc (10 samples, 0.10%)</title><rect x="71.0688%" y="453" width="0.0991%" height="15" fill="rgb(222,189,50)" fg:x="7168" fg:w="10"/><text x="71.3188%" y="463.50"></text></g><g><title>__GI___libc_realloc (10 samples, 0.10%)</title><rect x="71.0688%" y="437" width="0.0991%" height="15" fill="rgb(245,148,34)" fg:x="7168" fg:w="10"/><text x="71.3188%" y="447.50"></text></g><g><title>_int_realloc (10 samples, 0.10%)</title><rect x="71.0688%" y="421" width="0.0991%" height="15" fill="rgb(222,29,6)" fg:x="7168" fg:w="10"/><text x="71.3188%" y="431.50"></text></g><g><title>_int_malloc (10 samples, 0.10%)</title><rect x="71.0688%" y="405" width="0.0991%" height="15" fill="rgb(221,189,43)" fg:x="7168" fg:w="10"/><text x="71.3188%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (14 samples, 0.14%)</title><rect x="71.0391%" y="549" width="0.1388%" height="15" fill="rgb(207,36,27)" fg:x="7165" fg:w="14"/><text x="71.2891%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;graph::Edge&gt;&gt; (3 samples, 0.03%)</title><rect x="71.1779%" y="549" width="0.0297%" height="15" fill="rgb(217,90,24)" fg:x="7179" fg:w="3"/><text x="71.4279%" y="559.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="71.1779%" y="533" width="0.0297%" height="15" fill="rgb(224,66,35)" fg:x="7179" fg:w="3"/><text x="71.4279%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_sub (2 samples, 0.02%)</title><rect x="71.1878%" y="517" width="0.0198%" height="15" fill="rgb(221,13,50)" fg:x="7180" fg:w="2"/><text x="71.4378%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_sub (2 samples, 0.02%)</title><rect x="71.1878%" y="501" width="0.0198%" height="15" fill="rgb(236,68,49)" fg:x="7180" fg:w="2"/><text x="71.4378%" y="511.50"></text></g><g><title>__GI___libc_free (3 samples, 0.03%)</title><rect x="71.2076%" y="389" width="0.0297%" height="15" fill="rgb(229,146,28)" fg:x="7182" fg:w="3"/><text x="71.4576%" y="399.50"></text></g><g><title>_int_free (2 samples, 0.02%)</title><rect x="71.2175%" y="373" width="0.0198%" height="15" fill="rgb(225,31,38)" fg:x="7183" fg:w="2"/><text x="71.4675%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.05%)</title><rect x="71.2076%" y="533" width="0.0496%" height="15" fill="rgb(250,208,3)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;[machine::Position]&gt; (5 samples, 0.05%)</title><rect x="71.2076%" y="517" width="0.0496%" height="15" fill="rgb(246,54,23)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;machine::Position&gt; (5 samples, 0.05%)</title><rect x="71.2076%" y="501" width="0.0496%" height="15" fill="rgb(243,76,11)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (5 samples, 0.05%)</title><rect x="71.2076%" y="485" width="0.0496%" height="15" fill="rgb(245,21,50)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (5 samples, 0.05%)</title><rect x="71.2076%" y="469" width="0.0496%" height="15" fill="rgb(228,9,43)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (5 samples, 0.05%)</title><rect x="71.2076%" y="453" width="0.0496%" height="15" fill="rgb(208,100,47)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (5 samples, 0.05%)</title><rect x="71.2076%" y="437" width="0.0496%" height="15" fill="rgb(232,26,8)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (5 samples, 0.05%)</title><rect x="71.2076%" y="421" width="0.0496%" height="15" fill="rgb(216,166,38)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (5 samples, 0.05%)</title><rect x="71.2076%" y="405" width="0.0496%" height="15" fill="rgb(251,202,51)" fg:x="7182" fg:w="5"/><text x="71.4576%" y="415.50"></text></g><g><title>__rdl_dealloc (2 samples, 0.02%)</title><rect x="71.2374%" y="389" width="0.0198%" height="15" fill="rgb(254,216,34)" fg:x="7185" fg:w="2"/><text x="71.4874%" y="399.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (2 samples, 0.02%)</title><rect x="71.2374%" y="373" width="0.0198%" height="15" fill="rgb(251,32,27)" fg:x="7185" fg:w="2"/><text x="71.4874%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;machine::Position&gt;&gt; (9 samples, 0.09%)</title><rect x="71.2076%" y="549" width="0.0892%" height="15" fill="rgb(208,127,28)" fg:x="7182" fg:w="9"/><text x="71.4576%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;machine::Position&gt;&gt; (4 samples, 0.04%)</title><rect x="71.2572%" y="533" width="0.0397%" height="15" fill="rgb(224,137,22)" fg:x="7187" fg:w="4"/><text x="71.5072%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="71.2572%" y="517" width="0.0397%" height="15" fill="rgb(254,70,32)" fg:x="7187" fg:w="4"/><text x="71.5072%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.04%)</title><rect x="71.2572%" y="501" width="0.0397%" height="15" fill="rgb(229,75,37)" fg:x="7187" fg:w="4"/><text x="71.5072%" y="511.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.04%)</title><rect x="71.2572%" y="485" width="0.0397%" height="15" fill="rgb(252,64,23)" fg:x="7187" fg:w="4"/><text x="71.5072%" y="495.50"></text></g><g><title>__GI___libc_free (4 samples, 0.04%)</title><rect x="71.2572%" y="469" width="0.0397%" height="15" fill="rgb(232,162,48)" fg:x="7187" fg:w="4"/><text x="71.5072%" y="479.50"></text></g><g><title>_int_free_maybe_consolidate (2 samples, 0.02%)</title><rect x="71.2770%" y="453" width="0.0198%" height="15" fill="rgb(246,160,12)" fg:x="7189" fg:w="2"/><text x="71.5270%" y="463.50"></text></g><g><title>malloc_consolidate (2 samples, 0.02%)</title><rect x="71.2770%" y="437" width="0.0198%" height="15" fill="rgb(247,166,0)" fg:x="7189" fg:w="2"/><text x="71.5270%" y="447.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,NodeType&gt;,alloc::collections::btree::node::marker::Edge&gt;::right_kv (66 samples, 0.65%)</title><rect x="71.8422%" y="421" width="0.6544%" height="15" fill="rgb(249,219,21)" fg:x="7246" fg:w="66"/><text x="72.0922%" y="431.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::len (31 samples, 0.31%)</title><rect x="72.1892%" y="405" width="0.3074%" height="15" fill="rgb(205,209,3)" fg:x="7281" fg:w="31"/><text x="72.4392%" y="415.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_kv (75 samples, 0.74%)</title><rect x="71.8422%" y="437" width="0.7436%" height="15" fill="rgb(243,44,1)" fg:x="7246" fg:w="75"/><text x="72.0922%" y="447.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;::ascend (9 samples, 0.09%)</title><rect x="72.4965%" y="421" width="0.0892%" height="15" fill="rgb(206,159,16)" fg:x="7312" fg:w="9"/><text x="72.7465%" y="431.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (6 samples, 0.06%)</title><rect x="72.5263%" y="405" width="0.0595%" height="15" fill="rgb(244,77,30)" fg:x="7315" fg:w="6"/><text x="72.7763%" y="415.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;,alloc::collections::btree::node::marker::KV&gt;&gt;::next_leaf_edge (65 samples, 0.64%)</title><rect x="72.5858%" y="437" width="0.6445%" height="15" fill="rgb(218,69,12)" fg:x="7321" fg:w="65"/><text x="72.8358%" y="447.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::first_leaf_edge (39 samples, 0.39%)</title><rect x="72.8435%" y="421" width="0.3867%" height="15" fill="rgb(212,87,7)" fg:x="7347" fg:w="39"/><text x="73.0935%" y="431.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (7 samples, 0.07%)</title><rect x="73.1608%" y="405" width="0.0694%" height="15" fill="rgb(245,114,25)" fg:x="7379" fg:w="7"/><text x="73.4108%" y="415.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (7 samples, 0.07%)</title><rect x="73.1608%" y="389" width="0.0694%" height="15" fill="rgb(210,61,42)" fg:x="7379" fg:w="7"/><text x="73.4108%" y="399.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (7 samples, 0.07%)</title><rect x="73.1608%" y="373" width="0.0694%" height="15" fill="rgb(211,52,33)" fg:x="7379" fg:w="7"/><text x="73.4108%" y="383.50"></text></g><g><title>core::ptr::read (7 samples, 0.07%)</title><rect x="73.1608%" y="357" width="0.0694%" height="15" fill="rgb(234,58,33)" fg:x="7379" fg:w="7"/><text x="73.4108%" y="367.50"></text></g><g><title>alloc::collections::btree::navigate::&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked (179 samples, 1.77%)</title><rect x="71.8422%" y="485" width="1.7747%" height="15" fill="rgb(220,115,36)" fg:x="7246" fg:w="179"/><text x="72.0922%" y="495.50">a..</text></g><g><title>alloc::collections::btree::mem::replace (179 samples, 1.77%)</title><rect x="71.8422%" y="469" width="1.7747%" height="15" fill="rgb(243,153,54)" fg:x="7246" fg:w="179"/><text x="72.0922%" y="479.50">a..</text></g><g><title>alloc::collections::btree::navigate::_&lt;impl alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,alloc::collections::btree::node::marker::Leaf&gt;,alloc::collections::btree::node::marker::Edge&gt;&gt;::next_unchecked::_{{closure}} (179 samples, 1.77%)</title><rect x="71.8422%" y="453" width="1.7747%" height="15" fill="rgb(251,47,18)" fg:x="7246" fg:w="179"/><text x="72.0922%" y="463.50">a..</text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,NodeType&gt;,alloc::collections::btree::node::marker::KV&gt;::into_kv (39 samples, 0.39%)</title><rect x="73.2302%" y="437" width="0.3867%" height="15" fill="rgb(242,102,42)" fg:x="7386" fg:w="39"/><text x="73.4802%" y="447.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (39 samples, 0.39%)</title><rect x="73.2302%" y="421" width="0.3867%" height="15" fill="rgb(234,31,38)" fg:x="7386" fg:w="39"/><text x="73.4802%" y="431.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (39 samples, 0.39%)</title><rect x="73.2302%" y="405" width="0.3867%" height="15" fill="rgb(221,117,51)" fg:x="7386" fg:w="39"/><text x="73.4802%" y="415.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (39 samples, 0.39%)</title><rect x="73.2302%" y="389" width="0.3867%" height="15" fill="rgb(212,20,18)" fg:x="7386" fg:w="39"/><text x="73.4802%" y="399.50"></text></g><g><title>&lt;alloc::collections::btree::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (286 samples, 2.84%)</title><rect x="71.3266%" y="517" width="2.8356%" height="15" fill="rgb(245,133,36)" fg:x="7194" fg:w="286"/><text x="71.5766%" y="527.50">&lt;a..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;alloc::collections::btree::node::marker::Immut,K,V&gt;::next_unchecked (234 samples, 2.32%)</title><rect x="71.8422%" y="501" width="2.3200%" height="15" fill="rgb(212,6,19)" fg:x="7246" fg:w="234"/><text x="72.0922%" y="511.50">a..</text></g><g><title>alloc::collections::btree::navigate::LazyLeafRange&lt;BorrowType,K,V&gt;::init_front (55 samples, 0.55%)</title><rect x="73.6169%" y="485" width="0.5453%" height="15" fill="rgb(218,1,36)" fg:x="7425" fg:w="55"/><text x="73.8669%" y="495.50"></text></g><g><title>&lt;alloc::collections::btree::map::Values&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (291 samples, 2.89%)</title><rect x="71.3266%" y="533" width="2.8852%" height="15" fill="rgb(246,84,54)" fg:x="7194" fg:w="291"/><text x="71.5766%" y="543.50">&lt;a..</text></g><g><title>core::option::Option&lt;T&gt;::map (5 samples, 0.05%)</title><rect x="74.1622%" y="517" width="0.0496%" height="15" fill="rgb(242,110,6)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="527.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="501" width="0.0496%" height="15" fill="rgb(214,47,5)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="511.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="485" width="0.0496%" height="15" fill="rgb(218,159,25)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="495.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="469" width="0.0496%" height="15" fill="rgb(215,211,28)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="479.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="453" width="0.0496%" height="15" fill="rgb(238,59,32)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="463.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="437" width="0.0496%" height="15" fill="rgb(226,82,3)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="447.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="421" width="0.0496%" height="15" fill="rgb(240,164,32)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="431.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="405" width="0.0496%" height="15" fill="rgb(232,46,7)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="415.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="389" width="0.0496%" height="15" fill="rgb(229,129,53)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="399.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="74.1622%" y="373" width="0.0496%" height="15" fill="rgb(234,188,29)" fg:x="7480" fg:w="5"/><text x="74.4122%" y="383.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="74.1721%" y="357" width="0.0397%" height="15" fill="rgb(246,141,4)" fg:x="7481" fg:w="4"/><text x="74.4221%" y="367.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="74.1721%" y="341" width="0.0397%" height="15" fill="rgb(229,23,39)" fg:x="7481" fg:w="4"/><text x="74.4221%" y="351.50"></text></g><g><title>checked_request2size (39 samples, 0.39%)</title><rect x="76.6409%" y="309" width="0.3867%" height="15" fill="rgb(206,12,3)" fg:x="7730" fg:w="39"/><text x="76.8909%" y="319.50"></text></g><g><title>__GI___libc_malloc (235 samples, 2.33%)</title><rect x="75.5404%" y="325" width="2.3300%" height="15" fill="rgb(252,226,20)" fg:x="7619" fg:w="235"/><text x="75.7904%" y="335.50">_..</text></g><g><title>tcache_get (85 samples, 0.84%)</title><rect x="77.0276%" y="309" width="0.8428%" height="15" fill="rgb(216,123,35)" fg:x="7769" fg:w="85"/><text x="77.2776%" y="319.50"></text></g><g><title>tcache_get_n (85 samples, 0.84%)</title><rect x="77.0276%" y="293" width="0.8428%" height="15" fill="rgb(212,68,40)" fg:x="7769" fg:w="85"/><text x="77.2776%" y="303.50"></text></g><g><title>__rdl_alloc (64 samples, 0.63%)</title><rect x="77.8703%" y="325" width="0.6345%" height="15" fill="rgb(254,125,32)" fg:x="7854" fg:w="64"/><text x="78.1203%" y="335.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (64 samples, 0.63%)</title><rect x="77.8703%" y="309" width="0.6345%" height="15" fill="rgb(253,97,22)" fg:x="7854" fg:w="64"/><text x="78.1203%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (399 samples, 3.96%)</title><rect x="74.7967%" y="421" width="3.9560%" height="15" fill="rgb(241,101,14)" fg:x="7544" fg:w="399"/><text x="75.0467%" y="431.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (399 samples, 3.96%)</title><rect x="74.7967%" y="405" width="3.9560%" height="15" fill="rgb(238,103,29)" fg:x="7544" fg:w="399"/><text x="75.0467%" y="415.50">allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (399 samples, 3.96%)</title><rect x="74.7967%" y="389" width="3.9560%" height="15" fill="rgb(233,195,47)" fg:x="7544" fg:w="399"/><text x="75.0467%" y="399.50">allo..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (348 samples, 3.45%)</title><rect x="75.3024%" y="373" width="3.4503%" height="15" fill="rgb(246,218,30)" fg:x="7595" fg:w="348"/><text x="75.5524%" y="383.50">&lt;al..</text></g><g><title>alloc::alloc::Global::alloc_impl (348 samples, 3.45%)</title><rect x="75.3024%" y="357" width="3.4503%" height="15" fill="rgb(219,145,47)" fg:x="7595" fg:w="348"/><text x="75.5524%" y="367.50">all..</text></g><g><title>alloc::alloc::alloc (348 samples, 3.45%)</title><rect x="75.3024%" y="341" width="3.4503%" height="15" fill="rgb(243,12,26)" fg:x="7595" fg:w="348"/><text x="75.5524%" y="351.50">all..</text></g><g><title>__rust_alloc (25 samples, 0.25%)</title><rect x="78.5049%" y="325" width="0.2479%" height="15" fill="rgb(214,87,16)" fg:x="7918" fg:w="25"/><text x="78.7549%" y="335.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (529 samples, 5.24%)</title><rect x="74.2118%" y="533" width="5.2449%" height="15" fill="rgb(208,99,42)" fg:x="7485" fg:w="529"/><text x="74.4618%" y="543.50">&lt;alloc..</text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (529 samples, 5.24%)</title><rect x="74.2118%" y="517" width="5.2449%" height="15" fill="rgb(253,99,2)" fg:x="7485" fg:w="529"/><text x="74.4618%" y="527.50">&lt;T as ..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (529 samples, 5.24%)</title><rect x="74.2118%" y="501" width="5.2449%" height="15" fill="rgb(220,168,23)" fg:x="7485" fg:w="529"/><text x="74.4618%" y="511.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (470 samples, 4.66%)</title><rect x="74.7967%" y="485" width="4.6599%" height="15" fill="rgb(242,38,24)" fg:x="7544" fg:w="470"/><text x="75.0467%" y="495.50">&lt;allo..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (470 samples, 4.66%)</title><rect x="74.7967%" y="469" width="4.6599%" height="15" fill="rgb(225,182,9)" fg:x="7544" fg:w="470"/><text x="75.0467%" y="479.50">alloc..</text></g><g><title>alloc::slice::hack::to_vec (470 samples, 4.66%)</title><rect x="74.7967%" y="453" width="4.6599%" height="15" fill="rgb(243,178,37)" fg:x="7544" fg:w="470"/><text x="75.0467%" y="463.50">alloc..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (470 samples, 4.66%)</title><rect x="74.7967%" y="437" width="4.6599%" height="15" fill="rgb(232,139,19)" fg:x="7544" fg:w="470"/><text x="75.0467%" y="447.50">&lt;T as..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (71 samples, 0.70%)</title><rect x="78.7527%" y="421" width="0.7039%" height="15" fill="rgb(225,201,24)" fg:x="7943" fg:w="71"/><text x="79.0027%" y="431.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (71 samples, 0.70%)</title><rect x="78.7527%" y="405" width="0.7039%" height="15" fill="rgb(221,47,46)" fg:x="7943" fg:w="71"/><text x="79.0027%" y="415.50"></text></g><g><title>__memcpy_avx_unaligned_erms (71 samples, 0.70%)</title><rect x="78.7527%" y="389" width="0.7039%" height="15" fill="rgb(249,23,13)" fg:x="7943" fg:w="71"/><text x="79.0027%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::PartialEq&gt;::eq (589 samples, 5.84%)</title><rect x="79.4567%" y="533" width="5.8398%" height="15" fill="rgb(219,9,5)" fg:x="8014" fg:w="589"/><text x="79.7067%" y="543.50">&lt;alloc:..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (589 samples, 5.84%)</title><rect x="79.4567%" y="517" width="5.8398%" height="15" fill="rgb(254,171,16)" fg:x="8014" fg:w="589"/><text x="79.7067%" y="527.50">alloc::..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (560 samples, 5.55%)</title><rect x="79.7442%" y="501" width="5.5523%" height="15" fill="rgb(230,171,20)" fg:x="8043" fg:w="560"/><text x="79.9942%" y="511.50">core::s..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (560 samples, 5.55%)</title><rect x="79.7442%" y="485" width="5.5523%" height="15" fill="rgb(210,71,41)" fg:x="8043" fg:w="560"/><text x="79.9942%" y="495.50">&lt;[A] as..</text></g><g><title>__memcmp_avx2_movbe (553 samples, 5.48%)</title><rect x="79.8136%" y="469" width="5.4828%" height="15" fill="rgb(206,173,20)" fg:x="8050" fg:w="553"/><text x="80.0636%" y="479.50">__memcm..</text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="85.2965%" y="533" width="0.0198%" height="15" fill="rgb(233,88,34)" fg:x="8603" fg:w="2"/><text x="85.5465%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_add (2 samples, 0.02%)</title><rect x="85.2965%" y="517" width="0.0198%" height="15" fill="rgb(223,209,46)" fg:x="8603" fg:w="2"/><text x="85.5465%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_add (2 samples, 0.02%)</title><rect x="85.2965%" y="501" width="0.0198%" height="15" fill="rgb(250,43,18)" fg:x="8603" fg:w="2"/><text x="85.5465%" y="511.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (21 samples, 0.21%)</title><rect x="85.3163%" y="533" width="0.2082%" height="15" fill="rgb(208,13,10)" fg:x="8605" fg:w="21"/><text x="85.5663%" y="543.50"></text></g><g><title>alloc::sync::Arc&lt;T,A&gt;::inner (21 samples, 0.21%)</title><rect x="85.3163%" y="517" width="0.2082%" height="15" fill="rgb(212,200,36)" fg:x="8605" fg:w="21"/><text x="85.5663%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (21 samples, 0.21%)</title><rect x="85.3163%" y="501" width="0.2082%" height="15" fill="rgb(225,90,30)" fg:x="8605" fg:w="21"/><text x="85.5663%" y="511.50"></text></g><g><title>_int_realloc (5 samples, 0.05%)</title><rect x="85.5245%" y="405" width="0.0496%" height="15" fill="rgb(236,182,39)" fg:x="8626" fg:w="5"/><text x="85.7745%" y="415.50"></text></g><g><title>_int_malloc (4 samples, 0.04%)</title><rect x="85.5344%" y="389" width="0.0397%" height="15" fill="rgb(212,144,35)" fg:x="8627" fg:w="4"/><text x="85.7844%" y="399.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 0.06%)</title><rect x="85.5245%" y="469" width="0.0595%" height="15" fill="rgb(228,63,44)" fg:x="8626" fg:w="6"/><text x="85.7745%" y="479.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.06%)</title><rect x="85.5245%" y="453" width="0.0595%" height="15" fill="rgb(228,109,6)" fg:x="8626" fg:w="6"/><text x="85.7745%" y="463.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.06%)</title><rect x="85.5245%" y="437" width="0.0595%" height="15" fill="rgb(238,117,24)" fg:x="8626" fg:w="6"/><text x="85.7745%" y="447.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.06%)</title><rect x="85.5245%" y="421" width="0.0595%" height="15" fill="rgb(242,26,26)" fg:x="8626" fg:w="6"/><text x="85.7745%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (8 samples, 0.08%)</title><rect x="85.5245%" y="485" width="0.0793%" height="15" fill="rgb(221,92,48)" fg:x="8626" fg:w="8"/><text x="85.7745%" y="495.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="85.5840%" y="469" width="0.0198%" height="15" fill="rgb(209,209,32)" fg:x="8632" fg:w="2"/><text x="85.8340%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (9 samples, 0.09%)</title><rect x="85.5245%" y="517" width="0.0892%" height="15" fill="rgb(221,70,22)" fg:x="8626" fg:w="9"/><text x="85.7745%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.09%)</title><rect x="85.5245%" y="501" width="0.0892%" height="15" fill="rgb(248,145,5)" fg:x="8626" fg:w="9"/><text x="85.7745%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (10 samples, 0.10%)</title><rect x="85.5245%" y="533" width="0.0991%" height="15" fill="rgb(226,116,26)" fg:x="8626" fg:w="10"/><text x="85.7745%" y="543.50"></text></g><g><title>_int_free (383 samples, 3.80%)</title><rect x="87.6066%" y="421" width="3.7973%" height="15" fill="rgb(244,5,17)" fg:x="8836" fg:w="383"/><text x="87.8566%" y="431.50">_int..</text></g><g><title>tcache_put (69 samples, 0.68%)</title><rect x="90.7198%" y="405" width="0.6841%" height="15" fill="rgb(252,159,33)" fg:x="9150" fg:w="69"/><text x="90.9698%" y="415.50"></text></g><g><title>__GI___libc_free (547 samples, 5.42%)</title><rect x="86.2978%" y="437" width="5.4234%" height="15" fill="rgb(206,71,0)" fg:x="8704" fg:w="547"/><text x="86.5478%" y="447.50">__GI___..</text></g><g><title>arena_for_chunk (32 samples, 0.32%)</title><rect x="91.4039%" y="421" width="0.3173%" height="15" fill="rgb(233,118,54)" fg:x="9219" fg:w="32"/><text x="91.6539%" y="431.50"></text></g><g><title>__rdl_dealloc (36 samples, 0.36%)</title><rect x="91.7212%" y="437" width="0.3569%" height="15" fill="rgb(234,83,48)" fg:x="9251" fg:w="36"/><text x="91.9712%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (36 samples, 0.36%)</title><rect x="91.7212%" y="421" width="0.3569%" height="15" fill="rgb(228,3,54)" fg:x="9251" fg:w="36"/><text x="91.9712%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (688 samples, 6.82%)</title><rect x="85.6633%" y="469" width="6.8213%" height="15" fill="rgb(226,155,13)" fg:x="8640" fg:w="688"/><text x="85.9133%" y="479.50">&lt;alloc::a..</text></g><g><title>alloc::alloc::dealloc (688 samples, 6.82%)</title><rect x="85.6633%" y="453" width="6.8213%" height="15" fill="rgb(241,28,37)" fg:x="8640" fg:w="688"/><text x="85.9133%" y="463.50">alloc::al..</text></g><g><title>__rust_dealloc (41 samples, 0.41%)</title><rect x="92.0781%" y="437" width="0.4065%" height="15" fill="rgb(233,93,10)" fg:x="9287" fg:w="41"/><text x="92.3281%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (694 samples, 6.88%)</title><rect x="85.6236%" y="533" width="6.8808%" height="15" fill="rgb(225,113,19)" fg:x="8636" fg:w="694"/><text x="85.8736%" y="543.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (694 samples, 6.88%)</title><rect x="85.6236%" y="517" width="6.8808%" height="15" fill="rgb(241,2,18)" fg:x="8636" fg:w="694"/><text x="85.8736%" y="527.50">core::ptr..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (690 samples, 6.84%)</title><rect x="85.6633%" y="501" width="6.8412%" height="15" fill="rgb(228,207,21)" fg:x="8640" fg:w="690"/><text x="85.9133%" y="511.50">core::ptr..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (690 samples, 6.84%)</title><rect x="85.6633%" y="485" width="6.8412%" height="15" fill="rgb(213,211,35)" fg:x="8640" fg:w="690"/><text x="85.9133%" y="495.50">&lt;alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.02%)</title><rect x="92.4846%" y="469" width="0.0198%" height="15" fill="rgb(209,83,10)" fg:x="9328" fg:w="2"/><text x="92.7346%" y="479.50"></text></g><g><title>graph::Model::out_edges (2,137 samples, 21.19%)</title><rect x="71.3266%" y="549" width="21.1878%" height="15" fill="rgb(209,164,1)" fg:x="7194" fg:w="2137"/><text x="71.5766%" y="559.50">graph::Model::out_edges</text></g><g><title>machine::Machine::get_next_edge (2,216 samples, 21.97%)</title><rect x="70.5830%" y="565" width="21.9710%" height="15" fill="rgb(213,184,43)" fg:x="7119" fg:w="2216"/><text x="70.8330%" y="575.50">machine::Machine::get_next_edge</text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (4 samples, 0.04%)</title><rect x="92.5144%" y="549" width="0.0397%" height="15" fill="rgb(231,61,34)" fg:x="9331" fg:w="4"/><text x="92.7644%" y="559.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (4 samples, 0.04%)</title><rect x="92.5144%" y="533" width="0.0397%" height="15" fill="rgb(235,75,3)" fg:x="9331" fg:w="4"/><text x="92.7644%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.02%)</title><rect x="92.5342%" y="517" width="0.0198%" height="15" fill="rgb(220,106,47)" fg:x="9333" fg:w="2"/><text x="92.7842%" y="527.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.02%)</title><rect x="92.5342%" y="501" width="0.0198%" height="15" fill="rgb(210,196,33)" fg:x="9333" fg:w="2"/><text x="92.7842%" y="511.50"></text></g><g><title>&lt;alloc::string::String as alloc::string::ToString&gt;::to_string (2 samples, 0.02%)</title><rect x="92.5640%" y="549" width="0.0198%" height="15" fill="rgb(229,154,42)" fg:x="9336" fg:w="2"/><text x="92.8140%" y="559.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (2 samples, 0.02%)</title><rect x="92.5640%" y="533" width="0.0198%" height="15" fill="rgb(228,114,26)" fg:x="9336" fg:w="2"/><text x="92.8140%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.02%)</title><rect x="92.5640%" y="517" width="0.0198%" height="15" fill="rgb(208,144,1)" fg:x="9336" fg:w="2"/><text x="92.8140%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="92.6036%" y="453" width="0.0198%" height="15" fill="rgb(239,112,37)" fg:x="9340" fg:w="2"/><text x="92.8536%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="92.6036%" y="437" width="0.0198%" height="15" fill="rgb(210,96,50)" fg:x="9340" fg:w="2"/><text x="92.8536%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="92.6036%" y="421" width="0.0198%" height="15" fill="rgb(222,178,2)" fg:x="9340" fg:w="2"/><text x="92.8536%" y="431.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="92.6036%" y="405" width="0.0198%" height="15" fill="rgb(226,74,18)" fg:x="9340" fg:w="2"/><text x="92.8536%" y="415.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="92.6036%" y="389" width="0.0198%" height="15" fill="rgb(225,67,54)" fg:x="9340" fg:w="2"/><text x="92.8536%" y="399.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="92.6036%" y="373" width="0.0198%" height="15" fill="rgb(251,92,32)" fg:x="9340" fg:w="2"/><text x="92.8536%" y="383.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.02%)</title><rect x="92.6036%" y="357" width="0.0198%" height="15" fill="rgb(228,149,22)" fg:x="9340" fg:w="2"/><text x="92.8536%" y="367.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="92.5937%" y="549" width="0.0496%" height="15" fill="rgb(243,54,13)" fg:x="9339" fg:w="5"/><text x="92.8437%" y="559.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="92.5937%" y="533" width="0.0496%" height="15" fill="rgb(243,180,28)" fg:x="9339" fg:w="5"/><text x="92.8437%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="92.6036%" y="517" width="0.0397%" height="15" fill="rgb(208,167,24)" fg:x="9340" fg:w="4"/><text x="92.8536%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (4 samples, 0.04%)</title><rect x="92.6036%" y="501" width="0.0397%" height="15" fill="rgb(245,73,45)" fg:x="9340" fg:w="4"/><text x="92.8536%" y="511.50"></text></g><g><title>alloc::slice::hack::to_vec (4 samples, 0.04%)</title><rect x="92.6036%" y="485" width="0.0397%" height="15" fill="rgb(237,203,48)" fg:x="9340" fg:w="4"/><text x="92.8536%" y="495.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (4 samples, 0.04%)</title><rect x="92.6036%" y="469" width="0.0397%" height="15" fill="rgb(211,197,16)" fg:x="9340" fg:w="4"/><text x="92.8536%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="92.6234%" y="453" width="0.0198%" height="15" fill="rgb(243,99,51)" fg:x="9342" fg:w="2"/><text x="92.8734%" y="463.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="92.6234%" y="437" width="0.0198%" height="15" fill="rgb(215,123,29)" fg:x="9342" fg:w="2"/><text x="92.8734%" y="447.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="92.6234%" y="421" width="0.0198%" height="15" fill="rgb(239,186,37)" fg:x="9342" fg:w="2"/><text x="92.8734%" y="431.50"></text></g><g><title>&lt;machine::Step as core::clone::Clone&gt;::clone (7 samples, 0.07%)</title><rect x="92.6433%" y="549" width="0.0694%" height="15" fill="rgb(252,136,39)" fg:x="9344" fg:w="7"/><text x="92.8933%" y="559.50"></text></g><g><title>&lt;machine::Position as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="92.6631%" y="533" width="0.0496%" height="15" fill="rgb(223,213,32)" fg:x="9346" fg:w="5"/><text x="92.9131%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (4 samples, 0.04%)</title><rect x="92.6730%" y="517" width="0.0397%" height="15" fill="rgb(233,115,5)" fg:x="9347" fg:w="4"/><text x="92.9230%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="92.6829%" y="501" width="0.0297%" height="15" fill="rgb(207,226,44)" fg:x="9348" fg:w="3"/><text x="92.9329%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="92.6829%" y="485" width="0.0297%" height="15" fill="rgb(208,126,0)" fg:x="9348" fg:w="3"/><text x="92.9329%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="92.6829%" y="469" width="0.0297%" height="15" fill="rgb(244,66,21)" fg:x="9348" fg:w="3"/><text x="92.9329%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="92.6829%" y="453" width="0.0297%" height="15" fill="rgb(222,97,12)" fg:x="9348" fg:w="3"/><text x="92.9329%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="92.6829%" y="437" width="0.0297%" height="15" fill="rgb(219,213,19)" fg:x="9348" fg:w="3"/><text x="92.9329%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.03%)</title><rect x="92.6829%" y="421" width="0.0297%" height="15" fill="rgb(252,169,30)" fg:x="9348" fg:w="3"/><text x="92.9329%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.03%)</title><rect x="92.6829%" y="405" width="0.0297%" height="15" fill="rgb(206,32,51)" fg:x="9348" fg:w="3"/><text x="92.9329%" y="415.50"></text></g><g><title>__memcmp_avx2_movbe (9 samples, 0.09%)</title><rect x="92.7722%" y="421" width="0.0892%" height="15" fill="rgb(250,172,42)" fg:x="9357" fg:w="9"/><text x="93.0222%" y="431.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (11 samples, 0.11%)</title><rect x="92.7622%" y="485" width="0.1091%" height="15" fill="rgb(209,34,43)" fg:x="9356" fg:w="11"/><text x="93.0122%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (11 samples, 0.11%)</title><rect x="92.7622%" y="469" width="0.1091%" height="15" fill="rgb(223,11,35)" fg:x="9356" fg:w="11"/><text x="93.0122%" y="479.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (11 samples, 0.11%)</title><rect x="92.7622%" y="453" width="0.1091%" height="15" fill="rgb(251,219,26)" fg:x="9356" fg:w="11"/><text x="93.0122%" y="463.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (11 samples, 0.11%)</title><rect x="92.7622%" y="437" width="0.1091%" height="15" fill="rgb(231,119,3)" fg:x="9356" fg:w="11"/><text x="93.0122%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (19 samples, 0.19%)</title><rect x="92.7127%" y="549" width="0.1884%" height="15" fill="rgb(216,97,11)" fg:x="9351" fg:w="19"/><text x="92.9627%" y="559.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (19 samples, 0.19%)</title><rect x="92.7127%" y="533" width="0.1884%" height="15" fill="rgb(223,59,9)" fg:x="9351" fg:w="19"/><text x="92.9627%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (19 samples, 0.19%)</title><rect x="92.7127%" y="517" width="0.1884%" height="15" fill="rgb(233,93,31)" fg:x="9351" fg:w="19"/><text x="92.9627%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (19 samples, 0.19%)</title><rect x="92.7127%" y="501" width="0.1884%" height="15" fill="rgb(239,81,33)" fg:x="9351" fg:w="19"/><text x="92.9627%" y="511.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (3 samples, 0.03%)</title><rect x="92.8713%" y="485" width="0.0297%" height="15" fill="rgb(213,120,34)" fg:x="9367" fg:w="3"/><text x="93.1213%" y="495.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (15 samples, 0.15%)</title><rect x="92.9209%" y="517" width="0.1487%" height="15" fill="rgb(243,49,53)" fg:x="9372" fg:w="15"/><text x="93.1709%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (14 samples, 0.14%)</title><rect x="92.9308%" y="501" width="0.1388%" height="15" fill="rgb(247,216,33)" fg:x="9373" fg:w="14"/><text x="93.1808%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (14 samples, 0.14%)</title><rect x="92.9308%" y="485" width="0.1388%" height="15" fill="rgb(226,26,14)" fg:x="9373" fg:w="14"/><text x="93.1808%" y="495.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (9 samples, 0.09%)</title><rect x="92.9804%" y="469" width="0.0892%" height="15" fill="rgb(215,49,53)" fg:x="9378" fg:w="9"/><text x="93.2304%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (9 samples, 0.09%)</title><rect x="92.9804%" y="453" width="0.0892%" height="15" fill="rgb(245,162,40)" fg:x="9378" fg:w="9"/><text x="93.2304%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (9 samples, 0.09%)</title><rect x="92.9804%" y="437" width="0.0892%" height="15" fill="rgb(229,68,17)" fg:x="9378" fg:w="9"/><text x="93.2304%" y="447.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (9 samples, 0.09%)</title><rect x="92.9804%" y="421" width="0.0892%" height="15" fill="rgb(213,182,10)" fg:x="9378" fg:w="9"/><text x="93.2304%" y="431.50"></text></g><g><title>__memcmp_avx2_movbe (9 samples, 0.09%)</title><rect x="92.9804%" y="405" width="0.0892%" height="15" fill="rgb(245,125,30)" fg:x="9378" fg:w="9"/><text x="93.2304%" y="415.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::insert (17 samples, 0.17%)</title><rect x="92.9110%" y="549" width="0.1686%" height="15" fill="rgb(232,202,2)" fg:x="9371" fg:w="17"/><text x="93.1610%" y="559.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::entry (17 samples, 0.17%)</title><rect x="92.9110%" y="533" width="0.1686%" height="15" fill="rgb(237,140,51)" fg:x="9371" fg:w="17"/><text x="93.1610%" y="543.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="93.1093%" y="533" width="0.0496%" height="15" fill="rgb(236,157,25)" fg:x="9391" fg:w="5"/><text x="93.3593%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="93.1291%" y="517" width="0.0297%" height="15" fill="rgb(219,209,0)" fg:x="9393" fg:w="3"/><text x="93.3791%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (3 samples, 0.03%)</title><rect x="93.1291%" y="501" width="0.0297%" height="15" fill="rgb(240,116,54)" fg:x="9393" fg:w="3"/><text x="93.3791%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (3 samples, 0.03%)</title><rect x="93.1291%" y="485" width="0.0297%" height="15" fill="rgb(216,10,36)" fg:x="9393" fg:w="3"/><text x="93.3791%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.03%)</title><rect x="93.1291%" y="469" width="0.0297%" height="15" fill="rgb(222,72,44)" fg:x="9393" fg:w="3"/><text x="93.3791%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (3 samples, 0.03%)</title><rect x="93.1291%" y="453" width="0.0297%" height="15" fill="rgb(232,159,9)" fg:x="9393" fg:w="3"/><text x="93.3791%" y="463.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="93.1390%" y="437" width="0.0198%" height="15" fill="rgb(210,39,32)" fg:x="9394" fg:w="2"/><text x="93.3890%" y="447.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="93.1390%" y="421" width="0.0198%" height="15" fill="rgb(216,194,45)" fg:x="9394" fg:w="2"/><text x="93.3890%" y="431.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.02%)</title><rect x="93.1390%" y="405" width="0.0198%" height="15" fill="rgb(218,18,35)" fg:x="9394" fg:w="2"/><text x="93.3890%" y="415.50"></text></g><g><title>alloc::collections::btree::node::Handle&lt;alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::Internal&gt;,alloc::collections::btree::node::marker::Edge&gt;::descend (2 samples, 0.02%)</title><rect x="93.1687%" y="501" width="0.0198%" height="15" fill="rgb(207,83,51)" fg:x="9397" fg:w="2"/><text x="93.4187%" y="511.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init_read (2 samples, 0.02%)</title><rect x="93.1687%" y="485" width="0.0198%" height="15" fill="rgb(225,63,43)" fg:x="9397" fg:w="2"/><text x="93.4187%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::read (2 samples, 0.02%)</title><rect x="93.1687%" y="469" width="0.0198%" height="15" fill="rgb(207,57,36)" fg:x="9397" fg:w="2"/><text x="93.4187%" y="479.50"></text></g><g><title>core::ptr::read (2 samples, 0.02%)</title><rect x="93.1687%" y="453" width="0.0198%" height="15" fill="rgb(216,99,33)" fg:x="9397" fg:w="2"/><text x="93.4187%" y="463.50"></text></g><g><title>__memcmp_avx2_movbe (25 samples, 0.25%)</title><rect x="93.3373%" y="405" width="0.2479%" height="15" fill="rgb(225,42,16)" fg:x="9414" fg:w="25"/><text x="93.5873%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (42 samples, 0.42%)</title><rect x="93.2382%" y="469" width="0.4164%" height="15" fill="rgb(220,201,45)" fg:x="9404" fg:w="42"/><text x="93.4882%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (42 samples, 0.42%)</title><rect x="93.2382%" y="453" width="0.4164%" height="15" fill="rgb(225,33,4)" fg:x="9404" fg:w="42"/><text x="93.4882%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (42 samples, 0.42%)</title><rect x="93.2382%" y="437" width="0.4164%" height="15" fill="rgb(224,33,50)" fg:x="9404" fg:w="42"/><text x="93.4882%" y="447.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (42 samples, 0.42%)</title><rect x="93.2382%" y="421" width="0.4164%" height="15" fill="rgb(246,198,51)" fg:x="9404" fg:w="42"/><text x="93.4882%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for isize&gt;::cmp (7 samples, 0.07%)</title><rect x="93.5852%" y="405" width="0.0694%" height="15" fill="rgb(205,22,4)" fg:x="9439" fg:w="7"/><text x="93.8352%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="93.6546%" y="469" width="0.0297%" height="15" fill="rgb(206,3,8)" fg:x="9446" fg:w="3"/><text x="93.9046%" y="479.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="93.6546%" y="453" width="0.0297%" height="15" fill="rgb(251,23,15)" fg:x="9446" fg:w="3"/><text x="93.9046%" y="463.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (2 samples, 0.02%)</title><rect x="93.6645%" y="437" width="0.0198%" height="15" fill="rgb(252,88,28)" fg:x="9447" fg:w="2"/><text x="93.9145%" y="447.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (57 samples, 0.57%)</title><rect x="93.1588%" y="533" width="0.5651%" height="15" fill="rgb(212,127,14)" fg:x="9396" fg:w="57"/><text x="93.4088%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (57 samples, 0.57%)</title><rect x="93.1588%" y="517" width="0.5651%" height="15" fill="rgb(247,145,37)" fg:x="9396" fg:w="57"/><text x="93.4088%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (54 samples, 0.54%)</title><rect x="93.1886%" y="501" width="0.5354%" height="15" fill="rgb(209,117,53)" fg:x="9399" fg:w="54"/><text x="93.4386%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (54 samples, 0.54%)</title><rect x="93.1886%" y="485" width="0.5354%" height="15" fill="rgb(212,90,42)" fg:x="9399" fg:w="54"/><text x="93.4386%" y="495.50"></text></g><g><title>alloc::collections::btree::node::NodeRef&lt;alloc::collections::btree::node::marker::Immut,K,V,Type&gt;::keys (4 samples, 0.04%)</title><rect x="93.6843%" y="469" width="0.0397%" height="15" fill="rgb(218,164,37)" fg:x="9449" fg:w="4"/><text x="93.9343%" y="479.50"></text></g><g><title>graph::Model::get_name_for_id (64 samples, 0.63%)</title><rect x="93.0993%" y="549" width="0.6345%" height="15" fill="rgb(246,65,34)" fg:x="9390" fg:w="64"/><text x="93.3493%" y="559.50"></text></g><g><title>machine::Machine::log_step (126 samples, 1.25%)</title><rect x="92.5540%" y="565" width="1.2493%" height="15" fill="rgb(231,100,33)" fg:x="9335" fg:w="126"/><text x="92.8040%" y="575.50"></text></g><g><title>machine::Profile::push (7 samples, 0.07%)</title><rect x="93.7339%" y="549" width="0.0694%" height="15" fill="rgb(228,126,14)" fg:x="9454" fg:w="7"/><text x="93.9839%" y="559.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::push_back (7 samples, 0.07%)</title><rect x="93.7339%" y="533" width="0.0694%" height="15" fill="rgb(215,173,21)" fg:x="9454" fg:w="7"/><text x="93.9839%" y="543.50"></text></g><g><title>alloc::collections::vec_deque::VecDeque&lt;T,A&gt;::buffer_write (7 samples, 0.07%)</title><rect x="93.7339%" y="517" width="0.0694%" height="15" fill="rgb(210,6,40)" fg:x="9454" fg:w="7"/><text x="93.9839%" y="527.50"></text></g><g><title>core::ptr::write (7 samples, 0.07%)</title><rect x="93.7339%" y="501" width="0.0694%" height="15" fill="rgb(212,48,18)" fg:x="9454" fg:w="7"/><text x="93.9839%" y="511.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="93.7339%" y="485" width="0.0694%" height="15" fill="rgb(230,214,11)" fg:x="9454" fg:w="7"/><text x="93.9839%" y="495.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="93.7438%" y="469" width="0.0595%" height="15" fill="rgb(254,105,39)" fg:x="9455" fg:w="6"/><text x="93.9938%" y="479.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="93.7438%" y="453" width="0.0595%" height="15" fill="rgb(245,158,5)" fg:x="9455" fg:w="6"/><text x="93.9938%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="93.7438%" y="437" width="0.0595%" height="15" fill="rgb(249,208,11)" fg:x="9455" fg:w="6"/><text x="93.9938%" y="447.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="93.7438%" y="421" width="0.0595%" height="15" fill="rgb(210,39,28)" fg:x="9455" fg:w="6"/><text x="93.9938%" y="431.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="93.7636%" y="405" width="0.0397%" height="15" fill="rgb(211,56,53)" fg:x="9457" fg:w="4"/><text x="94.0136%" y="415.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="93.7636%" y="389" width="0.0397%" height="15" fill="rgb(226,201,30)" fg:x="9457" fg:w="4"/><text x="94.0136%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="93.7735%" y="373" width="0.0297%" height="15" fill="rgb(239,101,34)" fg:x="9458" fg:w="3"/><text x="94.0235%" y="383.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="93.7735%" y="357" width="0.0297%" height="15" fill="rgb(226,209,5)" fg:x="9458" fg:w="3"/><text x="94.0235%" y="367.50"></text></g><g><title>__memcmp_avx2_movbe (14 samples, 0.14%)</title><rect x="93.9818%" y="405" width="0.1388%" height="15" fill="rgb(250,105,47)" fg:x="9479" fg:w="14"/><text x="94.2318%" y="415.50"></text></g><g><title>&lt;alloc::string::String as core::cmp::Ord&gt;::cmp (20 samples, 0.20%)</title><rect x="93.9322%" y="469" width="0.1983%" height="15" fill="rgb(230,72,3)" fg:x="9474" fg:w="20"/><text x="94.1822%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::cmp::Ord&gt;::cmp (20 samples, 0.20%)</title><rect x="93.9322%" y="453" width="0.1983%" height="15" fill="rgb(232,218,39)" fg:x="9474" fg:w="20"/><text x="94.1822%" y="463.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::Ord for [T]&gt;::cmp (20 samples, 0.20%)</title><rect x="93.9322%" y="437" width="0.1983%" height="15" fill="rgb(248,166,6)" fg:x="9474" fg:w="20"/><text x="94.1822%" y="447.50"></text></g><g><title>&lt;u8 as core::slice::cmp::SliceOrd&gt;::compare (20 samples, 0.20%)</title><rect x="93.9322%" y="421" width="0.1983%" height="15" fill="rgb(247,89,20)" fg:x="9474" fg:w="20"/><text x="94.1822%" y="431.50"></text></g><g><title>alloc::collections::btree::map::BTreeMap&lt;K,V,A&gt;::get (29 samples, 0.29%)</title><rect x="93.8529%" y="533" width="0.2875%" height="15" fill="rgb(248,130,54)" fg:x="9466" fg:w="29"/><text x="94.1029%" y="543.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,alloc::collections::btree::node::marker::LeafOrInternal&gt;&gt;::search_tree (29 samples, 0.29%)</title><rect x="93.8529%" y="517" width="0.2875%" height="15" fill="rgb(234,196,4)" fg:x="9466" fg:w="29"/><text x="94.1029%" y="527.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::search_node (29 samples, 0.29%)</title><rect x="93.8529%" y="501" width="0.2875%" height="15" fill="rgb(250,143,31)" fg:x="9466" fg:w="29"/><text x="94.1029%" y="511.50"></text></g><g><title>alloc::collections::btree::search::&lt;impl alloc::collections::btree::node::NodeRef&lt;BorrowType,K,V,Type&gt;&gt;::find_key_index (29 samples, 0.29%)</title><rect x="93.8529%" y="485" width="0.2875%" height="15" fill="rgb(211,110,34)" fg:x="9466" fg:w="29"/><text x="94.1029%" y="495.50"></text></g><g><title>machine::Machine::step (6,784 samples, 67.26%)</title><rect x="26.8987%" y="581" width="67.2616%" height="15" fill="rgb(215,124,48)" fg:x="2713" fg:w="6784"/><text x="27.1487%" y="591.50">machine::Machine::step</text></g><g><title>machine::Machine::run_action (36 samples, 0.36%)</title><rect x="93.8033%" y="565" width="0.3569%" height="15" fill="rgb(216,46,13)" fg:x="9461" fg:w="36"/><text x="94.0533%" y="575.50"></text></g><g><title>machine::Machine::get_actions (35 samples, 0.35%)</title><rect x="93.8132%" y="549" width="0.3470%" height="15" fill="rgb(205,184,25)" fg:x="9462" fg:w="35"/><text x="94.0632%" y="559.50"></text></g><g><title>std::sync::rwlock::RwLock&lt;T&gt;::read (2 samples, 0.02%)</title><rect x="94.1404%" y="533" width="0.0198%" height="15" fill="rgb(228,1,10)" fg:x="9495" fg:w="2"/><text x="94.3904%" y="543.50"></text></g><g><title>std::sys::unix::locks::futex_rwlock::RwLock::read (2 samples, 0.02%)</title><rect x="94.1404%" y="517" width="0.0198%" height="15" fill="rgb(213,116,27)" fg:x="9495" fg:w="2"/><text x="94.3904%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange_weak (2 samples, 0.02%)</title><rect x="94.1404%" y="501" width="0.0198%" height="15" fill="rgb(241,95,50)" fg:x="9495" fg:w="2"/><text x="94.3904%" y="511.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.02%)</title><rect x="94.1404%" y="485" width="0.0198%" height="15" fill="rgb(238,48,32)" fg:x="9495" fg:w="2"/><text x="94.3904%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.04%)</title><rect x="94.1602%" y="549" width="0.0397%" height="15" fill="rgb(235,113,49)" fg:x="9497" fg:w="4"/><text x="94.4102%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="94.1602%" y="533" width="0.0397%" height="15" fill="rgb(205,127,43)" fg:x="9497" fg:w="4"/><text x="94.4102%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.04%)</title><rect x="94.1602%" y="517" width="0.0397%" height="15" fill="rgb(250,162,2)" fg:x="9497" fg:w="4"/><text x="94.4102%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.04%)</title><rect x="94.1602%" y="501" width="0.0397%" height="15" fill="rgb(220,13,41)" fg:x="9497" fg:w="4"/><text x="94.4102%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (4 samples, 0.04%)</title><rect x="94.1602%" y="485" width="0.0397%" height="15" fill="rgb(249,221,25)" fg:x="9497" fg:w="4"/><text x="94.4102%" y="495.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (4 samples, 0.04%)</title><rect x="94.1602%" y="469" width="0.0397%" height="15" fill="rgb(215,208,19)" fg:x="9497" fg:w="4"/><text x="94.4102%" y="479.50"></text></g><g><title>alloc::alloc::alloc (4 samples, 0.04%)</title><rect x="94.1602%" y="453" width="0.0397%" height="15" fill="rgb(236,175,2)" fg:x="9497" fg:w="4"/><text x="94.4102%" y="463.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.03%)</title><rect x="94.1701%" y="437" width="0.0297%" height="15" fill="rgb(241,52,2)" fg:x="9498" fg:w="3"/><text x="94.4201%" y="447.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::end (2 samples, 0.02%)</title><rect x="94.1999%" y="517" width="0.0198%" height="15" fill="rgb(248,140,14)" fg:x="9501" fg:w="2"/><text x="94.4499%" y="527.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::end (2 samples, 0.02%)</title><rect x="94.1999%" y="501" width="0.0198%" height="15" fill="rgb(253,22,42)" fg:x="9501" fg:w="2"/><text x="94.4499%" y="511.50"></text></g><g><title>serde_json::ser::Formatter::end_object (2 samples, 0.02%)</title><rect x="94.1999%" y="485" width="0.0198%" height="15" fill="rgb(234,61,47)" fg:x="9501" fg:w="2"/><text x="94.4499%" y="495.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.02%)</title><rect x="94.1999%" y="469" width="0.0198%" height="15" fill="rgb(208,226,15)" fg:x="9501" fg:w="2"/><text x="94.4499%" y="479.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.02%)</title><rect x="94.1999%" y="453" width="0.0198%" height="15" fill="rgb(217,221,4)" fg:x="9501" fg:w="2"/><text x="94.4499%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="94.1999%" y="437" width="0.0198%" height="15" fill="rgb(212,174,34)" fg:x="9501" fg:w="2"/><text x="94.4499%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="94.1999%" y="421" width="0.0198%" height="15" fill="rgb(253,83,4)" fg:x="9501" fg:w="2"/><text x="94.4499%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="94.1999%" y="405" width="0.0198%" height="15" fill="rgb(250,195,49)" fg:x="9501" fg:w="2"/><text x="94.4499%" y="415.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (4 samples, 0.04%)</title><rect x="94.2296%" y="469" width="0.0397%" height="15" fill="rgb(241,192,25)" fg:x="9504" fg:w="4"/><text x="94.4796%" y="479.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (4 samples, 0.04%)</title><rect x="94.2296%" y="453" width="0.0397%" height="15" fill="rgb(208,124,10)" fg:x="9504" fg:w="4"/><text x="94.4796%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (4 samples, 0.04%)</title><rect x="94.2296%" y="437" width="0.0397%" height="15" fill="rgb(222,33,0)" fg:x="9504" fg:w="4"/><text x="94.4796%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.04%)</title><rect x="94.2296%" y="421" width="0.0397%" height="15" fill="rgb(234,209,28)" fg:x="9504" fg:w="4"/><text x="94.4796%" y="431.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (3 samples, 0.03%)</title><rect x="94.2395%" y="405" width="0.0297%" height="15" fill="rgb(224,11,23)" fg:x="9505" fg:w="3"/><text x="94.4895%" y="415.50"></text></g><g><title>serde_json::ser::Formatter::write_string_fragment (2 samples, 0.02%)</title><rect x="94.2495%" y="389" width="0.0198%" height="15" fill="rgb(232,99,1)" fg:x="9506" fg:w="2"/><text x="94.4995%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (2 samples, 0.02%)</title><rect x="94.2495%" y="373" width="0.0198%" height="15" fill="rgb(237,95,45)" fg:x="9506" fg:w="2"/><text x="94.4995%" y="383.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (2 samples, 0.02%)</title><rect x="94.2495%" y="357" width="0.0198%" height="15" fill="rgb(208,109,11)" fg:x="9506" fg:w="2"/><text x="94.4995%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (2 samples, 0.02%)</title><rect x="94.2495%" y="341" width="0.0198%" height="15" fill="rgb(216,190,48)" fg:x="9506" fg:w="2"/><text x="94.4995%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (2 samples, 0.02%)</title><rect x="94.2495%" y="325" width="0.0198%" height="15" fill="rgb(251,171,36)" fg:x="9506" fg:w="2"/><text x="94.4995%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (2 samples, 0.02%)</title><rect x="94.2495%" y="309" width="0.0198%" height="15" fill="rgb(230,62,22)" fg:x="9506" fg:w="2"/><text x="94.4995%" y="319.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (5 samples, 0.05%)</title><rect x="94.2296%" y="485" width="0.0496%" height="15" fill="rgb(225,114,35)" fg:x="9504" fg:w="5"/><text x="94.4796%" y="495.50"></text></g><g><title>_int_realloc (167 samples, 1.66%)</title><rect x="94.3189%" y="101" width="1.6558%" height="15" fill="rgb(215,118,42)" fg:x="9513" fg:w="167"/><text x="94.5689%" y="111.50"></text></g><g><title>_int_malloc (167 samples, 1.66%)</title><rect x="94.3189%" y="85" width="1.6558%" height="15" fill="rgb(243,119,21)" fg:x="9513" fg:w="167"/><text x="94.5689%" y="95.50"></text></g><g><title>serde_json::ser::Formatter::end_string (172 samples, 1.71%)</title><rect x="94.2891%" y="341" width="1.7053%" height="15" fill="rgb(252,177,53)" fg:x="9510" fg:w="172"/><text x="94.5391%" y="351.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (172 samples, 1.71%)</title><rect x="94.2891%" y="325" width="1.7053%" height="15" fill="rgb(237,209,29)" fg:x="9510" fg:w="172"/><text x="94.5391%" y="335.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (172 samples, 1.71%)</title><rect x="94.2891%" y="309" width="1.7053%" height="15" fill="rgb(212,65,23)" fg:x="9510" fg:w="172"/><text x="94.5391%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (172 samples, 1.71%)</title><rect x="94.2891%" y="293" width="1.7053%" height="15" fill="rgb(230,222,46)" fg:x="9510" fg:w="172"/><text x="94.5391%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (172 samples, 1.71%)</title><rect x="94.2891%" y="277" width="1.7053%" height="15" fill="rgb(215,135,32)" fg:x="9510" fg:w="172"/><text x="94.5391%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (172 samples, 1.71%)</title><rect x="94.2891%" y="261" width="1.7053%" height="15" fill="rgb(246,101,22)" fg:x="9510" fg:w="172"/><text x="94.5391%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (172 samples, 1.71%)</title><rect x="94.2891%" y="245" width="1.7053%" height="15" fill="rgb(206,107,13)" fg:x="9510" fg:w="172"/><text x="94.5391%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (172 samples, 1.71%)</title><rect x="94.2891%" y="229" width="1.7053%" height="15" fill="rgb(250,100,44)" fg:x="9510" fg:w="172"/><text x="94.5391%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (171 samples, 1.70%)</title><rect x="94.2990%" y="213" width="1.6954%" height="15" fill="rgb(231,147,38)" fg:x="9511" fg:w="171"/><text x="94.5490%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (171 samples, 1.70%)</title><rect x="94.2990%" y="197" width="1.6954%" height="15" fill="rgb(229,8,40)" fg:x="9511" fg:w="171"/><text x="94.5490%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (170 samples, 1.69%)</title><rect x="94.3089%" y="181" width="1.6855%" height="15" fill="rgb(221,135,30)" fg:x="9512" fg:w="170"/><text x="94.5589%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (170 samples, 1.69%)</title><rect x="94.3089%" y="165" width="1.6855%" height="15" fill="rgb(249,193,18)" fg:x="9512" fg:w="170"/><text x="94.5589%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (170 samples, 1.69%)</title><rect x="94.3089%" y="149" width="1.6855%" height="15" fill="rgb(209,133,39)" fg:x="9512" fg:w="170"/><text x="94.5589%" y="159.50"></text></g><g><title>alloc::alloc::realloc (170 samples, 1.69%)</title><rect x="94.3089%" y="133" width="1.6855%" height="15" fill="rgb(232,100,14)" fg:x="9512" fg:w="170"/><text x="94.5589%" y="143.50"></text></g><g><title>__GI___libc_realloc (170 samples, 1.69%)</title><rect x="94.3089%" y="117" width="1.6855%" height="15" fill="rgb(224,185,1)" fg:x="9512" fg:w="170"/><text x="94.5589%" y="127.50"></text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_key (177 samples, 1.75%)</title><rect x="94.2792%" y="421" width="1.7549%" height="15" fill="rgb(223,139,8)" fg:x="9509" fg:w="177"/><text x="94.5292%" y="431.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for str&gt;::serialize (177 samples, 1.75%)</title><rect x="94.2792%" y="405" width="1.7549%" height="15" fill="rgb(232,213,38)" fg:x="9509" fg:w="177"/><text x="94.5292%" y="415.50"></text></g><g><title>&lt;serde_json::ser::MapKeySerializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (177 samples, 1.75%)</title><rect x="94.2792%" y="389" width="1.7549%" height="15" fill="rgb(207,94,22)" fg:x="9509" fg:w="177"/><text x="94.5292%" y="399.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (177 samples, 1.75%)</title><rect x="94.2792%" y="373" width="1.7549%" height="15" fill="rgb(219,183,54)" fg:x="9509" fg:w="177"/><text x="94.5292%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str (177 samples, 1.75%)</title><rect x="94.2792%" y="357" width="1.7549%" height="15" fill="rgb(216,185,54)" fg:x="9509" fg:w="177"/><text x="94.5292%" y="367.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (4 samples, 0.04%)</title><rect x="95.9944%" y="341" width="0.0397%" height="15" fill="rgb(254,217,39)" fg:x="9682" fg:w="4"/><text x="96.2444%" y="351.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (4 samples, 0.04%)</title><rect x="96.0341%" y="405" width="0.0397%" height="15" fill="rgb(240,178,23)" fg:x="9686" fg:w="4"/><text x="96.2841%" y="415.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (4 samples, 0.04%)</title><rect x="96.0341%" y="389" width="0.0397%" height="15" fill="rgb(218,11,47)" fg:x="9686" fg:w="4"/><text x="96.2841%" y="399.50"></text></g><g><title>serde_json::ser::format_escaped_str (4 samples, 0.04%)</title><rect x="96.0341%" y="373" width="0.0397%" height="15" fill="rgb(218,51,51)" fg:x="9686" fg:w="4"/><text x="96.2841%" y="383.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (3 samples, 0.03%)</title><rect x="96.0440%" y="357" width="0.0297%" height="15" fill="rgb(238,126,27)" fg:x="9687" fg:w="3"/><text x="96.2940%" y="367.50"></text></g><g><title>machine::_::&lt;impl serde::ser::Serialize for machine::Position&gt;::serialize (304 samples, 3.01%)</title><rect x="94.2792%" y="469" width="3.0141%" height="15" fill="rgb(249,202,22)" fg:x="9509" fg:w="304"/><text x="94.5292%" y="479.50">mac..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (304 samples, 3.01%)</title><rect x="94.2792%" y="453" width="3.0141%" height="15" fill="rgb(254,195,49)" fg:x="9509" fg:w="304"/><text x="94.5292%" y="463.50">&lt;se..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (304 samples, 3.01%)</title><rect x="94.2792%" y="437" width="3.0141%" height="15" fill="rgb(208,123,14)" fg:x="9509" fg:w="304"/><text x="94.5292%" y="447.50">ser..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (127 samples, 1.26%)</title><rect x="96.0341%" y="421" width="1.2592%" height="15" fill="rgb(224,200,8)" fg:x="9686" fg:w="127"/><text x="96.2841%" y="431.50"></text></g><g><title>serde_json::ser::Formatter::begin_object_value (123 samples, 1.22%)</title><rect x="96.0738%" y="405" width="1.2195%" height="15" fill="rgb(217,61,36)" fg:x="9690" fg:w="123"/><text x="96.3238%" y="415.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for &amp;mut W&gt;::write_all (123 samples, 1.22%)</title><rect x="96.0738%" y="389" width="1.2195%" height="15" fill="rgb(206,35,45)" fg:x="9690" fg:w="123"/><text x="96.3238%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Write for alloc::vec::Vec&lt;u8,A&gt;&gt;::write_all (123 samples, 1.22%)</title><rect x="96.0738%" y="373" width="1.2195%" height="15" fill="rgb(217,65,33)" fg:x="9690" fg:w="123"/><text x="96.3238%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (123 samples, 1.22%)</title><rect x="96.0738%" y="357" width="1.2195%" height="15" fill="rgb(222,158,48)" fg:x="9690" fg:w="123"/><text x="96.3238%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (123 samples, 1.22%)</title><rect x="96.0738%" y="341" width="1.2195%" height="15" fill="rgb(254,2,54)" fg:x="9690" fg:w="123"/><text x="96.3238%" y="351.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (123 samples, 1.22%)</title><rect x="96.0738%" y="325" width="1.2195%" height="15" fill="rgb(250,143,38)" fg:x="9690" fg:w="123"/><text x="96.3238%" y="335.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (123 samples, 1.22%)</title><rect x="96.0738%" y="309" width="1.2195%" height="15" fill="rgb(248,25,0)" fg:x="9690" fg:w="123"/><text x="96.3238%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (122 samples, 1.21%)</title><rect x="96.0837%" y="293" width="1.2096%" height="15" fill="rgb(206,152,27)" fg:x="9691" fg:w="122"/><text x="96.3337%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (122 samples, 1.21%)</title><rect x="96.0837%" y="277" width="1.2096%" height="15" fill="rgb(240,77,30)" fg:x="9691" fg:w="122"/><text x="96.3337%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (122 samples, 1.21%)</title><rect x="96.0837%" y="261" width="1.2096%" height="15" fill="rgb(231,5,3)" fg:x="9691" fg:w="122"/><text x="96.3337%" y="271.50"></text></g><g><title>alloc::raw_vec::finish_grow (120 samples, 1.19%)</title><rect x="96.1035%" y="245" width="1.1898%" height="15" fill="rgb(207,226,32)" fg:x="9693" fg:w="120"/><text x="96.3535%" y="255.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (119 samples, 1.18%)</title><rect x="96.1134%" y="229" width="1.1799%" height="15" fill="rgb(222,207,47)" fg:x="9694" fg:w="119"/><text x="96.3634%" y="239.50"></text></g><g><title>alloc::alloc::Global::grow_impl (119 samples, 1.18%)</title><rect x="96.1134%" y="213" width="1.1799%" height="15" fill="rgb(229,115,45)" fg:x="9694" fg:w="119"/><text x="96.3634%" y="223.50"></text></g><g><title>alloc::alloc::realloc (119 samples, 1.18%)</title><rect x="96.1134%" y="197" width="1.1799%" height="15" fill="rgb(224,191,6)" fg:x="9694" fg:w="119"/><text x="96.3634%" y="207.50"></text></g><g><title>__GI___libc_realloc (119 samples, 1.18%)</title><rect x="96.1134%" y="181" width="1.1799%" height="15" fill="rgb(230,227,24)" fg:x="9694" fg:w="119"/><text x="96.3634%" y="191.50"></text></g><g><title>_int_realloc (119 samples, 1.18%)</title><rect x="96.1134%" y="165" width="1.1799%" height="15" fill="rgb(228,80,19)" fg:x="9694" fg:w="119"/><text x="96.3634%" y="175.50"></text></g><g><title>_int_malloc (119 samples, 1.18%)</title><rect x="96.1134%" y="149" width="1.1799%" height="15" fill="rgb(247,229,0)" fg:x="9694" fg:w="119"/><text x="96.3634%" y="159.50"></text></g><g><title>unlink_chunk (2 samples, 0.02%)</title><rect x="97.2734%" y="133" width="0.0198%" height="15" fill="rgb(237,194,15)" fg:x="9811" fg:w="2"/><text x="97.5234%" y="143.50"></text></g><g><title>serde::ser::impls::&lt;impl serde::ser::Serialize for alloc::string::String&gt;::serialize (2 samples, 0.02%)</title><rect x="97.2933%" y="469" width="0.0198%" height="15" fill="rgb(219,203,20)" fg:x="9813" fg:w="2"/><text x="97.5433%" y="479.50"></text></g><g><title>&lt;&amp;mut serde_json::ser::Serializer&lt;W,F&gt; as serde::ser::Serializer&gt;::serialize_str (2 samples, 0.02%)</title><rect x="97.2933%" y="453" width="0.0198%" height="15" fill="rgb(234,128,8)" fg:x="9813" fg:w="2"/><text x="97.5433%" y="463.50"></text></g><g><title>serde_json::ser::format_escaped_str (2 samples, 0.02%)</title><rect x="97.2933%" y="437" width="0.0198%" height="15" fill="rgb(248,202,8)" fg:x="9813" fg:w="2"/><text x="97.5433%" y="447.50"></text></g><g><title>serde_json::ser::format_escaped_str_contents (2 samples, 0.02%)</title><rect x="97.2933%" y="421" width="0.0198%" height="15" fill="rgb(206,104,37)" fg:x="9813" fg:w="2"/><text x="97.5433%" y="431.50"></text></g><g><title>serde_json::ser::to_string (319 samples, 3.16%)</title><rect x="94.1602%" y="581" width="3.1628%" height="15" fill="rgb(223,8,27)" fg:x="9497" fg:w="319"/><text x="94.4102%" y="591.50">ser..</text></g><g><title>serde_json::ser::to_vec (319 samples, 3.16%)</title><rect x="94.1602%" y="565" width="3.1628%" height="15" fill="rgb(216,217,28)" fg:x="9497" fg:w="319"/><text x="94.4102%" y="575.50">ser..</text></g><g><title>serde_json::ser::to_writer (315 samples, 3.12%)</title><rect x="94.1999%" y="549" width="3.1231%" height="15" fill="rgb(249,199,1)" fg:x="9501" fg:w="315"/><text x="94.4499%" y="559.50">ser..</text></g><g><title>machine::_::&lt;impl serde::ser::Serialize for machine::Step&gt;::serialize (315 samples, 3.12%)</title><rect x="94.1999%" y="533" width="3.1231%" height="15" fill="rgb(240,85,17)" fg:x="9501" fg:w="315"/><text x="94.4499%" y="543.50">mac..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeStruct&gt;::serialize_field (313 samples, 3.10%)</title><rect x="94.2197%" y="517" width="3.1033%" height="15" fill="rgb(206,108,45)" fg:x="9503" fg:w="313"/><text x="94.4697%" y="527.50">&lt;se..</text></g><g><title>serde::ser::SerializeMap::serialize_entry (312 samples, 3.09%)</title><rect x="94.2296%" y="501" width="3.0934%" height="15" fill="rgb(245,210,41)" fg:x="9504" fg:w="312"/><text x="94.4796%" y="511.50">ser..</text></g><g><title>&lt;serde_json::ser::Compound&lt;W,F&gt; as serde::ser::SerializeMap&gt;::serialize_value (307 samples, 3.04%)</title><rect x="94.2792%" y="485" width="3.0438%" height="15" fill="rgb(206,13,37)" fg:x="9509" fg:w="307"/><text x="94.5292%" y="495.50">&lt;se..</text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (4 samples, 0.04%)</title><rect x="97.3329%" y="517" width="0.0397%" height="15" fill="rgb(250,61,18)" fg:x="9817" fg:w="4"/><text x="97.5829%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sync::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (4 samples, 0.04%)</title><rect x="97.3329%" y="501" width="0.0397%" height="15" fill="rgb(235,172,48)" fg:x="9817" fg:w="4"/><text x="97.5829%" y="511.50"></text></g><g><title>&lt;std::sync::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="97.3329%" y="485" width="0.0397%" height="15" fill="rgb(249,201,17)" fg:x="9817" fg:w="4"/><text x="97.5829%" y="495.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::unlock (4 samples, 0.04%)</title><rect x="97.3329%" y="469" width="0.0397%" height="15" fill="rgb(219,208,6)" fg:x="9817" fg:w="4"/><text x="97.5829%" y="479.50"></text></g><g><title>core::sync::atomic::AtomicU32::swap (4 samples, 0.04%)</title><rect x="97.3329%" y="453" width="0.0397%" height="15" fill="rgb(248,31,23)" fg:x="9817" fg:w="4"/><text x="97.5829%" y="463.50"></text></g><g><title>core::sync::atomic::atomic_swap (4 samples, 0.04%)</title><rect x="97.3329%" y="437" width="0.0397%" height="15" fill="rgb(245,15,42)" fg:x="9817" fg:w="4"/><text x="97.5829%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="97.3825%" y="485" width="0.0198%" height="15" fill="rgb(222,217,39)" fg:x="9822" fg:w="2"/><text x="97.6325%" y="495.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="97.3825%" y="469" width="0.0198%" height="15" fill="rgb(210,219,27)" fg:x="9822" fg:w="2"/><text x="97.6325%" y="479.50"></text></g><g><title>__GI___libc_write (246 samples, 2.44%)</title><rect x="97.4123%" y="357" width="2.4390%" height="15" fill="rgb(252,166,36)" fg:x="9825" fg:w="246"/><text x="97.6623%" y="367.50">__..</text></g><g><title>[unknown] (242 samples, 2.40%)</title><rect x="97.4519%" y="341" width="2.3994%" height="15" fill="rgb(245,132,34)" fg:x="9829" fg:w="242"/><text x="97.7019%" y="351.50">[u..</text></g><g><title>[unknown] (233 samples, 2.31%)</title><rect x="97.5411%" y="325" width="2.3101%" height="15" fill="rgb(236,54,3)" fg:x="9838" fg:w="233"/><text x="97.7911%" y="335.50">[..</text></g><g><title>[unknown] (233 samples, 2.31%)</title><rect x="97.5411%" y="309" width="2.3101%" height="15" fill="rgb(241,173,43)" fg:x="9838" fg:w="233"/><text x="97.7911%" y="319.50">[..</text></g><g><title>[unknown] (232 samples, 2.30%)</title><rect x="97.5511%" y="293" width="2.3002%" height="15" fill="rgb(215,190,9)" fg:x="9839" fg:w="232"/><text x="97.8011%" y="303.50">[..</text></g><g><title>[unknown] (230 samples, 2.28%)</title><rect x="97.5709%" y="277" width="2.2804%" height="15" fill="rgb(242,101,16)" fg:x="9841" fg:w="230"/><text x="97.8209%" y="287.50">[..</text></g><g><title>[unknown] (228 samples, 2.26%)</title><rect x="97.5907%" y="261" width="2.2606%" height="15" fill="rgb(223,190,21)" fg:x="9843" fg:w="228"/><text x="97.8407%" y="271.50">[..</text></g><g><title>[unknown] (223 samples, 2.21%)</title><rect x="97.6403%" y="245" width="2.2110%" height="15" fill="rgb(215,228,25)" fg:x="9848" fg:w="223"/><text x="97.8903%" y="255.50">[..</text></g><g><title>[unknown] (219 samples, 2.17%)</title><rect x="97.6800%" y="229" width="2.1713%" height="15" fill="rgb(225,36,22)" fg:x="9852" fg:w="219"/><text x="97.9300%" y="239.50">[..</text></g><g><title>[unknown] (211 samples, 2.09%)</title><rect x="97.7593%" y="213" width="2.0920%" height="15" fill="rgb(251,106,46)" fg:x="9860" fg:w="211"/><text x="98.0093%" y="223.50">[..</text></g><g><title>[unknown] (201 samples, 1.99%)</title><rect x="97.8584%" y="197" width="1.9929%" height="15" fill="rgb(208,90,1)" fg:x="9870" fg:w="201"/><text x="98.1084%" y="207.50">[..</text></g><g><title>[unknown] (136 samples, 1.35%)</title><rect x="98.5029%" y="181" width="1.3484%" height="15" fill="rgb(243,10,4)" fg:x="9935" fg:w="136"/><text x="98.7529%" y="191.50"></text></g><g><title>[unknown] (131 samples, 1.30%)</title><rect x="98.5524%" y="165" width="1.2988%" height="15" fill="rgb(212,137,27)" fg:x="9940" fg:w="131"/><text x="98.8024%" y="175.50"></text></g><g><title>[unknown] (112 samples, 1.11%)</title><rect x="98.7408%" y="149" width="1.1105%" height="15" fill="rgb(231,220,49)" fg:x="9959" fg:w="112"/><text x="98.9908%" y="159.50"></text></g><g><title>[unknown] (93 samples, 0.92%)</title><rect x="98.9292%" y="133" width="0.9221%" height="15" fill="rgb(237,96,20)" fg:x="9978" fg:w="93"/><text x="99.1792%" y="143.50"></text></g><g><title>[unknown] (50 samples, 0.50%)</title><rect x="99.3555%" y="117" width="0.4957%" height="15" fill="rgb(239,229,30)" fg:x="10021" fg:w="50"/><text x="99.6055%" y="127.50"></text></g><g><title>[unknown] (50 samples, 0.50%)</title><rect x="99.3555%" y="101" width="0.4957%" height="15" fill="rgb(219,65,33)" fg:x="10021" fg:w="50"/><text x="99.6055%" y="111.50"></text></g><g><title>[unknown] (28 samples, 0.28%)</title><rect x="99.5737%" y="85" width="0.2776%" height="15" fill="rgb(243,134,7)" fg:x="10043" fg:w="28"/><text x="99.8237%" y="95.50"></text></g><g><title>[unknown] (23 samples, 0.23%)</title><rect x="99.6232%" y="69" width="0.2280%" height="15" fill="rgb(216,177,54)" fg:x="10048" fg:w="23"/><text x="99.8732%" y="79.50"></text></g><g><title>[unknown] (15 samples, 0.15%)</title><rect x="99.7026%" y="53" width="0.1487%" height="15" fill="rgb(211,160,20)" fg:x="10056" fg:w="15"/><text x="99.9526%" y="63.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.8314%" y="37" width="0.0198%" height="15" fill="rgb(239,85,39)" fg:x="10069" fg:w="2"/><text x="100.0814%" y="47.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (247 samples, 2.45%)</title><rect x="97.4123%" y="405" width="2.4489%" height="15" fill="rgb(232,125,22)" fg:x="9825" fg:w="247"/><text x="97.6623%" y="415.50">&lt;s..</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (247 samples, 2.45%)</title><rect x="97.4123%" y="389" width="2.4489%" height="15" fill="rgb(244,57,34)" fg:x="9825" fg:w="247"/><text x="97.6623%" y="399.50">&lt;s..</text></g><g><title>std::sys::unix::fd::FileDesc::write (247 samples, 2.45%)</title><rect x="97.4123%" y="373" width="2.4489%" height="15" fill="rgb(214,203,32)" fg:x="9825" fg:w="247"/><text x="97.6623%" y="383.50">st..</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (248 samples, 2.46%)</title><rect x="97.4123%" y="421" width="2.4589%" height="15" fill="rgb(207,58,43)" fg:x="9825" fg:w="248"/><text x="97.6623%" y="431.50">st..</text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (250 samples, 2.48%)</title><rect x="97.4023%" y="485" width="2.4787%" height="15" fill="rgb(215,193,15)" fg:x="9824" fg:w="250"/><text x="97.6523%" y="495.50">&lt;s..</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (250 samples, 2.48%)</title><rect x="97.4023%" y="469" width="2.4787%" height="15" fill="rgb(232,15,44)" fg:x="9824" fg:w="250"/><text x="97.6523%" y="479.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (250 samples, 2.48%)</title><rect x="97.4023%" y="453" width="2.4787%" height="15" fill="rgb(212,3,48)" fg:x="9824" fg:w="250"/><text x="97.6523%" y="463.50">&lt;s..</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (250 samples, 2.48%)</title><rect x="97.4023%" y="437" width="2.4787%" height="15" fill="rgb(218,128,7)" fg:x="9824" fg:w="250"/><text x="97.6523%" y="447.50">&lt;s..</text></g><g><title>std::io::Write::write_fmt (255 samples, 2.53%)</title><rect x="97.3726%" y="517" width="2.5283%" height="15" fill="rgb(226,216,39)" fg:x="9821" fg:w="255"/><text x="97.6226%" y="527.50">st..</text></g><g><title>core::fmt::write (255 samples, 2.53%)</title><rect x="97.3726%" y="501" width="2.5283%" height="15" fill="rgb(243,47,51)" fg:x="9821" fg:w="255"/><text x="97.6226%" y="511.50">co..</text></g><g><title>core::fmt::rt::Argument::fmt (2 samples, 0.02%)</title><rect x="99.8810%" y="485" width="0.0198%" height="15" fill="rgb(241,183,40)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="495.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="99.8810%" y="469" width="0.0198%" height="15" fill="rgb(231,217,32)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="479.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.8810%" y="453" width="0.0198%" height="15" fill="rgb(229,61,38)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="463.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.8810%" y="437" width="0.0198%" height="15" fill="rgb(225,210,5)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="447.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="99.8810%" y="421" width="0.0198%" height="15" fill="rgb(231,79,45)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="431.50"></text></g><g><title>std::sys_common::memchr::memrchr (2 samples, 0.02%)</title><rect x="99.8810%" y="405" width="0.0198%" height="15" fill="rgb(224,100,7)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="415.50"></text></g><g><title>std::sys::unix::memchr::memrchr (2 samples, 0.02%)</title><rect x="99.8810%" y="389" width="0.0198%" height="15" fill="rgb(241,198,18)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="399.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.02%)</title><rect x="99.8810%" y="373" width="0.0198%" height="15" fill="rgb(252,97,53)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="383.50"></text></g><g><title>__memrchr_avx2 (2 samples, 0.02%)</title><rect x="99.8810%" y="357" width="0.0198%" height="15" fill="rgb(220,88,7)" fg:x="10074" fg:w="2"/><text x="100.1310%" y="367.50"></text></g><g><title>_start (8,040 samples, 79.71%)</title><rect x="20.2161%" y="869" width="79.7145%" height="15" fill="rgb(213,176,14)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="879.50">_start</text></g><g><title>__libc_start_main_impl (8,040 samples, 79.71%)</title><rect x="20.2161%" y="853" width="79.7145%" height="15" fill="rgb(246,73,7)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="863.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (8,040 samples, 79.71%)</title><rect x="20.2161%" y="837" width="79.7145%" height="15" fill="rgb(245,64,36)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="847.50">__libc_start_call_main</text></g><g><title>main (8,040 samples, 79.71%)</title><rect x="20.2161%" y="821" width="79.7145%" height="15" fill="rgb(245,80,10)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="831.50">main</text></g><g><title>std::rt::lang_start_internal (8,040 samples, 79.71%)</title><rect x="20.2161%" y="805" width="79.7145%" height="15" fill="rgb(232,107,50)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="815.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (8,040 samples, 79.71%)</title><rect x="20.2161%" y="789" width="79.7145%" height="15" fill="rgb(253,3,0)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="799.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,040 samples, 79.71%)</title><rect x="20.2161%" y="773" width="79.7145%" height="15" fill="rgb(212,99,53)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="783.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,040 samples, 79.71%)</title><rect x="20.2161%" y="757" width="79.7145%" height="15" fill="rgb(249,111,54)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="767.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::_{{closure}} (8,040 samples, 79.71%)</title><rect x="20.2161%" y="741" width="79.7145%" height="15" fill="rgb(249,55,30)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="751.50">std::rt::lang_start_internal::_{{closure}}</text></g><g><title>std::panic::catch_unwind (8,040 samples, 79.71%)</title><rect x="20.2161%" y="725" width="79.7145%" height="15" fill="rgb(237,47,42)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (8,040 samples, 79.71%)</title><rect x="20.2161%" y="709" width="79.7145%" height="15" fill="rgb(211,20,18)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (8,040 samples, 79.71%)</title><rect x="20.2161%" y="693" width="79.7145%" height="15" fill="rgb(231,203,46)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="703.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (8,040 samples, 79.71%)</title><rect x="20.2161%" y="677" width="79.7145%" height="15" fill="rgb(237,142,3)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="687.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::_{{closure}} (8,040 samples, 79.71%)</title><rect x="20.2161%" y="661" width="79.7145%" height="15" fill="rgb(241,107,1)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="671.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (8,040 samples, 79.71%)</title><rect x="20.2161%" y="645" width="79.7145%" height="15" fill="rgb(229,83,13)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (8,040 samples, 79.71%)</title><rect x="20.2161%" y="629" width="79.7145%" height="15" fill="rgb(241,91,40)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="639.50">core::ops::function::FnOnce::call_once</text></g><g><title>graphwalker::main (8,040 samples, 79.71%)</title><rect x="20.2161%" y="613" width="79.7145%" height="15" fill="rgb(225,3,45)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="623.50">graphwalker::main</text></g><g><title>machine::Machine::walk (8,040 samples, 79.71%)</title><rect x="20.2161%" y="597" width="79.7145%" height="15" fill="rgb(244,223,14)" fg:x="2039" fg:w="8040"/><text x="20.4661%" y="607.50">machine::Machine::walk</text></g><g><title>std::io::stdio::_print (263 samples, 2.61%)</title><rect x="97.3230%" y="581" width="2.6076%" height="15" fill="rgb(224,124,37)" fg:x="9816" fg:w="263"/><text x="97.5730%" y="591.50">st..</text></g><g><title>std::io::stdio::print_to (263 samples, 2.61%)</title><rect x="97.3230%" y="565" width="2.6076%" height="15" fill="rgb(251,171,30)" fg:x="9816" fg:w="263"/><text x="97.5730%" y="575.50">st..</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (262 samples, 2.60%)</title><rect x="97.3329%" y="549" width="2.5977%" height="15" fill="rgb(236,46,54)" fg:x="9817" fg:w="262"/><text x="97.5829%" y="559.50">&lt;s..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (262 samples, 2.60%)</title><rect x="97.3329%" y="533" width="2.5977%" height="15" fill="rgb(245,213,5)" fg:x="9817" fg:w="262"/><text x="97.5829%" y="543.50">&lt;&amp;..</text></g><g><title>std::io::stdio::Stdout::lock (3 samples, 0.03%)</title><rect x="99.9009%" y="517" width="0.0297%" height="15" fill="rgb(230,144,27)" fg:x="10076" fg:w="3"/><text x="100.1509%" y="527.50"></text></g><g><title>std::sync::remutex::ReentrantMutex&lt;T&gt;::lock (3 samples, 0.03%)</title><rect x="99.9009%" y="501" width="0.0297%" height="15" fill="rgb(220,86,6)" fg:x="10076" fg:w="3"/><text x="100.1509%" y="511.50"></text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (3 samples, 0.03%)</title><rect x="99.9009%" y="485" width="0.0297%" height="15" fill="rgb(240,20,13)" fg:x="10076" fg:w="3"/><text x="100.1509%" y="495.50"></text></g><g><title>core::sync::atomic::AtomicU32::compare_exchange (3 samples, 0.03%)</title><rect x="99.9009%" y="469" width="0.0297%" height="15" fill="rgb(217,89,34)" fg:x="10076" fg:w="3"/><text x="100.1509%" y="479.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (3 samples, 0.03%)</title><rect x="99.9009%" y="453" width="0.0297%" height="15" fill="rgb(229,13,5)" fg:x="10076" fg:w="3"/><text x="100.1509%" y="463.50"></text></g><g><title>graphwalker (10,081 samples, 99.95%)</title><rect x="0.0000%" y="885" width="99.9504%" height="15" fill="rgb(244,67,35)" fg:x="0" fg:w="10081"/><text x="0.2500%" y="895.50">graphwalker</text></g><g><title>all (10,086 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(221,40,2)" fg:x="0" fg:w="10086"/><text x="0.2500%" y="911.50"></text></g><g><title>perf-exec (5 samples, 0.05%)</title><rect x="99.9504%" y="885" width="0.0496%" height="15" fill="rgb(237,157,21)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="895.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="869" width="0.0496%" height="15" fill="rgb(222,94,11)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="879.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="853" width="0.0496%" height="15" fill="rgb(249,113,6)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="863.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="837" width="0.0496%" height="15" fill="rgb(238,137,36)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="847.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="821" width="0.0496%" height="15" fill="rgb(210,102,26)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="831.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="805" width="0.0496%" height="15" fill="rgb(218,30,30)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="815.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="789" width="0.0496%" height="15" fill="rgb(214,67,26)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="799.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="773" width="0.0496%" height="15" fill="rgb(251,9,53)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="783.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="757" width="0.0496%" height="15" fill="rgb(228,204,25)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="767.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="741" width="0.0496%" height="15" fill="rgb(207,153,8)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="751.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="725" width="0.0496%" height="15" fill="rgb(242,9,16)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="735.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="709" width="0.0496%" height="15" fill="rgb(217,211,10)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="719.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="693" width="0.0496%" height="15" fill="rgb(219,228,52)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="703.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="677" width="0.0496%" height="15" fill="rgb(231,92,29)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="687.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="661" width="0.0496%" height="15" fill="rgb(232,8,23)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="671.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.9504%" y="645" width="0.0496%" height="15" fill="rgb(216,211,34)" fg:x="10081" fg:w="5"/><text x="100.2004%" y="655.50"></text></g></svg></svg>